{"traceEvents": [{"ph": "M", "pid": 21084, "tid": 21084, "name": "process_name", "args": {"name": "SpawnProcess-34"}}, {"ph": "M", "pid": 21084, "tid": 20856, "name": "thread_name", "args": {"name": "MainThread"}}, {"pid": 21084, "tid": 20856, "ts": 28113929012.3, "dur": 459.8, "name": "init (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\db\\database.py:67)", "ph": "X", "cat": "FEE"}, {"pid": 21084, "tid": 20856, "ts": 28113929477.8, "dur": 48.6, "name": "get_session (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\db\\database.py:94)", "ph": "X", "cat": "FEE"}, {"pid": 21084, "tid": 20856, "ts": 28113929530.6, "dur": 0.4, "name": "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\repositories\\private.py:15)", "ph": "X", "cat": "FEE"}, {"pid": 21084, "tid": 20856, "ts": 28113929475.8, "dur": 56.2, "name": "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\repository.py:21)", "ph": "X", "cat": "FEE"}, {"pid": 21084, "tid": 20856, "ts": 28113929536.3, "dur": 0.6, "name": "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\db\\base_repository.py:33)", "ph": "X", "cat": "FEE"}, {"pid": 21084, "tid": 20856, "ts": 28113929534.5, "dur": 2.6, "name": "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\group\\repository.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 21084, "tid": 20856, "ts": 28113929540.1, "dur": 0.2, "name": "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\db\\base_repository.py:33)", "ph": "X", "cat": "FEE"}, {"pid": 21084, "tid": 20856, "ts": 28113929539.2, "dur": 1.3, "name": "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\user\\repository.py:34)", "ph": "X", "cat": "FEE"}, {"pid": 21084, "tid": 20856, "ts": 28113929542.9, "dur": 0.2, "name": "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\db\\base_repository.py:33)", "ph": "X", "cat": "FEE"}, {"pid": 21084, "tid": 20856, "ts": 28113929541.9, "dur": 1.4, "name": "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\group\\repository.py:244)", "ph": "X", "cat": "FEE"}, {"pid": 21084, "tid": 20856, "ts": 28113929545.1, "dur": 1.0, "name": "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\user\\service.py:19)", "ph": "X", "cat": "FEE"}, {"pid": 21084, "tid": 20856, "ts": 28113929547.7, "dur": 0.8, "name": "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\core\\websocket\\manager.py:37)", "ph": "X", "cat": "FEE"}, {"pid": 21084, "tid": 20856, "ts": 28113929552.3, "dur": 5.7, "name": "setup_handlers (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\core\\websocket\\handlers.py:26)", "ph": "X", "cat": "FEE"}, {"pid": 21084, "tid": 20856, "ts": 28113929550.6, "dur": 7.5, "name": "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\core\\websocket\\handlers.py:13)", "ph": "X", "cat": "FEE"}, {"pid": 21084, "tid": 20856, "ts": 28113929561.3, "dur": 0.7, "name": "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\repositories\\group.py:17)", "ph": "X", "cat": "FEE"}, {"pid": 21084, "tid": 20856, "ts": 28113929559.6, "dur": 2.6, "name": "_get_group_repository (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\repository.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 21084, "tid": 20856, "ts": 28113929566.9, "dur": 4.2, "name": "register_handlers (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\handlers.py:56)", "ph": "X", "cat": "FEE"}, {"pid": 21084, "tid": 20856, "ts": 28113929564.6, "dur": 6.7, "name": "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\handlers.py:28)", "ph": "X", "cat": "FEE"}, {"pid": 21084, "tid": 20856, "ts": 28113929572.1, "dur": 3.9, "name": "register_handlers (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\handlers.py:56)", "ph": "X", "cat": "FEE"}, {"pid": 21084, "tid": 20856, "ts": 28113930161.4, "dur": 12.7, "name": "wrapper (C:\\Users\\qqfeng\\AppData\\Roaming\\Python\\Python311\\site-packages\\typing_extensions.py:2850)", "ph": "X", "cat": "FEE"}], "viztracer_metadata": {"version": "0.16.2", "overflow": false}, "file_info": {"files": {"D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\db\\database.py": ["\"\"\"\u6570\u636e\u5e93\u8fde\u63a5\u548c\u4f1a\u8bdd\u7ba1\u7406\n\n\u672c\u6a21\u5757\u63d0\u4f9b\u4e86\u4e09\u79cd\u4e0d\u540c\u7684\u6570\u636e\u5e93\u4f1a\u8bdd\u7ba1\u7406\u65b9\u5f0f\uff1a\n1. get_session(): \u7528\u4e8e\u4f9d\u8d56\u6ce8\u5165\u573a\u666f\n2. create_session(): \u7528\u4e8e\u76f4\u63a5\u521b\u5efa\u4f1a\u8bdd\n3. init_db(): \u7528\u4e8e\u6570\u636e\u5e93\u521d\u59cb\u5316\n\n\u6bcf\u79cd\u65b9\u5f0f\u6709\u5176\u7279\u5b9a\u7528\u9014\u548c\u6700\u4f73\u5b9e\u8df5\u573a\u666f\u3002\n\"\"\"\nimport sys\nsys.path.append(r'D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib')\nimport Lugwit_Module as LM\nlprint = LM.lprint\n\n# \u6807\u51c6\u5e93\nimport os\nimport logging\n\n# \u7b2c\u4e09\u65b9\u5e93\nfrom sqlalchemy.ext.asyncio import AsyncSession, create_async_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom dotenv import load_dotenv\n\n# \u672c\u5730\u6a21\u5757\nfrom app.db.base import Base\n\n# \u52a0\u8f7d\u73af\u5883\u53d8\u91cf\nload_dotenv()\n\n# \u83b7\u53d6\u6570\u636e\u5e93URL\nDATABASE_URL = os.getenv(\"DATABASE_URL\")\nlprint(f\"\u6570\u636e\u5e93URL: {DATABASE_URL}\")\n\n# \u83b7\u53d6 SQLAlchemy \u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\nlogging.getLogger('sqlalchemy.engine').setLevel(logging.ERROR)\n\n# \u521b\u5efa\u5f02\u6b65\u5f15\u64ce\nengine = create_async_engine(\n    DATABASE_URL,\n    echo=False,  # \u751f\u4ea7\u73af\u5883\u4e2d\u8bbe\u4e3a False\n    future=True,\n    pool_size=int(os.getenv(\"DB_POOL_SIZE\", \"20\")),\n    max_overflow=int(os.getenv(\"DB_MAX_OVERFLOW\", \"10\")),\n    pool_timeout=60,    # \u589e\u52a0\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4\n    pool_recycle=1800,  # \u6bcf30\u5206\u949f\u56de\u6536\u8fde\u63a5\n    pool_pre_ping=True, # \u5728\u6bcf\u6b21\u8fde\u63a5\u524dping\u4e00\u4e0b\u6570\u636e\u5e93\n    connect_args={\n        \"command_timeout\": 60,  # \u547d\u4ee4\u8d85\u65f6\u65f6\u95f4\n    }\n)\n\n# \u521b\u5efa\u5f02\u6b65\u4f1a\u8bdd\u5de5\u5382\nAsyncSessionLocal = sessionmaker(\n    bind=engine,\n    class_=AsyncSession,\n    expire_on_commit=False,\n    autocommit=False,\n    autoflush=False\n)\n\nclass DatabaseManager:\n    \"\"\"\u6570\u636e\u5e93\u7ba1\u7406\u5668\uff0c\u63d0\u4f9b\u5168\u5c40\u6570\u636e\u5e93\u4f1a\u8bdd\u7ba1\u7406\"\"\"\n    \n    _session_factory = None\n    _engine = None\n\n    @classmethod\n    def init(cls):\n        \"\"\"\u521d\u59cb\u5316\u6570\u636e\u5e93\u7ba1\u7406\u5668\"\"\"\n        if cls._engine is None:\n            cls._engine = create_async_engine(\n                DATABASE_URL,\n                echo=False,\n                future=True,\n                pool_size=int(os.getenv(\"DB_POOL_SIZE\", \"20\")),\n                max_overflow=int(os.getenv(\"DB_MAX_OVERFLOW\", \"10\")),\n                pool_timeout=60,\n                pool_recycle=1800,\n                pool_pre_ping=True,\n                connect_args={\n                    \"command_timeout\": 60,\n                }\n            )\n        \n        if cls._session_factory is None:\n            cls._session_factory = sessionmaker(\n                bind=cls._engine,\n                class_=AsyncSession,\n                expire_on_commit=False,\n                autocommit=False,\n                autoflush=False\n            )\n\n    @classmethod\n    def get_session(cls) -> AsyncSession:\n        \"\"\"\u83b7\u53d6\u6570\u636e\u5e93\u4f1a\u8bdd\"\"\"\n        if cls._session_factory is None:\n            raise RuntimeError(\"\u4f1a\u8bdd\u5de5\u5382\u672a\u521d\u59cb\u5316\")\n        return cls._session_factory()\n\n    @classmethod\n    async def cleanup(cls):\n        \"\"\"\u6e05\u7406\u6570\u636e\u5e93\u8d44\u6e90\"\"\"\n        if cls._engine is not None:\n            await cls._engine.dispose()\n            cls._engine = None\n            cls._session_factory = None\n\n    @classmethod\n    async def create_tables(cls):\n        \"\"\"\u521b\u5efa\u6240\u6709\u6570\u636e\u5e93\u8868\"\"\"\n        if cls._engine is None:\n            raise RuntimeError(\"\u6570\u636e\u5e93\u5f15\u64ce\u672a\u521d\u59cb\u5316\")\n\n        try:\n            async with cls._engine.begin() as conn:\n                await conn.run_sync(Base.metadata.create_all)\n                lprint(\"\u6570\u636e\u5e93\u8868\u521b\u5efa\u6210\u529f\")\n        except Exception as e:\n            lprint(f\"\u6570\u636e\u5e93\u8868\u521b\u5efa\u5931\u8d25: {str(e)}\")\n            raise\n\nasync def get_session():\n    \"\"\"\u83b7\u53d6\u6570\u636e\u5e93\u4f1a\u8bdd\uff0c\u4e13\u7528\u4e8e\u4f9d\u8d56\u6ce8\u5165\u573a\u666f\n    \n    \u8fd9\u4e2a\u51fd\u6570\u662f\u4e00\u4e2a\u5f02\u6b65\u751f\u6210\u5668\uff0c\u4e3b\u8981\u7528\u4e8eFastAPI\u7684\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\u3002\n    \u5b83\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u4f1a\u8bdd\u751f\u547d\u5468\u671f\u7ba1\u7406\uff0c\u5305\u62ec\uff1a\n    1. \u521b\u5efa\u4f1a\u8bdd\n    2. \u81ea\u52a8\u63d0\u4ea4\u6216\u56de\u6eda\u4e8b\u52a1\n    3. \u81ea\u52a8\u5173\u95ed\u4f1a\u8bdd\n    \n    \u4e0ecreate_session()\u7684\u533a\u522b\uff1a\n    - get_session()\u662f\u751f\u6210\u5668\uff0c\u7528yield\u8fd4\u56de\u4f1a\u8bdd\n    - \u9002\u5408\u5728\u4f9d\u8d56\u6ce8\u5165\u548c\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u4e2d\u4f7f\u7528\n    - \u81ea\u52a8\u5904\u7406\u4e8b\u52a1\u548c\u4f1a\u8bdd\u751f\u547d\u5468\u671f\n    \"\"\"\n    session = AsyncSessionLocal()\n    try:\n        yield session\n        await session.commit()\n    except Exception as e:\n        await session.rollback()\n        lprint(f\"\u6570\u636e\u5e93\u64cd\u4f5c\u5931\u8d25: {e}\")\n        raise\n    finally:\n        await session.close()\n\nasync def create_session():\n    \"\"\"\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u5e93\u4f1a\u8bdd\uff0c\u7528\u4e8e\u76f4\u63a5\u4f7f\u7528\u573a\u666f\n    \n    \u8fd9\u4e2a\u51fd\u6570\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u4f1a\u8bdd\u5bf9\u8c61\uff0c\u4e3b\u8981\u7528\u4e8e\u9700\u8981\u624b\u52a8\u7ba1\u7406\u4f1a\u8bdd\u751f\u547d\u5468\u671f\u7684\u573a\u666f\u3002\n    \u4f7f\u7528\u6b64\u51fd\u6570\u65f6\u9700\u8981\u6ce8\u610f\uff1a\n    1. \u9700\u8981\u624b\u52a8\u8c03\u7528commit()\u6216rollback()\n    2. \u9700\u8981\u624b\u52a8\u5173\u95ed\u4f1a\u8bdd\n    3. \u5efa\u8bae\u4f7f\u7528try/finally\u786e\u4fdd\u4f1a\u8bdd\u88ab\u6b63\u786e\u5173\u95ed\n    \n    \u4e0eget_session()\u7684\u533a\u522b\uff1a\n    - create_session()\u76f4\u63a5\u8fd4\u56de\u4f1a\u8bdd\u5bf9\u8c61\n    - \u9700\u8981\u624b\u52a8\u7ba1\u7406\u4e8b\u52a1\u548c\u4f1a\u8bdd\u751f\u547d\u5468\u671f\n    - \u66f4\u7075\u6d3b\uff0c\u4f46\u9700\u8981\u66f4\u591a\u4ee3\u7801\n    \"\"\"\n    return AsyncSessionLocal()\n\nasync def get_db():\n    \"\"\"\u83b7\u53d6\u6570\u636e\u5e93\u4f1a\u8bdd\uff0c\u4e13\u7528\u4e8eFastAPI\u7684\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\n    \n    \u8fd9\u4e2a\u51fd\u6570\u662fFastAPI\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\u7684\u5165\u53e3\u70b9\u3002\n    \u5b83\u63d0\u4f9b\u4e86\u4e0eget_session()\u76f8\u540c\u7684\u529f\u80fd\uff0c\u4f46\u662f\uff1a\n    1. \u76f4\u63a5\u7ba1\u7406\u4f1a\u8bdd\uff0c\u4e0d\u4f9d\u8d56\u4e8eget_session()\n    2. \u907f\u514d\u521b\u5efa\u591a\u5c42\u751f\u6210\u5668\n    3. \u63d0\u4f9b\u66f4\u6e05\u6670\u7684\u9519\u8bef\u5904\u7406\n    \"\"\"\n    session = AsyncSessionLocal()\n    try:\n        yield session\n        await session.commit()\n    except Exception as e:\n        await session.rollback()\n        lprint(f\"\u6570\u636e\u5e93\u64cd\u4f5c\u5931\u8d25: {e}\")\n        raise\n    finally:\n        await session.close()\n\nasync def cleanup_db():\n    \"\"\"\u6e05\u7406\u6570\u636e\u5e93\u8fde\u63a5\"\"\"\n    await engine.dispose()\n    lprint(\"\u6570\u636e\u5e93\u8fde\u63a5\u5df2\u6e05\u7406\")\n\nasync def init_db():\n    \"\"\"\u521d\u59cb\u5316\u6570\u636e\u5e93\"\"\"\n    DatabaseManager.init()\n    await DatabaseManager.create_tables()\n", 192], "D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\repositories\\private.py": ["from typing import List, Optional, Dict, Any\nfrom datetime import datetime\nfrom sqlalchemy import select, and_, or_, desc\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nfrom app.db.base_repository import BaseRepository\nfrom app.domain.message.models import PrivateMessage, MessageReaction, MessageMention\nfrom app.domain.message.enums import MessageStatus\nimport Lugwit_Module as LM\nlprint = LM.lprint\n\nclass PrivateMessageRepository:\n    \"\"\"\u79c1\u804a\u6d88\u606f\u4ed3\u50a8\"\"\"\n    \n    def __init__(self, session: AsyncSession):\n        self.session = session\n        \n    async def create(self, message_data: Dict[str, Any]):\n        \"\"\"\u521b\u5efa\u79c1\u804a\u6d88\u606f\n        \n        Args:\n            message_data: \u6d88\u606f\u6570\u636e\n            \n        Returns:\n            \u521b\u5efa\u7684\u6d88\u606f\n        \"\"\"\n        try:\n            # \u521b\u5efa\u6d88\u606f\n            message = PrivateMessage(**message_data)\n            self.session.add(message)\n            await self.session.flush()\n            \n            # \u5904\u7406@\u63d0\u9192\n            if message_data.get(\"mentions\"):\n                for user_id in message_data[\"mentions\"]:\n                    mention = MessageMention(\n                        message_table=\"private_messages\",\n                        message_id=message.id,\n                        user_id=user_id\n                    )\n                    self.session.add(mention)\n                    \n            await self.session.commit()\n            return message\n            \n        except Exception as e:\n            await self.session.rollback()\n            lprint(f\"\u521b\u5efa\u79c1\u804a\u6d88\u606f\u5931\u8d25: {str(e)}\")\n            raise\n            \n    async def get_by_id(self, message_id: int):\n        \"\"\"\u6839\u636eID\u83b7\u53d6\u6d88\u606f\n        \n        Args:\n            message_id: \u6d88\u606fID\n            \n        Returns:\n            \u6d88\u606f\u5bf9\u8c61\n        \"\"\"\n        try:\n            stmt = select(PrivateMessage).where(PrivateMessage.id == message_id)\n            result = await self.session.execute(stmt)\n            return result.scalar_one_or_none()\n        except Exception as e:\n            lprint(f\"\u83b7\u53d6\u79c1\u804a\u6d88\u606f\u5931\u8d25: {str(e)}\")\n            raise\n            \n    async def get_messages(self, \n                          user_id: int,\n                          other_id: int,\n                          limit: int = 20,\n                          before_id: Optional[int] = None,\n                          after_id: Optional[int] = None):\n        \"\"\"\u83b7\u53d6\u4e24\u4e2a\u7528\u6237\u4e4b\u95f4\u7684\u79c1\u804a\u6d88\u606f\n        \n        Args:\n            user_id: \u5f53\u524d\u7528\u6237ID\n            other_id: \u5bf9\u65b9\u7528\u6237ID\n            limit: \u8fd4\u56de\u6d88\u606f\u6570\u91cf\n            before_id: \u5728\u6b64ID\u4e4b\u524d\u7684\u6d88\u606f\n            after_id: \u5728\u6b64ID\u4e4b\u540e\u7684\u6d88\u606f\n            \n        Returns:\n            \u6d88\u606f\u5217\u8868\n        \"\"\"\n        try:\n            # \u6784\u5efa\u67e5\u8be2\u6761\u4ef6\n            conditions = [\n                or_(\n                    and_(\n                        PrivateMessage.sender_id == user_id,\n                        PrivateMessage.receiver_id == other_id\n                    ),\n                    and_(\n                        PrivateMessage.sender_id == other_id,\n                        PrivateMessage.receiver_id == user_id\n                    )\n                )\n            ]\n            \n            if before_id:\n                conditions.append(PrivateMessage.id < before_id)\n            if after_id:\n                conditions.append(PrivateMessage.id > after_id)\n                \n            # \u6784\u5efa\u67e5\u8be2\u8bed\u53e5\n            stmt = select(PrivateMessage)\n            if conditions:\n                stmt = stmt.where(and_(*conditions))\n            stmt = stmt.order_by(desc(PrivateMessage.id)).limit(limit)\n            \n            result = await self.session.execute(stmt)\n            return result.scalars().all()\n            \n        except Exception as e:\n            lprint(f\"\u83b7\u53d6\u79c1\u804a\u6d88\u606f\u5217\u8868\u5931\u8d25: {str(e)}\")\n            raise\n            \n    async def update_status(self, message_id: int, status: MessageStatus):\n        \"\"\"\u66f4\u65b0\u6d88\u606f\u72b6\u6001\n        \n        Args:\n            message_id: \u6d88\u606fID\n            status: \u65b0\u72b6\u6001\n        \"\"\"\n        try:\n            message = await self.get_by_id(message_id)\n            if message:\n                message.status = status\n                await self.session.commit()\n                \n        except Exception as e:\n            await self.session.rollback()\n            lprint(f\"\u66f4\u65b0\u79c1\u804a\u6d88\u606f\u72b6\u6001\u5931\u8d25: {str(e)}\")\n            raise\n            \n    async def add_reaction(self, message_id: int, user_id: int, reaction: str):\n        \"\"\"\u6dfb\u52a0\u8868\u60c5\u56de\u5e94\n        \n        Args:\n            message_id: \u6d88\u606fID\n            user_id: \u7528\u6237ID\n            reaction: \u8868\u60c5\n        \"\"\"\n        try:\n            # \u68c0\u67e5\u6d88\u606f\u662f\u5426\u5b58\u5728\n            message = await self.get_by_id(message_id)\n            if not message:\n                raise ValueError(f\"\u6d88\u606f\u4e0d\u5b58\u5728: {message_id}\")\n                \n            # \u521b\u5efa\u8868\u60c5\u56de\u5e94\n            reaction = MessageReaction(\n                message_table=\"private_messages\",\n                message_id=message_id,\n                user_id=user_id,\n                reaction=reaction\n            )\n            self.session.add(reaction)\n            await self.session.commit()\n            \n        except Exception as e:\n            await self.session.rollback()\n            lprint(f\"\u6dfb\u52a0\u8868\u60c5\u56de\u5e94\u5931\u8d25: {str(e)}\")\n            raise\n            \n    async def remove_reaction(self, message_id: int, user_id: int, reaction: str):\n        \"\"\"\u79fb\u9664\u8868\u60c5\u56de\u5e94\n        \n        Args:\n            message_id: \u6d88\u606fID\n            user_id: \u7528\u6237ID\n            reaction: \u8868\u60c5\n        \"\"\"\n        try:\n            # \u5220\u9664\u8868\u60c5\u56de\u5e94\n            stmt = (\n                select(MessageReaction)\n                .where(\n                    and_(\n                        MessageReaction.message_table == \"private_messages\",\n                        MessageReaction.message_id == message_id,\n                        MessageReaction.user_id == user_id,\n                        MessageReaction.reaction == reaction\n                    )\n                )\n            )\n            result = await self.session.execute(stmt)\n            reaction = result.scalar_one_or_none()\n            \n            if reaction:\n                await self.session.delete(reaction)\n                await self.session.commit()\n                \n        except Exception as e:\n            await self.session.rollback()\n            lprint(f\"\u79fb\u9664\u8868\u60c5\u56de\u5e94\u5931\u8d25: {str(e)}\")\n            raise\n            \n    async def get_unread_count(self, user_id: int) -> int:\n        \"\"\"\u83b7\u53d6\u7528\u6237\u7684\u672a\u8bfb\u79c1\u804a\u6d88\u606f\u6570\u91cf\"\"\"\n        try:\n            stmt = (\n                select(PrivateMessage)\n                .where(\n                    and_(\n                        PrivateMessage.receiver_id == user_id,\n                        PrivateMessage.status == MessageStatus.unread\n                    )\n                )\n            )\n            result = await self.session.execute(stmt)\n            return len(result.scalars().all())\n            \n        except Exception as e:\n            lprint(f\"\u83b7\u53d6\u672a\u8bfb\u79c1\u804a\u6d88\u606f\u6570\u91cf\u5931\u8d25: {str(e)}\")\n            raise\n            \n    async def mark_as_read(self, user_id: int, other_id: int) -> int:\n        \"\"\"\u6807\u8bb0\u4e0e\u67d0\u4e2a\u7528\u6237\u7684\u6240\u6709\u672a\u8bfb\u6d88\u606f\u4e3a\u5df2\u8bfb\n        \n        Args:\n            user_id: \u5f53\u524d\u7528\u6237ID\n            other_id: \u5bf9\u65b9\u7528\u6237ID\n            \n        Returns:\n            \u66f4\u65b0\u7684\u6d88\u606f\u6570\u91cf\n        \"\"\"\n        try:\n            stmt = (\n                select(PrivateMessage)\n                .where(\n                    and_(\n                        PrivateMessage.receiver_id == user_id,\n                        PrivateMessage.sender_id == other_id,\n                        PrivateMessage.status == MessageStatus.unread\n                    )\n                )\n            )\n            result = await self.session.execute(stmt)\n            messages = result.scalars().all()\n            \n            for message in messages:\n                message.status = MessageStatus.read\n                \n            await self.session.commit()\n            return len(messages)\n            \n        except Exception as e:\n            await self.session.rollback()\n            lprint(f\"\u6807\u8bb0\u79c1\u804a\u6d88\u606f\u5df2\u8bfb\u5931\u8d25: {str(e)}\")\n            raise\n", 251], "D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\repository.py": ["\"\"\"\u6d88\u606f\u4ed3\u50a8\u5916\u89c2\u7c7b\"\"\"\nimport sys\nsys.path.append(r'D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib')\nimport Lugwit_Module as LM\nlprint = LM.lprint\n\nfrom datetime import datetime\nfrom typing import List, Optional, Union, Dict\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom app.domain.message.enums import MessageType, MessageStatus\nfrom app.domain.message.repositories import GroupMessageRepository, PrivateMessageRepository\nfrom app.db import DatabaseManager\n\nclass MessageRepository:\n    \"\"\"\u6d88\u606f\u4ed3\u50a8\uff0c\u6574\u5408\u7fa4\u7ec4\u6d88\u606f\u548c\u79c1\u804a\u6d88\u606f\u7684\u4ed3\u50a8\n    \n    \u8fd9\u662f\u4e00\u4e2a\u5916\u89c2\u7c7b\uff0c\u5b83\u5c01\u88c5\u4e86\u7fa4\u7ec4\u6d88\u606f\u548c\u79c1\u804a\u6d88\u606f\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\n    \u4e3a\u4e0a\u5c42\u63d0\u4f9b\u7edf\u4e00\u7684\u63a5\u53e3\u3002\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\u521d\u59cb\u5316\u6d88\u606f\u4ed3\u50a8\"\"\"\n        session = DatabaseManager.get_session()\n        self.private_repository = PrivateMessageRepository(session)\n        self._group_repositories: Dict[str, GroupMessageRepository] = {}\n        self._session = session\n\n    def _get_group_repository(self, group_id: str) -> GroupMessageRepository:\n        \"\"\"\u83b7\u53d6\u7fa4\u7ec4\u6d88\u606f\u4ed3\u50a8\n        \n        \u5982\u679c\u6307\u5b9a\u7fa4\u7ec4\u7684\u4ed3\u50a8\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\u3002\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n        \"\"\"\n        if group_id not in self._group_repositories:\n            self._group_repositories[group_id] = GroupMessageRepository(self._session)\n        return self._group_repositories[group_id]\n\n    async def save_message(self, message) -> str:\n        \"\"\"\u4fdd\u5b58\u6d88\u606f\n        \n        \u6839\u636e\u6d88\u606f\u7c7b\u578b\u9009\u62e9\u5408\u9002\u7684\u4ed3\u50a8\u8fdb\u884c\u4fdd\u5b58\u3002\n        \n        Args:\n            message: \u6d88\u606f\u5bf9\u8c61\n            \n        Returns:\n            str: \u6d88\u606fID\n            \n        Raises:\n            ValueError: \u6d88\u606f\u7c7b\u578b\u65e0\u6548\n        \"\"\"\n        if message.message_type == MessageType.group_chat:\n            repo = self._get_group_repository(message.group_id)\n            return await repo.save_message(message)\n        elif message.message_type == MessageType.private_chat:\n            return await self.private_repository.save_message(message)\n        else:\n            raise ValueError(f\"\u4e0d\u652f\u6301\u7684\u6d88\u606f\u7c7b\u578b: {message.message_type}\")\n\n    async def get_message(self, message_id: str, message_type: MessageType, group_id: Optional[str] = None):\n        \"\"\"\u83b7\u53d6\u6d88\u606f\n        \n        Args:\n            message_id: \u6d88\u606fID\n            message_type: \u6d88\u606f\u7c7b\u578b\n            group_id: \u7fa4\u7ec4ID\uff08\u7fa4\u804a\u6d88\u606f\u5fc5\u9700\uff09\n            \n        Returns:\n            \u6d88\u606f\u5bf9\u8c61\n            \n        Raises:\n            ValueError: \u6d88\u606f\u7c7b\u578b\u65e0\u6548\n        \"\"\"\n        if message_type == MessageType.group_chat:\n            if not group_id:\n                raise ValueError(\"\u83b7\u53d6\u7fa4\u804a\u6d88\u606f\u5fc5\u987b\u63d0\u4f9b\u7fa4\u7ec4ID\")\n            repo = self._get_group_repository(group_id)\n            return await repo.get_message(message_id)\n        elif message_type == MessageType.private_chat:\n            return await self.private_repository.get_message(message_id)\n        else:\n            raise ValueError(f\"\u4e0d\u652f\u6301\u7684\u6d88\u606f\u7c7b\u578b: {message_type}\")\n\n    async def get_messages(self, \n                          user_id: str, \n                          message_type: Optional[MessageType] = None,\n                          group_id: Optional[str] = None,\n                          limit: int = 50,\n                          before: Optional[datetime] = None) -> List:\n        \"\"\"\u83b7\u53d6\u6d88\u606f\u5217\u8868\n        \n        Args:\n            user_id: \u7528\u6237ID\n            message_type: \u6d88\u606f\u7c7b\u578b\uff0c\u5982\u679c\u4e3aNone\u5219\u83b7\u53d6\u6240\u6709\u7c7b\u578b\n            group_id: \u7fa4\u7ec4ID\uff08\u83b7\u53d6\u7fa4\u804a\u6d88\u606f\u65f6\u5fc5\u9700\uff09\n            limit: \u8fd4\u56de\u6d88\u606f\u6570\u91cf\u9650\u5236\n            before: \u83b7\u53d6\u6b64\u65f6\u95f4\u4e4b\u524d\u7684\u6d88\u606f\n            \n        Returns:\n            List: \u6d88\u606f\u5bf9\u8c61\u5217\u8868\n        \"\"\"\n        if message_type == MessageType.group_chat:\n            if not group_id:\n                raise ValueError(\"\u83b7\u53d6\u7fa4\u804a\u6d88\u606f\u5fc5\u987b\u63d0\u4f9b\u7fa4\u7ec4ID\")\n            repo = self._get_group_repository(group_id)\n            return await repo.get_messages(user_id, limit, before)\n        elif message_type == MessageType.private_chat:\n            return await self.private_repository.get_messages(user_id, limit, before)\n        else:\n            # \u83b7\u53d6\u6240\u6709\u7c7b\u578b\u7684\u6d88\u606f\n            private_messages = await self.private_repository.get_messages(user_id, limit, before)\n            \n            # \u5982\u679c\u6307\u5b9a\u4e86\u7fa4\u7ec4\uff0c\u53ea\u83b7\u53d6\u8be5\u7fa4\u7ec4\u7684\u6d88\u606f\n            if group_id:\n                repo = self._get_group_repository(group_id)\n                group_messages = await repo.get_messages(user_id, limit, before)\n            else:\n                # \u5426\u5219\u83b7\u53d6\u6240\u6709\u7fa4\u7ec4\u7684\u6d88\u606f\n                group_messages = []\n                for repo in self._group_repositories.values():\n                    messages = await repo.get_messages(user_id, limit, before)\n                    group_messages.extend(messages)\n            \n            # \u5408\u5e76\u5e76\u6309\u65f6\u95f4\u6392\u5e8f\n            all_messages = private_messages + group_messages\n            return sorted(all_messages, \n                        key=lambda x: x.created_at, \n                        reverse=True)[:limit]\n\n    async def mark_as_read(self, message_id: str, message_type: MessageType, group_id: Optional[str] = None) -> bool:\n        \"\"\"\u6807\u8bb0\u6d88\u606f\u4e3a\u5df2\u8bfb\n        \n        Args:\n            message_id: \u6d88\u606fID\n            message_type: \u6d88\u606f\u7c7b\u578b\n            group_id: \u7fa4\u7ec4ID\uff08\u7fa4\u804a\u6d88\u606f\u5fc5\u9700\uff09\n            \n        Returns:\n            bool: \u662f\u5426\u6210\u529f\n            \n        Raises:\n            ValueError: \u6d88\u606f\u7c7b\u578b\u65e0\u6548\n        \"\"\"\n        if message_type == MessageType.group_chat:\n            if not group_id:\n                raise ValueError(\"\u6807\u8bb0\u7fa4\u804a\u6d88\u606f\u5fc5\u987b\u63d0\u4f9b\u7fa4\u7ec4ID\")\n            repo = self._get_group_repository(group_id)\n            return await repo.mark_as_read(message_id)\n        elif message_type == MessageType.private_chat:\n            return await self.private_repository.mark_as_read(message_id)\n        else:\n            raise ValueError(f\"\u4e0d\u652f\u6301\u7684\u6d88\u606f\u7c7b\u578b: {message_type}\")\n\n    async def delete_message(self, message_id: str, message_type: MessageType, group_id: Optional[str] = None) -> bool:\n        \"\"\"\u5220\u9664\u6d88\u606f\n        \n        Args:\n            message_id: \u6d88\u606fID\n            message_type: \u6d88\u606f\u7c7b\u578b\n            group_id: \u7fa4\u7ec4ID\uff08\u7fa4\u804a\u6d88\u606f\u5fc5\u9700\uff09\n            \n        Returns:\n            bool: \u662f\u5426\u6210\u529f\n            \n        Raises:\n            ValueError: \u6d88\u606f\u7c7b\u578b\u65e0\u6548\n        \"\"\"\n        if message_type == MessageType.group_chat:\n            if not group_id:\n                raise ValueError(\"\u5220\u9664\u7fa4\u804a\u6d88\u606f\u5fc5\u987b\u63d0\u4f9b\u7fa4\u7ec4ID\")\n            repo = self._get_group_repository(group_id)\n            return await repo.delete_message(message_id)\n        elif message_type == MessageType.private_chat:\n            return await self.private_repository.delete_message(message_id)\n        else:\n            raise ValueError(f\"\u4e0d\u652f\u6301\u7684\u6d88\u606f\u7c7b\u578b: {message_type}\")\n\n    async def update_message_status(self, \n                                  message_id: str, \n                                  status: MessageStatus,\n                                  message_type: MessageType,\n                                  group_id: Optional[str] = None) -> bool:\n        \"\"\"\u66f4\u65b0\u6d88\u606f\u72b6\u6001\n        \n        Args:\n            message_id: \u6d88\u606fID\n            status: \u65b0\u72b6\u6001\n            message_type: \u6d88\u606f\u7c7b\u578b\n            group_id: \u7fa4\u7ec4ID\uff08\u7fa4\u804a\u6d88\u606f\u5fc5\u9700\uff09\n            \n        Returns:\n            bool: \u662f\u5426\u6210\u529f\n            \n        Raises:\n            ValueError: \u6d88\u606f\u7c7b\u578b\u65e0\u6548\n        \"\"\"\n        if message_type == MessageType.group_chat:\n            if not group_id:\n                raise ValueError(\"\u66f4\u65b0\u7fa4\u804a\u6d88\u606f\u72b6\u6001\u5fc5\u987b\u63d0\u4f9b\u7fa4\u7ec4ID\")\n            repo = self._get_group_repository(group_id)\n            return await repo.update_message_status(message_id, status)\n        elif message_type == MessageType.private_chat:\n            return await self.private_repository.update_message_status(message_id, status)\n        else:\n            raise ValueError(f\"\u4e0d\u652f\u6301\u7684\u6d88\u606f\u7c7b\u578b: {message_type}\")\n\n    async def get_unread_count(self, user_id: str, message_type: Optional[MessageType] = None, group_id: Optional[str] = None) -> int:\n        \"\"\"\u83b7\u53d6\u672a\u8bfb\u6d88\u606f\u6570\u91cf\n        \n        Args:\n            user_id: \u7528\u6237ID\n            message_type: \u6d88\u606f\u7c7b\u578b\uff0c\u5982\u679c\u4e3aNone\u5219\u83b7\u53d6\u6240\u6709\u7c7b\u578b\n            group_id: \u7fa4\u7ec4ID\uff08\u83b7\u53d6\u7fa4\u804a\u6d88\u606f\u65f6\u53ef\u9009\uff09\n            \n        Returns:\n            int: \u672a\u8bfb\u6d88\u606f\u6570\u91cf\n        \"\"\"\n        if message_type == MessageType.group_chat:\n            if group_id:\n                # \u83b7\u53d6\u6307\u5b9a\u7fa4\u7ec4\u7684\u672a\u8bfb\u6d88\u606f\u6570\u91cf\n                repo = self._get_group_repository(group_id)\n                return await repo.get_unread_count(user_id)\n            else:\n                # \u83b7\u53d6\u6240\u6709\u7fa4\u7ec4\u7684\u672a\u8bfb\u6d88\u606f\u6570\u91cf\n                total = 0\n                for repo in self._group_repositories.values():\n                    count = await repo.get_unread_count(user_id)\n                    total += count\n                return total\n        elif message_type == MessageType.private_chat:\n            return await self.private_repository.get_unread_count(user_id)\n        else:\n            # \u83b7\u53d6\u6240\u6709\u7c7b\u578b\u7684\u672a\u8bfb\u6d88\u606f\u6570\u91cf\n            private_count = await self.private_repository.get_unread_count(user_id)\n            \n            # \u83b7\u53d6\u6240\u6709\u7fa4\u7ec4\u7684\u672a\u8bfb\u6d88\u606f\u6570\u91cf\n            group_count = 0\n            if group_id:\n                # \u5982\u679c\u6307\u5b9a\u4e86\u7fa4\u7ec4\uff0c\u53ea\u83b7\u53d6\u8be5\u7fa4\u7ec4\u7684\u672a\u8bfb\u6d88\u606f\u6570\u91cf\n                repo = self._get_group_repository(group_id)\n                group_count = await repo.get_unread_count(user_id)\n            else:\n                # \u5426\u5219\u83b7\u53d6\u6240\u6709\u7fa4\u7ec4\u7684\u672a\u8bfb\u6d88\u606f\u6570\u91cf\n                for repo in self._group_repositories.values():\n                    count = await repo.get_unread_count(user_id)\n                    group_count += count\n                    \n            return private_count + group_count\n\n    async def get_chat_history(self, \n                             user1_id: str, \n                             user2_id: str,\n                             limit: int = 50,\n                             before: Optional[datetime] = None) -> List:\n        \"\"\"\u83b7\u53d6\u4e24\u4e2a\u7528\u6237\u4e4b\u95f4\u7684\u804a\u5929\u5386\u53f2\n        \n        \u8fd9\u4e2a\u65b9\u6cd5\u53ea\u5bf9\u79c1\u804a\u6d88\u606f\u6709\u6548\u3002\n        \n        Args:\n            user1_id: \u7528\u62371 ID\n            user2_id: \u7528\u62372 ID\n            limit: \u8fd4\u56de\u6d88\u606f\u6570\u91cf\u9650\u5236\n            before: \u83b7\u53d6\u6b64\u65f6\u95f4\u4e4b\u524d\u7684\u6d88\u606f\n            \n        Returns:\n            List: \u6d88\u606f\u5bf9\u8c61\u5217\u8868\n        \"\"\"\n        return await self.private_repository.get_chat_history(\n            user1_id, user2_id, limit, before\n        )\n\n    async def close(self):\n        \"\"\"\u5173\u95ed\u6570\u636e\u5e93\u4f1a\u8bdd\"\"\"\n        await self._session.close()\n", 276], "D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\db\\base_repository.py": ["\"\"\"\u57fa\u7840\u4ed3\u50a8\u7c7b\"\"\"\nfrom typing import TypeVar, Generic, Type, Optional, List, Dict\nfrom sqlalchemy import select, update, delete\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nimport Lugwit_Module as LM\nlprint = LM.lprint\n\n# \u5b9a\u4e49\u6cdb\u578b\u7c7b\u578b\u53d8\u91cf\nfrom .base import Base\nModelType = TypeVar(\"ModelType\", bound=Base)\n\nclass BaseRepository(Generic[ModelType]):\n    \"\"\"\u57fa\u7840\u4ed3\u50a8\u7c7b\uff0c\u63d0\u4f9b\u57fa\u672c\u7684CRUD\u64cd\u4f5c\n    \n    \u8fd9\u4e2a\u7c7b\u662f\u6240\u6709\u4ed3\u50a8\u7c7b\u7684\u57fa\u7c7b\uff0c\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u529f\u80fd\uff1a\n    1. \u57fa\u672c\u7684CRUD\u64cd\u4f5c\uff08\u521b\u5efa\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u5220\u9664\uff09\n    2. \u5f02\u5e38\u5904\u7406\u548c\u65e5\u5fd7\u8bb0\u5f55\n    3. \u4e8b\u52a1\u7ba1\u7406\n    \n    \u4f7f\u7528\u793a\u4f8b:\n    ```python\n    class UserRepository(BaseRepository[User]):\n        def __init__(self, session: AsyncSession):\n            super().__init__(User, session)\n            \n        async def get_by_username(self, username: str) -> Optional[User]:\n            query = select(self.model).where(self.model.username == username)\n            result = await self._session.execute(query)\n            return result.scalar_one_or_none()\n    ```\n    \"\"\"\n    def __init__(self, model: Type[ModelType], session: AsyncSession):\n        \"\"\"\u521d\u59cb\u5316\u57fa\u7840\u4ed3\u50a8\n        \n        Args:\n            model: \u6a21\u578b\u7c7b\u578b\n            session: \u6570\u636e\u5e93\u4f1a\u8bdd\n        \"\"\"\n        self.model = model\n        self._session = session\n\n    @property\n    def session(self) -> AsyncSession:\n        \"\"\"\u83b7\u53d6\u6570\u636e\u5e93\u4f1a\u8bdd\n        \n        Returns:\n            \u6570\u636e\u5e93\u4f1a\u8bdd\n        \"\"\"\n        return self._session\n\n    async def get_by_id(self, id: int) -> Optional[ModelType]:\n        \"\"\"\u6839\u636eID\u83b7\u53d6\u5b9e\u4f53\n        \n        Args:\n            id: \u5b9e\u4f53ID\n            \n        Returns:\n            \u627e\u5230\u7684\u5b9e\u4f53\u6216None\n        \"\"\"\n        try:\n            query = select(self.model).where(self.model.id == id)\n            result = await self._session.execute(query)\n            return result.scalar_one_or_none()\n        except Exception as e:\n            lprint(f\"\u83b7\u53d6\u5b9e\u4f53\u5931\u8d25: {str(e)}\")\n            return None\n\n    async def get_all(self) -> List[ModelType]:\n        \"\"\"\u83b7\u53d6\u6240\u6709\u5b9e\u4f53\n        \n        Returns:\n            \u5b9e\u4f53\u5217\u8868\n        \"\"\"\n        try:\n            query = select(self.model)\n            result = await self._session.execute(query)\n            return result.scalars().all()\n        except Exception as e:\n            lprint(f\"\u83b7\u53d6\u6240\u6709\u5b9e\u4f53\u5931\u8d25: {str(e)}\")\n            return []\n\n    async def create(self, entity: ModelType) -> Optional[ModelType]:\n        \"\"\"\u521b\u5efa\u5b9e\u4f53\n        \n        Args:\n            entity: \u8981\u521b\u5efa\u7684\u5b9e\u4f53\n            \n        Returns:\n            \u521b\u5efa\u7684\u5b9e\u4f53\n            \n        Raises:\n            Exception: \u521b\u5efa\u5931\u8d25\u65f6\u629b\u51fa\n        \"\"\"\n        try:\n            self._session.add(entity)\n            await self._session.commit()\n            await self._session.refresh(entity)\n            return entity\n        except Exception as e:\n            await self._session.rollback()\n            lprint(f\"\u521b\u5efa\u5b9e\u4f53\u5931\u8d25: {str(e)}\")\n            raise\n\n    async def update(self, entity: ModelType, update_data: Dict[str, any] = None) -> Optional[ModelType]:\n        \"\"\"\u66f4\u65b0\u5b9e\u4f53\n        \n        Args:\n            entity: \u8981\u66f4\u65b0\u7684\u5b9e\u4f53\n            update_data: \u8981\u66f4\u65b0\u7684\u6570\u636e\n            \n        Returns:\n            \u66f4\u65b0\u540e\u7684\u5b9e\u4f53\n            \n        Raises:\n            Exception: \u66f4\u65b0\u5931\u8d25\u65f6\u629b\u51fa\n        \"\"\"\n        try:\n            if update_data:\n                for key, value in update_data.items():\n                    setattr(entity, key, value)\n            await self._session.merge(entity)\n            await self._session.flush()\n            await self._session.refresh(entity)\n            return entity\n        except Exception as e:\n            lprint(f\"\u66f4\u65b0\u5b9e\u4f53\u5931\u8d25: {str(e)}\")\n            raise\n\n    async def delete(self, id: int) -> bool:\n        \"\"\"\u5220\u9664\u5b9e\u4f53\n        \n        Args:\n            id: \u8981\u5220\u9664\u7684\u5b9e\u4f53ID\n            \n        Returns:\n            \u662f\u5426\u5220\u9664\u6210\u529f\n            \n        Raises:\n            Exception: \u5220\u9664\u5931\u8d25\u65f6\u629b\u51fa\n        \"\"\"\n        try:\n            query = delete(self.model).where(self.model.id == id)\n            result = await self._session.execute(query)\n            return result.rowcount > 0\n        except Exception as e:\n            lprint(f\"\u5220\u9664\u5b9e\u4f53\u5931\u8d25: {str(e)}\")\n            raise\n\n    async def exists(self, id: int) -> bool:\n        \"\"\"\u68c0\u67e5\u5b9e\u4f53\u662f\u5426\u5b58\u5728\n        \n        Args:\n            id: \u8981\u68c0\u67e5\u7684\u5b9e\u4f53ID\n            \n        Returns:\n            \u5b9e\u4f53\u662f\u5426\u5b58\u5728\n        \"\"\"\n        try:\n            query = select(self.model).where(self.model.id == id)\n            result = await self._session.execute(query)\n            return result.scalar_one_or_none() is not None\n        except Exception as e:\n            lprint(f\"\u68c0\u67e5\u5b9e\u4f53\u5b58\u5728\u5931\u8d25: {str(e)}\")\n            return False\n\n    async def update_by_id(self, id: int, **kwargs) -> Optional[ModelType]:\n        \"\"\"\u6839\u636eID\u66f4\u65b0\u5b9e\u4f53\u7684\u6307\u5b9a\u5b57\u6bb5\n        \n        Args:\n            id: \u5b9e\u4f53ID\n            **kwargs: \u8981\u66f4\u65b0\u7684\u5b57\u6bb5\u548c\u503c\n            \n        Returns:\n            \u66f4\u65b0\u540e\u7684\u5b9e\u4f53\u6216None\n            \n        Raises:\n            Exception: \u66f4\u65b0\u5931\u8d25\u65f6\u629b\u51fa\n        \"\"\"\n        try:\n            query = update(self.model).where(self.model.id == id).values(**kwargs)\n            await self._session.execute(query)\n            return await self.get_by_id(id)\n        except Exception as e:\n            lprint(f\"\u66f4\u65b0\u5b9e\u4f53\u5b57\u6bb5\u5931\u8d25: {str(e)}\")\n            raise\n\n    async def delete_by_filter(self, *criterion) -> int:\n        \"\"\"\u6839\u636e\u6761\u4ef6\u5220\u9664\u5b9e\u4f53\n        \n        Args:\n            *criterion: SQLAlchemy\u8fc7\u6ee4\u6761\u4ef6\n            \n        Returns:\n            \u5220\u9664\u7684\u884c\u6570\n            \n        Raises:\n            Exception: \u5220\u9664\u5931\u8d25\u65f6\u629b\u51fa\n        \"\"\"\n        try:\n            query = delete(self.model).where(*criterion)\n            result = await self._session.execute(query)\n            return result.rowcount\n        except Exception as e:\n            lprint(f\"\u6761\u4ef6\u5220\u9664\u5b9e\u4f53\u5931\u8d25: {str(e)}\")\n            raise\n", 206], "D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\group\\repository.py": ["\"\"\"\u7fa4\u7ec4\u4ed3\u50a8\"\"\"\n# \u6807\u51c6\u5e93\nfrom datetime import datetime\nfrom typing import List, Optional, Dict, Any, Sequence\nfrom zoneinfo import ZoneInfo\nimport traceback\n\n# \u7b2c\u4e09\u65b9\u5e93\nfrom sqlalchemy import select, and_, or_, func\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\n# \u672c\u5730\u6a21\u5757\nfrom app.db.base_repository import BaseRepository\nfrom app.domain.group.models import Group, GroupMember\nfrom app.domain.group.enums import GroupStatus, GroupMemberRole\nfrom Lugwit_Module import lprint\n\nclass GroupRepository(BaseRepository[Group]):\n    \"\"\"\u7fa4\u7ec4\u4ed3\u50a8\u7c7b\n    \n    \u63d0\u4f9b\u7fa4\u7ec4\u76f8\u5173\u7684\u6570\u636e\u5e93\u64cd\u4f5c\uff0c\u5305\u62ec\uff1a\n    1. \u57fa\u672c\u7684CRUD\u64cd\u4f5c\uff08\u7ee7\u627f\u81eaBaseRepository\uff09\n    2. \u7fa4\u7ec4\u67e5\u8be2\uff08\u6309\u540d\u79f0\u3001\u72b6\u6001\u7b49\uff09\n    3. \u7fa4\u7ec4\u7edf\u8ba1\n    4. \u6210\u5458\u7ba1\u7406\n    \"\"\"\n    \n    def __init__(self, session: AsyncSession):\n        \"\"\"\u521d\u59cb\u5316\u7fa4\u7ec4\u4ed3\u50a8\n        \n        Args:\n            session: \u6570\u636e\u5e93\u4f1a\u8bdd\n        \"\"\"\n        super().__init__(Group, session)\n\n    async def create_group(\n        self,\n        name: str,\n        owner_id: int,\n        description: Optional[str] = None,\n        avatar_url: Optional[str] = None,\n        max_members: int = 200\n    ) -> Group:\n        \"\"\"\u521b\u5efa\u7fa4\u7ec4\n        \n        Args:\n            name: \u7fa4\u7ec4\u540d\u79f0\n            owner_id: \u521b\u5efa\u8005ID\n            description: \u7fa4\u7ec4\u63cf\u8ff0\n            avatar_url: \u7fa4\u7ec4\u5934\u50cfURL\n            max_members: \u6700\u5927\u6210\u5458\u6570\n            \n        Returns:\n            \u521b\u5efa\u7684\u7fa4\u7ec4\n            \n        Raises:\n            Exception: \u521b\u5efa\u5931\u8d25\u65f6\u629b\u51fa\n        \"\"\"\n        try:\n            group = Group(\n                name=name,\n                owner_id=owner_id,\n                description=description,\n                avatar_url=avatar_url,\n                max_members=max_members,\n                status=GroupStatus.active,\n                created_at=datetime.utcnow(),\n                updated_at=datetime.utcnow()\n            )\n            return await self.create(group)\n        except Exception as e:\n            lprint(f\"\u521b\u5efa\u7fa4\u7ec4\u5931\u8d25: {traceback.format_exc()}\")\n            raise\n\n    async def get_by_name(self, name: str) -> Optional[Group]:\n        \"\"\"\u6839\u636e\u540d\u79f0\u83b7\u53d6\u7fa4\u7ec4\n        \n        Args:\n            name: \u7fa4\u7ec4\u540d\u79f0\n            \n        Returns:\n            \u627e\u5230\u7684\u7fa4\u7ec4\u6216None\n        \"\"\"\n        try:\n            query = select(self.model).where(self.model.name == name)\n            result = await self.session.execute(query)\n            return result.scalar_one_or_none()\n        except Exception as e:\n            lprint(f\"\u6839\u636e\u540d\u79f0\u83b7\u53d6\u7fa4\u7ec4\u5931\u8d25: {traceback.format_exc()}\")\n            return None\n\n    async def get_user_groups(\n        self,\n        user_id: int,\n        status: Optional[GroupStatus] = None\n    ) -> Sequence[Group]:\n        \"\"\"\u83b7\u53d6\u7528\u6237\u7684\u7fa4\u7ec4\n        \n        Args:\n            user_id: \u7528\u6237ID\n            status: \u7fa4\u7ec4\u72b6\u6001\uff08\u53ef\u9009\uff09\n            \n        Returns:\n            \u7fa4\u7ec4\u5217\u8868\n        \"\"\"\n        try:\n            conditions = []\n            if status:\n                conditions.append(self.model.status == status)\n\n            query = (\n                select(self.model)\n                .join(GroupMember)\n                .where(\n                    and_(\n                        GroupMember.user_id == user_id,\n                        *conditions\n                    )\n                )\n            )\n            result = await self.session.execute(query)\n            return result.scalars().all()\n        except Exception as e:\n            lprint(f\"\u83b7\u53d6\u7528\u6237\u7fa4\u7ec4\u5931\u8d25: {traceback.format_exc()}\")\n            return []\n\n    async def search_groups(\n        self,\n        keyword: str,\n        limit: int = 20\n    ) -> Sequence[Group]:\n        \"\"\"\u641c\u7d22\u7fa4\u7ec4\n        \n        Args:\n            keyword: \u641c\u7d22\u5173\u952e\u8bcd\n            limit: \u9650\u5236\u6570\u91cf\n            \n        Returns:\n            \u5339\u914d\u7684\u7fa4\u7ec4\u5217\u8868\n        \"\"\"\n        try:\n            query = (\n                select(self.model)\n                .where(\n                    and_(\n                        self.model.status == GroupStatus.active,\n                        or_(\n                            self.model.name.ilike(f\"%{keyword}%\"),\n                            self.model.description.ilike(f\"%{keyword}%\")\n                        )\n                    )\n                )\n                .limit(limit)\n            )\n            result = await self.session.execute(query)\n            return result.scalars().all()\n        except Exception as e:\n            lprint(f\"\u641c\u7d22\u7fa4\u7ec4\u5931\u8d25: {traceback.format_exc()}\")\n            return []\n\n    async def get_member_count(self, group_id: int) -> int:\n        \"\"\"\u83b7\u53d6\u7fa4\u7ec4\u6210\u5458\u6570\u91cf\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            \n        Returns:\n            \u6210\u5458\u6570\u91cf\n        \"\"\"\n        try:\n            query = (\n                select(func.count())\n                .select_from(GroupMember)\n                .where(GroupMember.group_id == group_id)\n            )\n            result = await self.session.execute(query)\n            return result.scalar() or 0\n        except Exception as e:\n            lprint(f\"\u83b7\u53d6\u7fa4\u7ec4\u6210\u5458\u6570\u91cf\u5931\u8d25: {traceback.format_exc()}\")\n            return 0\n\n    async def update_status(\n        self,\n        group_id: int,\n        status: GroupStatus\n    ) -> bool:\n        \"\"\"\u66f4\u65b0\u7fa4\u7ec4\u72b6\u6001\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            status: \u65b0\u72b6\u6001\n            \n        Returns:\n            \u662f\u5426\u6210\u529f\n        \"\"\"\n        try:\n            return await self.update_by_id(group_id, status=status) is not None\n        except Exception as e:\n            lprint(f\"\u66f4\u65b0\u7fa4\u7ec4\u72b6\u6001\u5931\u8d25: {traceback.format_exc()}\")\n            return False\n\n    async def get_group_stats(self, group_id: int) -> Dict[str, Any]:\n        \"\"\"\u83b7\u53d6\u7fa4\u7ec4\u7edf\u8ba1\u4fe1\u606f\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            \n        Returns:\n            \u7edf\u8ba1\u4fe1\u606f\u5b57\u5178\n        \"\"\"\n        try:\n            # \u83b7\u53d6\u6210\u5458\u6570\u91cf\n            member_count = await self.get_member_count(group_id)\n            \n            # \u83b7\u53d6\u4eca\u65e5\u6d88\u606f\u6570\n            today = datetime.utcnow().date()\n            message_query = (\n                select(func.count())\n                .select_from(self.model)\n                .where(\n                    and_(\n                        self.model.group_id == group_id,\n                        func.date(self.model.created_at) == today\n                    )\n                )\n            )\n            message_count = await self.session.execute(message_query)\n            \n            return {\n                \"member_count\": member_count,\n                \"today_message_count\": message_count.scalar() or 0,\n                \"created_at\": (await self.get_by_id(group_id)).created_at\n            }\n        except Exception as e:\n            lprint(f\"\u83b7\u53d6\u7fa4\u7ec4\u7edf\u8ba1\u4fe1\u606f\u5931\u8d25: {traceback.format_exc()}\")\n            return {\n                \"member_count\": 0,\n                \"today_message_count\": 0,\n                \"created_at\": None\n            }\n\nclass GroupMemberRepository(BaseRepository[GroupMember]):\n    \"\"\"\u7fa4\u7ec4\u6210\u5458\u4ed3\u50a8\"\"\"\n    def __init__(self, session: AsyncSession):\n        \"\"\"\u521d\u59cb\u5316\u7fa4\u7ec4\u6210\u5458\u4ed3\u50a8\n        \n        Args:\n            session: \u6570\u636e\u5e93\u4f1a\u8bdd\n        \"\"\"\n        super().__init__(GroupMember, session)\n\n    async def get_group_members(self, group_id: int) -> Sequence[GroupMember]:\n        \"\"\"\u83b7\u53d6\u7fa4\u7ec4\u6210\u5458\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            \n        Returns:\n            \u6210\u5458\u5217\u8868\n        \"\"\"\n        try:\n            query = select(self.model).where(self.model.group_id == group_id)\n            result = await self.session.execute(query)\n            return result.scalars().all()\n        except Exception as e:\n            lprint(f\"\u83b7\u53d6\u7fa4\u7ec4\u6210\u5458\u5931\u8d25: {traceback.format_exc()}\")\n            return []\n\n    async def is_member(self, group_id: int, user_id: int) -> bool:\n        \"\"\"\u68c0\u67e5\u7528\u6237\u662f\u5426\u662f\u7fa4\u7ec4\u6210\u5458\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            user_id: \u7528\u6237ID\n            \n        Returns:\n            \u662f\u5426\u662f\u6210\u5458\n        \"\"\"\n        try:\n            query = select(GroupMember).where(\n                and_(\n                    GroupMember.group_id == group_id,\n                    GroupMember.user_id == user_id\n                )\n            )\n            result = await self.session.execute(query)\n            return result.scalar_one_or_none() is not None\n        except Exception as e:\n            lprint(f\"\u68c0\u67e5\u7fa4\u7ec4\u6210\u5458\u5931\u8d25: {traceback.format_exc()}\")\n            return False\n\n    async def add_member(self, group_id: int, user_id: int, role: GroupMemberRole = GroupMemberRole.MEMBER) -> GroupMember:\n        \"\"\"\u6dfb\u52a0\u7fa4\u7ec4\u6210\u5458\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            user_id: \u7528\u6237ID\n            role: \u6210\u5458\u89d2\u8272\uff0c\u9ed8\u8ba4\u4e3a\u666e\u901a\u6210\u5458\n            \n        Returns:\n            \u6dfb\u52a0\u7684\u6210\u5458\n        \"\"\"\n        try:\n            member = GroupMember(\n                group_id=group_id,\n                user_id=user_id,\n                role=role\n            )\n            self.session.add(member)\n            await self.session.flush()\n            return member\n        except Exception as e:\n            lprint(f\"\u6dfb\u52a0\u7fa4\u7ec4\u6210\u5458\u5931\u8d25: {traceback.format_exc()}\")\n            await self.session.rollback()\n            raise\n\n    async def remove_member(self, group_id: int, user_id: int) -> bool:\n        \"\"\"\u79fb\u9664\u7fa4\u7ec4\u6210\u5458\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            user_id: \u7528\u6237ID\n            \n        Returns:\n            \u662f\u5426\u6210\u529f\n        \"\"\"\n        try:\n            query = select(self.model).where(\n                and_(\n                    self.model.group_id == group_id,\n                    self.model.user_id == user_id\n                )\n            )\n            result = await self.session.execute(query)\n            member = result.scalar_one_or_none()\n            if member:\n                await self.session.delete(member)\n                await self.session.commit()\n                return True\n            return False\n        except Exception as e:\n            lprint(f\"\u79fb\u9664\u7fa4\u7ec4\u6210\u5458\u5931\u8d25: {traceback.format_exc()}\")\n            return False\n", 343], "D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\user\\repository.py": ["\"\"\"\u7528\u6237\u4ed3\u50a8\"\"\"\n# \u6807\u51c6\u5e93\nimport traceback\nfrom datetime import datetime\nfrom typing import List, Optional, Dict, Any, Sequence\nfrom zoneinfo import ZoneInfo\n\n# \u7b2c\u4e09\u65b9\u5e93\nfrom sqlalchemy import select, and_, update, delete, text, or_\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.orm import selectinload\n\n# \u672c\u5730\u6a21\u5757\nimport sys\nsys.path.append(r'D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib')\nimport Lugwit_Module as LM\nlprint = LM.lprint\n\nfrom app.db.database import AsyncSessionLocal\nfrom app.db.base_repository import BaseRepository\nfrom app.domain.user.models import User\nfrom app.domain.user.enums import UserRole, UserStatusEnum\n\nclass UserRepository(BaseRepository[User]):\n    \"\"\"\u7528\u6237\u4ed3\u50a8\n    \n    \u4e3b\u8981\u529f\u80fd\uff1a\n    1. \u7528\u6237\u57fa\u672c\u4fe1\u606f\u7684CRUD\u64cd\u4f5c\n    2. \u7528\u6237\u72b6\u6001\u7ba1\u7406\n    3. \u7528\u6237\u67e5\u8be2\n    4. \u89d2\u8272\u7ba1\u7406\n    \"\"\"\n    \n    def __init__(self, session: AsyncSession = None):\n        \"\"\"\u521d\u59cb\u5316\u7528\u6237\u4ed3\u50a8\n        \n        Args:\n            session: \u6570\u636e\u5e93\u4f1a\u8bdd\n        \"\"\"\n        super().__init__(User, session)\n        self._session = session\n\n    @property\n    def session(self) -> AsyncSession:\n        \"\"\"\u83b7\u53d6\u6570\u636e\u5e93\u4f1a\u8bdd\"\"\"\n        return self._session\n\n    @session.setter\n    def session(self, value: AsyncSession):\n        \"\"\"\u8bbe\u7f6e\u6570\u636e\u5e93\u4f1a\u8bdd\"\"\"\n        self._session = value\n\n    async def get_by_username(self, username: str, session: Optional[AsyncSession] = None) -> Optional[User]:\n        \"\"\"\u6839\u636e\u7528\u6237\u540d\u83b7\u53d6\u7528\u6237\n        \n        Args:\n            username: \u7528\u6237\u540d\n            session: \u53ef\u9009\u7684\u6570\u636e\u5e93\u4f1a\u8bdd\n            \n        Returns:\n            \u627e\u5230\u7684\u7528\u6237\u6216None\n        \"\"\"\n        try:\n            if session:\n                self.session = session\n                \n            lprint(f\"[\u6570\u636e\u5e93\u67e5\u8be2] \u5f00\u59cb\u67e5\u8be2\u7528\u6237\u540d: {username}\")\n            query = select(User).where(User.username == username)\n            result = await self.session.execute(query)\n            user = result.scalar_one_or_none()\n            \n            if user is None:\n                lprint(f\"[\u6570\u636e\u5e93\u67e5\u8be2] \u672a\u627e\u5230\u7528\u6237\u540d {username}\")\n            else:\n                lprint(f\"[\u6570\u636e\u5e93\u67e5\u8be2] \u627e\u5230\u7528\u6237\u540d {username}\")\n                \n            return user\n        except Exception as e:\n            lprint(f\"[\u6570\u636e\u5e93\u67e5\u8be2] \u67e5\u8be2\u7528\u6237\u540d {username} \u5931\u8d25: {traceback.format_exc()}\")\n            return None\n\n    async def create_user(self, \n                       username: str, \n                       email: str = None, \n                       password: str = None,\n                       nickname: str = None,\n                       role: str = None,\n                       avatar_index: int = 0,\n                       extra_data: Dict[str, Any] = None,\n                       session: Optional[AsyncSession] = None) -> Optional[User]:\n        \"\"\"\u521b\u5efa\u7528\u6237\n        \n        Args:\n            username: \u7528\u6237\u540d\n            email: \u90ae\u7bb1\n            password: \u5bc6\u7801\n            nickname: \u6635\u79f0\n            role: \u89d2\u8272\n            avatar_index: \u5934\u50cf\u7d22\u5f15\n            extra_data: \u989d\u5916\u6570\u636e\n            session: \u53ef\u9009\u7684\u6570\u636e\u5e93\u4f1a\u8bdd\n            \n        Returns:\n            \u521b\u5efa\u7684\u7528\u6237\u6216None\n            \n        Raises:\n            ValueError: \u7528\u6237\u540d\u5df2\u5b58\u5728\n        \"\"\"\n        try:\n            if session:\n                self.session = session\n                \n            # \u68c0\u67e5\u7528\u6237\u540d\u662f\u5426\u5df2\u5b58\u5728\n            existing_user = await self.get_by_username(username)\n            if existing_user:\n                raise ValueError(f\"\u7528\u6237\u540d {username} \u5df2\u5b58\u5728\")\n            \n            # \u521b\u5efa\u7528\u6237\u5b9e\u4f8b\n            user = User(\n                username=username,\n                email=email,\n                hashed_password=password,  # \u6ce8\u610f\uff1a\u8fd9\u91cc\u5df2\u7ecf\u5728 service \u5c42\u8fdb\u884c\u4e86\u54c8\u5e0c\u5904\u7406\n                nickname=nickname,\n                role=role,\n                avatar_index=avatar_index,\n                extra_data=extra_data\n            )\n            \n            # \u4f7f\u7528\u7236\u7c7b\u7684 create \u65b9\u6cd5\u521b\u5efa\u7528\u6237\n            return await super().create(user)\n        except Exception as e:\n            lprint(f\"[\u7528\u6237\u521b\u5efa] \u521b\u5efa\u7528\u6237 {username} \u5931\u8d25: {traceback.format_exc()}\")\n            raise\n\n    async def get_by_email(self, email: str) -> Optional[User]:\n        \"\"\"\u6839\u636e\u90ae\u7bb1\u83b7\u53d6\u7528\u6237\n        \n        Args:\n            email: \u90ae\u7bb1\u5730\u5740\n            \n        Returns:\n            \u627e\u5230\u7684\u7528\u6237\u6216None\n            \n        Raises:\n            Exception: \u6570\u636e\u5e93\u64cd\u4f5c\u5931\u8d25\n        \"\"\"\n        try:\n            lprint(f\"[\u6570\u636e\u5e93\u67e5\u8be2] \u5f00\u59cb\u67e5\u8be2\u90ae\u7bb1: {email}\")\n            query = select(self.model).where(self.model.email == email)\n            result = await self.session.execute(query)\n            user = result.scalar_one_or_none()\n            if not user:\n                lprint(f\"[\u6570\u636e\u5e93\u67e5\u8be2] \u90ae\u7bb1 {email} \u4e0d\u5b58\u5728\")\n            else:\n                lprint(f\"[\u6570\u636e\u5e93\u67e5\u8be2] \u627e\u5230\u90ae\u7bb1 {email}\")\n            return user\n        except Exception as e:\n            lprint(f\"[\u6570\u636e\u5e93\u67e5\u8be2] \u5f02\u5e38: {str(e)}\\n{traceback.format_exc()}\")\n            raise\n\n    async def get_online_users(self) -> Sequence[User]:\n        \"\"\"\u83b7\u53d6\u5728\u7ebf\u7528\u6237\n        \n        Returns:\n            \u5728\u7ebf\u7528\u6237\u5217\u8868\n            \n        Raises:\n            Exception: \u6570\u636e\u5e93\u64cd\u4f5c\u5931\u8d25\n        \"\"\"\n        try:\n            query = select(self.model).where(\n                and_(\n                    self.model.login_status == True,\n                    self.model.status == UserStatusEnum.normal\n                )\n            )\n            result = await self.session.execute(query)\n            users = result.scalars().all()\n            lprint(f\"\u83b7\u53d6\u5230 {len(users)} \u4e2a\u5728\u7ebf\u7528\u6237\")\n            return users\n        except Exception as e:\n            lprint(f\"\u83b7\u53d6\u5728\u7ebf\u7528\u6237\u5931\u8d25: {traceback.format_exc()}\")\n            raise\n\n    async def get_users_by_status(self, status: UserStatusEnum) -> Sequence[User]:\n        \"\"\"\u6839\u636e\u72b6\u6001\u83b7\u53d6\u7528\u6237\n        \n        Args:\n            status: \u7528\u6237\u72b6\u6001\n            \n        Returns:\n            \u6307\u5b9a\u72b6\u6001\u7684\u7528\u6237\u5217\u8868\n            \n        Raises:\n            Exception: \u6570\u636e\u5e93\u64cd\u4f5c\u5931\u8d25\n        \"\"\"\n        try:\n            query = select(self.model).where(self.model.status == status)\n            result = await self.session.execute(query)\n            users = result.scalars().all()\n            lprint(f\"\u83b7\u53d6\u5230 {len(users)} \u4e2a\u72b6\u6001\u4e3a {status} \u7684\u7528\u6237\")\n            return users\n        except Exception as e:\n            lprint(f\"\u6839\u636e\u72b6\u6001\u83b7\u53d6\u7528\u6237\u5931\u8d25: {traceback.format_exc()}\")\n            raise\n\n    async def get_users_by_role(self, role: UserRole) -> Sequence[User]:\n        \"\"\"\u6839\u636e\u89d2\u8272\u83b7\u53d6\u7528\u6237\n        \n        Args:\n            role: \u7528\u6237\u89d2\u8272\n            \n        Returns:\n            \u6307\u5b9a\u89d2\u8272\u7684\u7528\u6237\u5217\u8868\n            \n        Raises:\n            Exception: \u6570\u636e\u5e93\u64cd\u4f5c\u5931\u8d25\n        \"\"\"\n        try:\n            query = select(self.model).where(self.model.role == role)\n            result = await self.session.execute(query)\n            users = result.scalars().all()\n            lprint(f\"\u83b7\u53d6\u5230 {len(users)} \u4e2a\u89d2\u8272\u4e3a {role} \u7684\u7528\u6237\")\n            return users\n        except Exception as e:\n            lprint(f\"\u6839\u636e\u89d2\u8272\u83b7\u53d6\u7528\u6237\u5931\u8d25: {traceback.format_exc()}\")\n            raise\n\n    async def get_registered_users(self, session: Optional[AsyncSession] = None) -> Sequence[User]:\n        \"\"\"\u83b7\u53d6\u6240\u6709\u6ce8\u518c\u7528\u6237\n        \n        Args:\n            session: \u53ef\u9009\u7684\u6570\u636e\u5e93\u4f1a\u8bdd\n            \n        Returns:\n            Sequence[User]: \u6240\u6709\u6ce8\u518c\u7528\u6237\u5217\u8868\n        \"\"\"\n        try:\n            lprint(\"[\u6570\u636e\u5e93\u67e5\u8be2] \u5f00\u59cb\u83b7\u53d6\u6240\u6709\u6ce8\u518c\u7528\u6237\")\n            stmt = (\n                select(User)\n                .where(User.status == UserStatusEnum.normal)  # \u53ea\u83b7\u53d6\u6b63\u5e38\u72b6\u6001\u7684\u7528\u6237\n                .options(\n                    selectinload(User.devices),  # \u9884\u52a0\u8f7d\u8bbe\u5907\u4fe1\u606f\n                    selectinload(User.sent_messages),  # \u9884\u52a0\u8f7d\u53d1\u9001\u7684\u6d88\u606f\n                    selectinload(User.received_messages)  # \u9884\u52a0\u8f7d\u63a5\u6536\u7684\u6d88\u606f\n                )\n            )\n            \n            # \u4f7f\u7528\u63d0\u4f9b\u7684\u4f1a\u8bdd\u6216\u4ed3\u50a8\u81ea\u8eab\u7684\u4f1a\u8bdd\n            session_to_use = session or self.session\n            if not session_to_use:\n                raise Exception(\"\u6570\u636e\u5e93\u4f1a\u8bdd\u672a\u521d\u59cb\u5316\")\n                \n            result = await session_to_use.execute(stmt)\n            users = result.scalars().all()\n            lprint(f\"[\u6570\u636e\u5e93\u67e5\u8be2] \u6210\u529f\u83b7\u53d6\u6240\u6709\u6ce8\u518c\u7528\u6237\uff0c\u5171 {len(users)} \u4e2a\")\n            return users\n        except Exception as e:\n            lprint(f\"[\u6570\u636e\u5e93\u67e5\u8be2] \u83b7\u53d6\u6ce8\u518c\u7528\u6237\u5931\u8d25: {str(e)}\")\n            lprint(traceback.format_exc())\n            raise Exception(f\"\u83b7\u53d6\u6ce8\u518c\u7528\u6237\u5931\u8d25: {str(e)}\")\n\n    async def update_online_status(self, username: str, login_status: bool) -> bool:\n        \"\"\"\u66f4\u65b0\u7528\u6237\u5728\u7ebf\u72b6\u6001\n        \n        Args:\n            username: \u7528\u6237\u540d\n            login_status: \u662f\u5426\u5728\u7ebf\n            \n        Returns:\n            \u66f4\u65b0\u662f\u5426\u6210\u529f\n            \n        Raises:\n            Exception: \u6570\u636e\u5e93\u64cd\u4f5c\u5931\u8d25\n        \"\"\"\n        try:\n            await self.session.execute(\n                update(self.model)\n                .where(self.model.username == username)\n                .values(login_status=login_status)\n            )\n            await self.session.commit()\n            lprint(f\"\u66f4\u65b0\u7528\u6237 {username} \u5728\u7ebf\u72b6\u6001\u4e3a {login_status} \u6210\u529f\")\n            return True\n        except Exception as e:\n            await self.session.rollback()\n            lprint(f\"\u66f4\u65b0\u7528\u6237\u5728\u7ebf\u72b6\u6001\u5931\u8d25: {traceback.format_exc()}\")\n            raise\n\n    async def update_status(self, username: str, status: UserStatusEnum) -> bool:\n        \"\"\"\u66f4\u65b0\u7528\u6237\u72b6\u6001\n        \n        Args:\n            username: \u7528\u6237\u540d\n            status: \u65b0\u72b6\u6001\n            \n        Returns:\n            \u66f4\u65b0\u662f\u5426\u6210\u529f\n            \n        Raises:\n            Exception: \u6570\u636e\u5e93\u64cd\u4f5c\u5931\u8d25\n        \"\"\"\n        try:\n            await self.session.execute(\n                update(self.model)\n                .where(self.model.username == username)\n                .values(status=status)\n            )\n            await self.session.commit()\n            lprint(f\"\u66f4\u65b0\u7528\u6237 {username} \u72b6\u6001\u4e3a {status} \u6210\u529f\")\n            return True\n        except Exception as e:\n            await self.session.rollback()\n            lprint(f\"\u66f4\u65b0\u7528\u6237\u72b6\u6001\u5931\u8d25: {traceback.format_exc()}\")\n            raise\n\n    async def search_users(self, query: str) -> Sequence[User]:\n        \"\"\"\u641c\u7d22\u7528\u6237\n        \n        \u6839\u636e\u7528\u6237\u540d\u3001\u6635\u79f0\u6216\u90ae\u7bb1\u641c\u7d22\u7528\u6237\n        \n        Args:\n            query: \u641c\u7d22\u5173\u952e\u8bcd\n            \n        Returns:\n            \u5339\u914d\u7684\u7528\u6237\u5217\u8868\n            \n        Raises:\n            Exception: \u6570\u636e\u5e93\u64cd\u4f5c\u5931\u8d25\n        \"\"\"\n        try:\n            stmt = select(self.model).where(\n                and_(\n                    self.model.status != UserStatusEnum.deleted,\n                    or_(\n                        self.model.username.ilike(f\"%{query}%\"),\n                        self.model.nickname.ilike(f\"%{query}%\"),\n                        self.model.email.ilike(f\"%{query}%\")\n                    )\n                )\n            )\n            result = await self.session.execute(stmt)\n            users = result.scalars().all()\n            lprint(f\"\u641c\u7d22\u5230 {len(users)} \u4e2a\u5339\u914d\u7684\u7528\u6237\")\n            return users\n        except Exception as e:\n            lprint(f\"\u641c\u7d22\u7528\u6237\u5931\u8d25: {traceback.format_exc()}\")\n            raise\n", 349], "D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\user\\service.py": ["\"\"\"\u7528\u6237\u670d\u52a1\"\"\"\nfrom typing import Optional, List, Dict, Any, Sequence\nfrom datetime import datetime\nfrom zoneinfo import ZoneInfo\nimport traceback\n\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nfrom app.domain.user.repository import UserRepository\nfrom app.domain.user.models import User\nfrom app.domain.user.enums import UserRole, UserStatusEnum\nfrom app.utils.security import get_password_hash\nimport Lugwit_Module as LM\nlprint = LM.lprint\n\nclass UserService:\n    \"\"\"\u7528\u6237\u670d\u52a1\"\"\"\n\n    def __init__(self, repository: UserRepository):\n        self.repository = repository\n\n    async def get_by_username(self, username: str, session: Optional[AsyncSession] = None) -> Optional[User]:\n        \"\"\"\u901a\u8fc7\u7528\u6237\u540d\u83b7\u53d6\u7528\u6237\"\"\"\n        return await self.repository.get_by_username(username, session)\n\n    async def get_registered_users(self, session: Optional[AsyncSession] = None) -> Sequence[User]:\n        \"\"\"\u83b7\u53d6\u6240\u6709\u6ce8\u518c\u7528\u6237\n        \n        Args:\n            session: \u53ef\u9009\u7684\u6570\u636e\u5e93\u4f1a\u8bdd\n            \n        Returns:\n            Sequence[User]: \u6240\u6709\u6ce8\u518c\u7528\u6237\u5217\u8868\n        \"\"\"\n        return await self.repository.get_registered_users(session)\n\n    async def create_user(self, \n                       username: str, \n                       email: str = None, \n                       password: str = None,\n                       nickname: str = None,\n                       role: str = None,\n                       avatar_index: int = 0,\n                       extra_data: Dict[str, Any] = None,\n                       session: Optional[AsyncSession] = None,\n                       **kwargs) -> User:\n        \"\"\"\u521b\u5efa\u7528\u6237\n        \n        Args:\n            username: \u7528\u6237\u540d\n            email: \u90ae\u7bb1\uff08\u53ef\u9009\uff09\n            password: \u5bc6\u7801\uff08\u53ef\u9009\uff09\n            nickname: \u6635\u79f0\uff08\u53ef\u9009\uff09\n            role: \u89d2\u8272\uff08\u53ef\u9009\uff09\n            avatar_index: \u5934\u50cf\u7d22\u5f15\uff08\u53ef\u9009\uff09\n            extra_data: \u989d\u5916\u6570\u636e\uff08\u53ef\u9009\uff09\n            session: \u6570\u636e\u5e93\u4f1a\u8bdd\uff08\u53ef\u9009\uff09\n            **kwargs: \u5176\u4ed6\u53c2\u6570\n            \n        Returns:\n            User: \u521b\u5efa\u7684\u7528\u6237\n            \n        Raises:\n            ValueError: \u7528\u6237\u540d\u5df2\u5b58\u5728\n        \"\"\"\n        try:\n            # \u68c0\u67e5\u7528\u6237\u540d\u662f\u5426\u5df2\u5b58\u5728\n            existing_user = await self.get_by_username(username, session)\n            if existing_user:\n                raise ValueError(f\"\u7528\u6237\u540d {username} \u5df2\u5b58\u5728\")\n            \n            # \u521b\u5efa\u7528\u6237\n            hashed_password = get_password_hash(password) if password else None\n            return await self.repository.create_user(\n                username=username,\n                email=email,\n                password=hashed_password,\n                nickname=nickname,\n                role=role,\n                avatar_index=avatar_index,\n                extra_data=extra_data,\n                session=session\n            )\n        except Exception as e:\n            lprint(f\"[\u7528\u6237\u521b\u5efa] \u521b\u5efa\u7528\u6237\u5931\u8d25: {traceback.format_exc()}\")\n            raise\n\n    async def get_by_email(self, email: str, session: Optional[AsyncSession] = None) -> Optional[User]:\n        \"\"\"\u901a\u8fc7\u90ae\u7bb1\u83b7\u53d6\u7528\u6237\"\"\"\n        try:\n            return await self.repository.get_by_email(email, session)\n        except Exception as e:\n            lprint(f\"\u83b7\u53d6\u7528\u6237\u5931\u8d25: {str(e)}\")\n            return None\n\n    async def update_status(self, username: str, status: str, session: Optional[AsyncSession] = None) -> bool:\n        \"\"\"\u66f4\u65b0\u7528\u6237\u72b6\u6001\"\"\"\n        try:\n            # \u5c06\u5b57\u7b26\u4e32\u72b6\u6001\u8f6c\u6362\u4e3a\u679a\u4e3e\n            try:\n                status_enum = UserStatusEnum(status)\n            except ValueError:\n                lprint(f\"\u65e0\u6548\u7684\u72b6\u6001\u503c: {status}\")\n                return False\n\n            return await self.repository.update_status(username, status_enum, session)\n        except Exception as e:\n            lprint(f\"\u66f4\u65b0\u7528\u6237\u72b6\u6001\u5931\u8d25: {str(e)}\")\n            return False\n\n    async def get_online_users(self, session: Optional[AsyncSession] = None) -> List[User]:\n        \"\"\"\u83b7\u53d6\u5728\u7ebf\u7528\u6237\"\"\"\n        try:\n            return await self.repository.get_online_users(session)\n        except Exception as e:\n            lprint(f\"\u83b7\u53d6\u5728\u7ebf\u7528\u6237\u5931\u8d25: {str(e)}\")\n            return []\n\n    async def bulk_create_users(self, users_data: List[dict], session: Optional[AsyncSession] = None) -> List[User]:\n        \"\"\"\u6279\u91cf\u521b\u5efa\u7528\u6237\n        \n        Args:\n            users_data: \u7528\u6237\u6570\u636e\u5217\u8868\uff0c\u6bcf\u4e2a\u7528\u6237\u6570\u636e\u5305\u542b username, email, password \u7b49\u5b57\u6bb5\n            session: \u53ef\u9009\u7684\u6570\u636e\u5e93\u4f1a\u8bdd\n            \n        Returns:\n            List[User]: \u521b\u5efa\u7684\u7528\u6237\u5217\u8868\n        \"\"\"\n        try:\n            users = []\n            for user_data in users_data:\n                # \u68c0\u67e5\u5fc5\u8981\u5b57\u6bb5\n                if not all(k in user_data for k in [\"username\", \"email\", \"password\"]):\n                    lprint(f\"\u7528\u6237\u6570\u636e\u7f3a\u5c11\u5fc5\u8981\u5b57\u6bb5: {user_data}\")\n                    continue\n\n                # \u68c0\u67e5\u7528\u6237\u540d\u662f\u5426\u5df2\u5b58\u5728\n                if await self.get_by_username(user_data[\"username\"], session):\n                    lprint(f\"\u7528\u6237\u540d\u5df2\u5b58\u5728: {user_data['username']}\")\n                    continue\n\n                # \u521b\u5efa\u7528\u6237\n                hashed_password = get_password_hash(user_data[\"password\"])\n                user = User(\n                    username=user_data[\"username\"],\n                    email=user_data[\"email\"],\n                    hashed_password=hashed_password,\n                    nickname=user_data.get(\"nickname\"),\n                    role=user_data.get(\"role\", \"user\"),\n                    avatar_index=user_data.get(\"avatar_index\", 0),\n                    created_at=datetime.now(ZoneInfo(\"Asia/Shanghai\"))\n                )\n                created_user = await self.repository.create(user, session)\n                users.append(created_user)\n\n            return users\n        except Exception as e:\n            lprint(f\"\u6279\u91cf\u521b\u5efa\u7528\u6237\u5931\u8d25: {str(e)}\")\n            raise\n", 159], "D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\core\\websocket\\manager.py": ["# backend/connection_manager.py\n\nfrom dataclasses import dataclass, field\nimport traceback\nfrom typing import Dict, Set, List, Optional, TypeAlias, Any\nimport socketio\nimport Lugwit_Module as LM\nfrom datetime import datetime\nimport pytz\n\nlprint = LM.lprint\n\n# \u7c7b\u578b\u522b\u540d\nSID: TypeAlias = str\nUsername: TypeAlias = str\n\n@dataclass\nclass ConnectionInfo:\n    \"\"\"\u8fde\u63a5\u4fe1\u606f\n    \n    Attributes:\n        sid: Socket.IO\u4f1a\u8bddID\n        username: \u7528\u6237\u540d\n        device_id: \u8bbe\u5907ID\n        ip_address: \u5ba2\u6237\u7aefIP\u5730\u5740\n        connected_at: \u8fde\u63a5\u5efa\u7acb\u65f6\u95f4\n    \"\"\"\n    sid: SID\n    username: Username\n    device_id: str\n    ip_address: str\n    connected_at: datetime = field(default_factory=lambda: datetime.now(pytz.utc))\n\nclass ConnectionManager:\n    \"\"\"WebSocket\u8fde\u63a5\u7ba1\u7406\u5668\uff0c\u53ea\u8d1f\u8d23\u6838\u5fc3\u7684\u8fde\u63a5\u7ba1\u7406\"\"\"\n    \n    def __init__(self, sio: socketio.AsyncServer):\n        \"\"\"\u521d\u59cb\u5316\u8fde\u63a5\u7ba1\u7406\u5668\n        \n        Args:\n            sio: Socket.IO\u670d\u52a1\u5668\u5b9e\u4f8b\n        \"\"\"\n        self.sio = sio\n        self.active_connections: Dict[Username, ConnectionInfo] = {}  # username -> ConnectionInfo\n        self.sid_to_username: Dict[SID, Username] = {}  # sid -> username\n        self.group_members: Dict[str, Set[Username]] = {}  # group -> members\n        \n    async def add_connection(self, sid: SID, username: Username, device_id: str, ip_address: str) -> bool:\n        \"\"\"\u6dfb\u52a0\u65b0\u8fde\u63a5\n        \n        Args:\n            sid: \u4f1a\u8bddID\n            username: \u7528\u6237\u540d\n            device_id: \u8bbe\u5907ID\n            ip_address: \u5ba2\u6237\u7aefIP\u5730\u5740\n            \n        Returns:\n            bool: \u662f\u5426\u6210\u529f\n        \"\"\"\n        try:\n            # \u5b58\u50a8\u8fde\u63a5\u4fe1\u606f\n            self.active_connections[username] = ConnectionInfo(\n                sid=sid,\n                username=username,\n                device_id=device_id,\n                ip_address=ip_address\n            )\n            self.sid_to_username[sid] = username\n            \n            lprint(f\"\u6dfb\u52a0\u8fde\u63a5\u6210\u529f: sid={sid}, username={username}, device_id={device_id}\")\n            return True\n            \n        except Exception as e:\n            lprint(f\"\u6dfb\u52a0\u8fde\u63a5\u5931\u8d25: {str(e)}\")\n            lprint(traceback.format_exc())\n            return False\n            \n    async def remove_connection(self, sid: SID):\n        \"\"\"\u79fb\u9664\u8fde\u63a5\n        \n        Args:\n            sid: \u4f1a\u8bddID\n        \"\"\"\n        try:\n            # \u83b7\u53d6\u7528\u6237\u540d\n            username = self.sid_to_username.get(sid)\n            if not username:\n                return\n                \n            # \u6e05\u7406\u8fde\u63a5\u4fe1\u606f\n            if username in self.active_connections:\n                del self.active_connections[username]\n            if sid in self.sid_to_username:\n                del self.sid_to_username[sid]\n                \n            # \u4ece\u7fa4\u7ec4\u4e2d\u79fb\u9664\n            for members in self.group_members.values():\n                members.discard(username)\n                \n            lprint(f\"\u79fb\u9664\u8fde\u63a5\u6210\u529f: sid={sid}, username={username}\")\n            \n        except Exception as e:\n            lprint(f\"\u79fb\u9664\u8fde\u63a5\u5931\u8d25: {str(e)}\")\n            lprint(traceback.format_exc())\n            \n    def get_username_by_sid(self, sid: SID) -> Optional[Username]:\n        \"\"\"\u901a\u8fc7\u4f1a\u8bddID\u83b7\u53d6\u7528\u6237\u540d\n        \n        Args:\n            sid: \u4f1a\u8bddID\n            \n        Returns:\n            Optional[Username]: \u7528\u6237\u540d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd4\u56deNone\n        \"\"\"\n        return self.sid_to_username.get(sid)\n        \n    def get_sid_by_username(self, username: Username) -> Optional[SID]:\n        \"\"\"\u901a\u8fc7\u7528\u6237\u540d\u83b7\u53d6\u4f1a\u8bddID\n        \n        Args:\n            username: \u7528\u6237\u540d\n            \n        Returns:\n            Optional[SID]: \u4f1a\u8bddID\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd4\u56deNone\n        \"\"\"\n        conn_info = self.active_connections.get(username)\n        return conn_info.sid if conn_info else None\n        \n    def is_connected(self, username: Username) -> bool:\n        \"\"\"\u68c0\u67e5\u7528\u6237\u662f\u5426\u5df2\u8fde\u63a5\n        \n        Args:\n            username: \u7528\u6237\u540d\n            \n        Returns:\n            bool: \u662f\u5426\u5df2\u8fde\u63a5\n        \"\"\"\n        return username in self.active_connections\n        \n    def get_connection_data(self, username: Username) -> Optional[ConnectionInfo]:\n        \"\"\"\u83b7\u53d6\u8fde\u63a5\u4fe1\u606f\n        \n        Args:\n            username: \u7528\u6237\u540d\n            \n        Returns:\n            Optional[ConnectionInfo]: \u8fde\u63a5\u4fe1\u606f\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd4\u56deNone\n        \"\"\"\n        return self.active_connections.get(username)\n        \n    async def join_group(self, username: Username, group: str):\n        \"\"\"\u5c06\u7528\u6237\u52a0\u5165\u7fa4\u7ec4\n        \n        Args:\n            username: \u7528\u6237\u540d\n            group: \u7fa4\u7ec4\u540d\n        \"\"\"\n        if group not in self.group_members:\n            self.group_members[group] = set()\n        self.group_members[group].add(username)\n        \n    async def leave_group(self, username: Username, group: str):\n        \"\"\"\u5c06\u7528\u6237\u4ece\u7fa4\u7ec4\u4e2d\u79fb\u9664\n        \n        Args:\n            username: \u7528\u6237\u540d\n            group: \u7fa4\u7ec4\u540d\n        \"\"\"\n        if group in self.group_members:\n            self.group_members[group].discard(username)\n            \n    def get_group_members(self, group: str) -> Set[Username]:\n        \"\"\"\u83b7\u53d6\u7fa4\u7ec4\u6210\u5458\n        \n        Args:\n            group: \u7fa4\u7ec4\u540d\n            \n        Returns:\n            Set[Username]: \u7fa4\u7ec4\u6210\u5458\u96c6\u5408\n        \"\"\"\n        return self.group_members.get(group, set())\n        \n    async def emit(self, event: str, data: Any, to: Optional[str] = None):\n        \"\"\"\u53d1\u9001\u4e8b\u4ef6\n        \n        Args:\n            event: \u4e8b\u4ef6\u540d\n            data: \u4e8b\u4ef6\u6570\u636e\n            to: \u76ee\u6807\u7528\u6237\u540d\u6216None(\u5e7f\u64ad)\n        \"\"\"\n        try:\n            if to:\n                # \u53d1\u9001\u7ed9\u6307\u5b9a\u7528\u6237\n                sid = self.get_sid_by_username(to)\n                if sid:\n                    await self.sio.emit(event, data, room=sid)\n            else:\n                # \u5e7f\u64ad\n                await self.sio.emit(event, data)\n                \n        except Exception as e:\n            lprint(f\"\u53d1\u9001\u4e8b\u4ef6\u5931\u8d25: {str(e)}\")\n            lprint(traceback.format_exc())\n            \n    async def emit_to_group(self, group: str, event: str, data: Any):\n        \"\"\"\u53d1\u9001\u4e8b\u4ef6\u7ed9\u7fa4\u7ec4\n        \n        Args:\n            group: \u7fa4\u7ec4\u540d\n            event: \u4e8b\u4ef6\u540d\n            data: \u4e8b\u4ef6\u6570\u636e\n        \"\"\"\n        try:\n            members = self.get_group_members(group)\n            for username in members:\n                sid = self.get_sid_by_username(username)\n                if sid:\n                    await self.sio.emit(event, data, room=sid)\n                    \n        except Exception as e:\n            lprint(f\"\u53d1\u9001\u7fa4\u7ec4\u4e8b\u4ef6\u5931\u8d25: {str(e)}\")\n            lprint(traceback.format_exc())\n\n# \u5168\u5c40WebSocket\u8fde\u63a5\u7ba1\u7406\u5668\u5b9e\u4f8b\nconnection_manager = ConnectionManager(None)\n\ndef get_connection_manager() -> ConnectionManager:\n    \"\"\"\u83b7\u53d6WebSocket\u8fde\u63a5\u7ba1\u7406\u5668\u5b9e\u4f8b\n    \n    Returns:\n        WebSocket\u8fde\u63a5\u7ba1\u7406\u5668\u5b9e\u4f8b\n    \"\"\"\n    return connection_manager\n", 233], "D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\core\\websocket\\handlers.py": ["from typing import Dict, Any, Optional\nimport traceback\nimport socketio\nimport Lugwit_Module as LM\nfrom jose import jwt\nfrom .manager import ConnectionManager\nfrom app.core.auth.auth import SECRET_KEY, ALGORITHM\nlprint = LM.lprint\n\nclass WebSocketHandlers:\n    \"\"\"WebSocket\u4e8b\u4ef6\u5904\u7406\u5668\uff0c\u8d1f\u8d23\u6838\u5fc3\u7684Socket.IO\u8fde\u63a5\u7ba1\u7406\u548c\u8bbe\u5907\u72b6\u6001\u66f4\u65b0\"\"\"\n    \n    def __init__(self, connection_manager: ConnectionManager, sio: socketio.AsyncServer):\n        \"\"\"\u521d\u59cb\u5316\u5904\u7406\u5668\n        \n        Args:\n            connection_manager: \u8fde\u63a5\u7ba1\u7406\u5668\u5b9e\u4f8b\n            sio: Socket.IO\u670d\u52a1\u5668\u5b9e\u4f8b\n        \"\"\"\n        self.connection_manager = connection_manager\n        self.sio = sio\n        \n        # \u6ce8\u518cSocket.IO\u4e8b\u4ef6\u5904\u7406\u5668\n        self.setup_handlers()\n        \n    def setup_handlers(self):\n        \"\"\"\u6ce8\u518cSocket.IO\u4e8b\u4ef6\u5904\u7406\u5668\"\"\"\n        self.sio.on('connect', self.handle_connect)\n        self.sio.on('disconnect', self.handle_disconnect)\n        \n    def _decode_token(self, token: str) -> Dict[str, Any]:\n        \"\"\"\u89e3\u7801JWT\u4ee4\u724c\n        \n        Args:\n            token: JWT\u4ee4\u724c\n            \n        Returns:\n            Dict[str, Any]: \u89e3\u7801\u540e\u7684\u6570\u636e\n            \n        Raises:\n            jwt.JWTError: \u4ee4\u724c\u65e0\u6548\n        \"\"\"\n        try:\n            payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n            return payload\n        except Exception as e:\n            lprint(f\"\u89e3\u7801JWT\u4ee4\u724c\u5931\u8d25: {str(e)}\")\n            raise\n        \n    async def handle_connect(self, sid: str, environ: dict, auth: dict):\n        \"\"\"\u5904\u7406Socket.IO\u8fde\u63a5\u8bf7\u6c42\n        \n        Args:\n            sid: \u4f1a\u8bddID\n            environ: \u73af\u5883\u53d8\u91cf\n            auth: \u8ba4\u8bc1\u6570\u636e\uff0c\u5fc5\u987b\u5305\u542btoken\n            \n        Returns:\n            bool: \u8fde\u63a5\u662f\u5426\u6210\u529f\n        \"\"\"\n        try:\n            # \u9a8c\u8bc1\u8ba4\u8bc1\u6570\u636e\n            lprint(f\"\u5904\u7406WebSocket\u8fde\u63a5: sid={sid}, auth={auth}\")\n            if not auth or 'token' not in auth:\n                lprint(f\"\u8ba4\u8bc1\u6570\u636e\u65e0\u6548: sid={sid}, auth={auth}\")\n                return False\n                \n            token = auth['token']\n            \n            # \u4eceJWT\u4ee4\u724c\u4e2d\u83b7\u53d6\u7528\u6237\u540d\u548c\u8bbe\u5907ID\n            try:\n                payload = self._decode_token(token)\n                username = payload.get('sub')  # JWT\u6807\u51c6\u7528sub\u5b57\u6bb5\u5b58\u50a8\u7528\u6237\u6807\u8bc6\n                device_id = payload.get('device_id')\n                if not username or not device_id:\n                    lprint(f\"JWT\u4ee4\u724c\u4e2d\u7f3a\u5c11\u5fc5\u8981\u4fe1\u606f: sid={sid}, payload={payload}\")\n                    return False\n            except Exception as e:\n                lprint(f\"\u89e3\u6790JWT\u4ee4\u724c\u5931\u8d25: {str(e)}\")\n                return False\n            \n            # \u83b7\u53d6\u5ba2\u6237\u7aef\u4fe1\u606f\n            scope = environ.get('asgi.scope', {})\n            client = scope.get('client', None)\n            client_ip = client[0] if client else 'unknown'\n            \n            # \u6dfb\u52a0\u8fde\u63a5\n            success = await self.connection_manager.add_connection(\n                sid=sid,\n                username=username,\n                device_id=device_id,\n                ip_address=client_ip\n            )\n            \n            if success:\n                lprint(f\"WebSocket\u8fde\u63a5\u6210\u529f: sid={sid}, username={username}, device_id={device_id}\")\n                # \u5e7f\u64ad\u7528\u6237\u5728\u7ebf\u72b6\u6001\n                await self.sio.emit(\"user_online\", {\n                    \"username\": username,\n                    \"device_id\": device_id\n                })\n                return True\n            else:\n                lprint(f\"WebSocket\u8fde\u63a5\u5931\u8d25: sid={sid}, username={username}\")\n                return False\n            \n        except Exception as e:\n            lprint(f\"\u5904\u7406WebSocket\u8fde\u63a5\u65f6\u53d1\u751f\u9519\u8bef: {str(e)}\")\n            lprint(traceback.format_exc())\n            return False\n            \n    async def handle_disconnect(self, sid: str):\n        \"\"\"\u5904\u7406Socket.IO\u65ad\u5f00\u8fde\u63a5\n        \n        Args:\n            sid: \u4f1a\u8bddID\n        \"\"\"\n        try:\n            # \u83b7\u53d6\u7528\u6237\u4fe1\u606f\n            username = self.connection_manager.get_username_by_sid(sid)\n            if not username:\n                lprint(f\"\u65ad\u5f00\u8fde\u63a5: \u672a\u627e\u5230\u5173\u8054\u7684\u7528\u6237\u540d, sid={sid}\")\n                return\n                \n            # \u79fb\u9664\u8fde\u63a5\n            await self.connection_manager.remove_connection(sid)\n            lprint(f\"WebSocket\u8fde\u63a5\u65ad\u5f00: sid={sid}, username={username}\")\n            \n            # \u5e7f\u64ad\u7528\u6237\u79bb\u7ebf\u72b6\u6001\n            await self.sio.emit(\"user_offline\", {\"username\": username})\n            \n        except Exception as e:\n            lprint(f\"\u5904\u7406WebSocket\u65ad\u5f00\u8fde\u63a5\u65f6\u53d1\u751f\u9519\u8bef: {str(e)}\")\n            lprint(traceback.format_exc())\n", 134], "D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\repositories\\group.py": ["\"\"\"\u7fa4\u7ec4\u6d88\u606f\u4ed3\u50a8\u5b9e\u73b0\"\"\"\nfrom typing import Dict, Any, List, Optional, Union\nfrom datetime import datetime\nfrom sqlalchemy import select, update, delete, text, and_, or_, desc\nfrom sqlalchemy.ext.asyncio import AsyncSession\nimport traceback\n\n# \u672c\u5730\u6a21\u5757\nfrom app.db.database import AsyncSessionLocal, engine\nfrom app.domain.message.enums import MessageStatus, MessageContentType\nfrom app.domain.message.models import MessageReaction, MessageMention, create_group_message_table\nfrom app.domain.group.models import GroupMember\n\nclass GroupMessageRepository:\n    \"\"\"\u7fa4\u7ec4\u6d88\u606f\u4ed3\u50a8\u5b9e\u73b0\"\"\"\n    \n    def __init__(self, session: AsyncSession):\n        self.session = session\n        self._message_models = {}  # \u7f13\u5b58\u7fa4\u7ec4\u6d88\u606f\u6a21\u578b\n        \n    def _get_message_model(self, group_id: Union[int, str]):\n        \"\"\"\u83b7\u53d6\u7fa4\u7ec4\u6d88\u606f\u6a21\u578b\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            \n        Returns:\n            \u6d88\u606f\u6a21\u578b\u7c7b\n        \"\"\"\n        group_id = str(group_id)\n        if group_id not in self._message_models:\n            self._message_models[group_id] = create_group_message_table(group_id)\n        return self._message_models[group_id]\n        \n    async def create_table_if_not_exists(self, group_id: Union[int, str]):\n        \"\"\"\u521b\u5efa\u7fa4\u7ec4\u6d88\u606f\u8868\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n        \"\"\"\n        try:\n            # \u83b7\u53d6\u6d88\u606f\u6a21\u578b\n            message_model = self._get_message_model(group_id)\n            \n            # \u68c0\u67e5\u8868\u662f\u5426\u5b58\u5728\n            result = await self.session.execute(\n                text(f\"SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = '{message_model.__tablename__}')\")\n            )\n            exists = result.scalar()\n            \n            if not exists:\n                # \u521b\u5efa\u8868\n                print(f\"Creating table {message_model.__tablename__}\")\n                \n                # \u83b7\u53d6\u8868\u7684 DDL\n                table = message_model.__table__\n                columns = []\n                for column in table.columns:\n                    # \u5c06DATETIME\u7c7b\u578b\u8f6c\u6362\u4e3aTIMESTAMP WITH TIME ZONE\n                    if isinstance(column.type, type(table.c.created_at.type)):\n                        col_type = \"TIMESTAMP WITH TIME ZONE\"\n                    else:\n                        col_type = str(column.type)\n                        \n                    # \u6dfb\u52a0\u4e3b\u952e\u548c\u81ea\u589e\n                    if column.name == 'id':\n                        columns.append(f\"{column.name} SERIAL PRIMARY KEY\")\n                    else:\n                        columns.append(f\"{column.name} {col_type}\")\n                \n                # \u6784\u5efa\u521b\u5efa\u8868\u7684 SQL\n                create_table_sql = f\"\"\"\n                CREATE TABLE {table.name} (\n                    {', '.join(columns)}\n                )\n                \"\"\"\n                \n                # \u6267\u884c\u521b\u5efa\u8868\u7684 SQL\n                await self.session.execute(text(create_table_sql))\n                await self.session.commit()\n                \n        except Exception as e:\n            print(f\"\u521b\u5efa\u7fa4\u7ec4\u6d88\u606f\u8868\u5931\u8d25: {str(e)}\")\n            await self.session.rollback()\n            raise\n    \n    async def create(self, group_id: Union[int, str], message_data: Dict[str, Any]):\n        \"\"\"\u521b\u5efa\u7fa4\u7ec4\u6d88\u606f\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            message_data: \u6d88\u606f\u6570\u636e\n            \n        Returns:\n            \u521b\u5efa\u7684\u6d88\u606f\n        \"\"\"\n        try:\n            # \u786e\u4fdd\u8868\u5b58\u5728\n            await self.create_table_if_not_exists(group_id)\n            \n            # \u83b7\u53d6\u6d88\u606f\u6a21\u578b\n            message_model = self._get_message_model(group_id)\n            \n            # \u521b\u5efa\u6d88\u606f\n            message = message_model(**message_data)\n            self.session.add(message)\n            await self.session.flush()\n            \n            # \u5904\u7406@\u63d0\u9192\n            if message_data.get(\"mentions\"):\n                for user_id in message_data[\"mentions\"]:\n                    mention = MessageMention(\n                        message_table=message_model.__tablename__,\n                        message_id=message.id,\n                        user_id=user_id\n                    )\n                    self.session.add(mention)\n            \n            await self.session.commit()\n            return message\n            \n        except Exception as e:\n            await self.session.rollback()\n            print(f\"\u521b\u5efa\u7fa4\u7ec4\u6d88\u606f\u5931\u8d25: {str(e)}\")\n            raise\n            \n    async def get_by_id(self, group_id: Union[int, str], message_id: int):\n        \"\"\"\u6839\u636eID\u83b7\u53d6\u6d88\u606f\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            message_id: \u6d88\u606fID\n            \n        Returns:\n            \u6d88\u606f\u5bf9\u8c61\n        \"\"\"\n        try:\n            message_model = self._get_message_model(group_id)\n            stmt = select(message_model).where(message_model.id == message_id)\n            result = await self.session.execute(stmt)\n            return result.scalar_one_or_none()\n        except Exception as e:\n            print(f\"\u83b7\u53d6\u7fa4\u7ec4\u6d88\u606f\u5931\u8d25: {str(e)}\")\n            raise\n            \n    async def get_messages(self, \n                          group_id: Union[int, str],\n                          limit: int = 20,\n                          before_id: Optional[int] = None,\n                          after_id: Optional[int] = None):\n        \"\"\"\u83b7\u53d6\u7fa4\u7ec4\u6d88\u606f\u5217\u8868\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            limit: \u8fd4\u56de\u6d88\u606f\u6570\u91cf\n            before_id: \u5728\u6b64ID\u4e4b\u524d\u7684\u6d88\u606f\n            after_id: \u5728\u6b64ID\u4e4b\u540e\u7684\u6d88\u606f\n            \n        Returns:\n            \u6d88\u606f\u5217\u8868\n        \"\"\"\n        try:\n            message_model = self._get_message_model(group_id)\n            \n            # \u786e\u4fdd\u8868\u5b58\u5728\n            await self.create_table_if_not_exists(group_id)\n            \n            # \u6784\u5efa\u67e5\u8be2\u6761\u4ef6\n            conditions = []\n            if before_id:\n                conditions.append(message_model.id < before_id)\n            if after_id:\n                conditions.append(message_model.id > after_id)\n                \n            # \u6784\u5efa\u67e5\u8be2\u8bed\u53e5\n            stmt = select(message_model)\n            if conditions:\n                stmt = stmt.where(and_(*conditions))\n            stmt = stmt.order_by(desc(message_model.id)).limit(limit)\n            \n            result = await self.session.execute(stmt)\n            return result.scalars().all()\n            \n        except Exception as e:\n            print(f\"\u83b7\u53d6\u7fa4\u7ec4\u6d88\u606f\u5217\u8868\u5931\u8d25: {str(e)}\")\n            raise\n            \n    async def update_status(self, group_id: Union[int, str], message_id: int, status: MessageStatus):\n        \"\"\"\u66f4\u65b0\u6d88\u606f\u72b6\u6001\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            message_id: \u6d88\u606fID\n            status: \u65b0\u72b6\u6001\n        \"\"\"\n        try:\n            message_model = self._get_message_model(group_id)\n            stmt = (\n                select(message_model)\n                .where(message_model.id == message_id)\n            )\n            result = await self.session.execute(stmt)\n            message = result.scalar_one_or_none()\n            \n            if message:\n                message.status = status\n                await self.session.commit()\n                \n        except Exception as e:\n            await self.session.rollback()\n            print(f\"\u66f4\u65b0\u7fa4\u7ec4\u6d88\u606f\u72b6\u6001\u5931\u8d25: {str(e)}\")\n            raise\n            \n    async def add_reaction(self, group_id: Union[int, str], message_id: int, user_id: int, reaction: str):\n        \"\"\"\u6dfb\u52a0\u8868\u60c5\u56de\u5e94\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            message_id: \u6d88\u606fID\n            user_id: \u7528\u6237ID\n            reaction: \u8868\u60c5\n        \"\"\"\n        try:\n            message_model = self._get_message_model(group_id)\n            \n            # \u786e\u4fdd\u8868\u5b58\u5728\n            await self.create_table_if_not_exists(group_id)\n            \n            # \u68c0\u67e5\u6d88\u606f\u662f\u5426\u5b58\u5728\n            stmt = select(message_model).where(message_model.id == message_id)\n            result = await self.session.execute(stmt)\n            if not result.scalar_one_or_none():\n                raise ValueError(f\"\u6d88\u606f\u4e0d\u5b58\u5728: {message_id}\")\n                \n            # \u521b\u5efa\u8868\u60c5\u56de\u5e94\n            reaction = MessageReaction(\n                message_table=message_model.__tablename__,\n                message_id=message_id,\n                user_id=user_id,\n                reaction=reaction\n            )\n            self.session.add(reaction)\n            await self.session.commit()\n            \n        except Exception as e:\n            await self.session.rollback()\n            print(f\"\u6dfb\u52a0\u8868\u60c5\u56de\u5e94\u5931\u8d25: {str(e)}\")\n            raise\n            \n    async def remove_reaction(self, group_id: Union[int, str], message_id: int, user_id: int, reaction: str):\n        \"\"\"\u79fb\u9664\u8868\u60c5\u56de\u5e94\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            message_id: \u6d88\u606fID\n            user_id: \u7528\u6237ID\n            reaction: \u8868\u60c5\n        \"\"\"\n        try:\n            message_model = self._get_message_model(group_id)\n            \n            # \u786e\u4fdd\u8868\u5b58\u5728\n            await self.create_table_if_not_exists(group_id)\n            \n            # \u5220\u9664\u8868\u60c5\u56de\u5e94\n            stmt = (\n                select(MessageReaction)\n                .where(\n                    and_(\n                        MessageReaction.message_table == message_model.__tablename__,\n                        MessageReaction.message_id == message_id,\n                        MessageReaction.user_id == user_id,\n                        MessageReaction.reaction == reaction\n                    )\n                )\n            )\n            result = await self.session.execute(stmt)\n            reaction = result.scalar_one_or_none()\n            \n            if reaction:\n                await self.session.delete(reaction)\n                await self.session.commit()\n                \n        except Exception as e:\n            await self.session.rollback()\n            print(f\"\u79fb\u9664\u8868\u60c5\u56de\u5e94\u5931\u8d25: {str(e)}\")\n            raise\n            \n    async def mark_as_read(self, group_id: Union[int, str], message_id: int) -> bool:\n        \"\"\"\u6807\u8bb0\u7fa4\u7ec4\u6d88\u606f\u4e3a\u5df2\u8bfb\"\"\"\n        try:\n            message_model = self._get_message_model(group_id)\n            stmt = (\n                update(message_model)\n                .where(message_model.id == message_id)\n                .values(status=MessageStatus.read)\n            )\n            result = await self.session.execute(stmt)\n            await self.session.commit()\n            return result.rowcount > 0\n        except Exception as e:\n            await self.session.rollback()\n            print(f\"\u6807\u8bb0\u7fa4\u7ec4\u6d88\u606f\u5df2\u8bfb\u5931\u8d25: {str(e)}\")\n            raise\n            \n    async def delete_message(self, group_id: Union[int, str], message_id: int, user_id: str = None) -> bool:\n        \"\"\"\u5220\u9664\u7fa4\u7ec4\u6d88\u606f\"\"\"\n        try:\n            message_model = self._get_message_model(group_id)\n            \n            # \u786e\u4fdd\u8868\u5b58\u5728\n            await self.create_table_if_not_exists(group_id)\n            \n            # \u83b7\u53d6\u6d88\u606f\n            message = await self.get_by_id(group_id, message_id)\n            if not message:\n                return False\n            \n            # \u68c0\u67e5\u6743\u9650\n            if user_id and message.sender_id != user_id:\n                print(f\"\u7528\u6237 {user_id} \u65e0\u6743\u5220\u9664\u6d88\u606f {message_id}\")\n                return False\n            \n            # \u8f6f\u5220\u9664\n            stmt = (\n                update(message_model)\n                .where(message_model.id == message_id)\n                .values(\n                    is_deleted=True,\n                    delete_at=datetime.utcnow()\n                )\n            )\n            result = await self.session.execute(stmt)\n            await self.session.commit()\n            return result.rowcount > 0\n        except Exception as e:\n            await self.session.rollback()\n            print(f\"\u5220\u9664\u7fa4\u7ec4\u6d88\u606f\u5931\u8d25: {str(e)}\")\n            raise\n            \n    async def get_unread_count(self, group_id: Union[int, str], user_id: str) -> int:\n        \"\"\"\u83b7\u53d6\u7528\u6237\u5728\u7fa4\u7ec4\u4e2d\u7684\u672a\u8bfb\u6d88\u606f\u6570\u91cf\"\"\"\n        try:\n            message_model = self._get_message_model(group_id)\n            \n            # \u786e\u4fdd\u8868\u5b58\u5728\n            await self.create_table_if_not_exists(group_id)\n            \n            # \u68c0\u67e5\u7528\u6237\u662f\u5426\u5728\u7fa4\u7ec4\u4e2d\n            member_result = await self.session.execute(\n                select(GroupMember).where(\n                    GroupMember.group_id == group_id,\n                    GroupMember.user_id == user_id\n                )\n            )\n            if not member_result.scalar_one_or_none():\n                return 0\n            \n            stmt = (\n                select(message_model)\n                .where(message_model.status == MessageStatus.unread)\n            )\n            result = await self.session.execute(stmt)\n            return len(result.scalars().all())\n        except Exception as e:\n            print(f\"\u83b7\u53d6\u7fa4\u7ec4\u672a\u8bfb\u6d88\u606f\u6570\u91cf\u5931\u8d25: {str(e)}\")\n            raise\n            \n    async def search_messages(\n        self,\n        group_id: Union[int, str],\n        keyword: str,\n        user_id: str = None,\n        start_time: Optional[datetime] = None,\n        end_time: Optional[datetime] = None,\n        limit: int = 50,\n        offset: int = 0\n    ) -> List:\n        \"\"\"\u641c\u7d22\u6d88\u606f\"\"\"\n        try:\n            message_model = self._get_message_model(group_id)\n            \n            # \u786e\u4fdd\u8868\u5b58\u5728\n            await self.create_table_if_not_exists(group_id)\n            \n            # \u6784\u5efa\u67e5\u8be2\n            stmt = select(message_model)\n            \n            # \u5173\u952e\u8bcd\u641c\u7d22\n            if keyword:\n                stmt = stmt.where(message_model.content.ilike(f\"%{keyword}%\"))\n            \n            # \u53d1\u9001\u8005\u8fc7\u6ee4\n            if user_id:\n                stmt = stmt.where(message_model.sender_id == user_id)\n            \n            # \u65f6\u95f4\u8303\u56f4\n            if start_time:\n                stmt = stmt.where(message_model.created_at >= start_time)\n            if end_time:\n                stmt = stmt.where(message_model.created_at <= end_time)\n            \n            # \u6392\u5e8f\u548c\u5206\u9875\n            stmt = stmt.order_by(desc(message_model.created_at))\n            stmt = stmt.offset(offset).limit(limit)\n            \n            result = await self.session.execute(stmt)\n            return result.scalars().all()\n        except Exception as e:\n            print(f\"\u641c\u7d22\u6d88\u606f\u5931\u8d25: {str(e)}\")\n            raise\n            \n    async def archive_old_messages(\n        self,\n        group_id: Union[int, str],\n        before_date: datetime,\n        batch_size: int = 1000\n    ) -> Dict[str, int]:\n        \"\"\"\u5f52\u6863\u65e7\u6d88\u606f\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            before_date: \u6b64\u65e5\u671f\u4e4b\u524d\u7684\u6d88\u606f\u5c06\u88ab\u5f52\u6863\n            batch_size: \u6bcf\u6279\u5904\u7406\u7684\u6d88\u606f\u6570\u91cf\n            \n        Returns:\n            Dict[str, int]: \u5f52\u6863\u7ed3\u679c\u7edf\u8ba1\n        \"\"\"\n        # TODO: \u5b9e\u73b0\u5f52\u6863\u65e7\u6d88\u606f\u903b\u8f91\n        pass\n    \n    async def migrate_to_group(\n        self,\n        group_id: Union[int, str],\n        target_group_id: str,\n        message_ids: List[str] = None,\n        before_date: datetime = None\n    ) -> int:\n        \"\"\"\u8fc1\u79fb\u6d88\u606f\u5230\u53e6\u4e00\u4e2a\u7fa4\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            target_group_id: \u76ee\u6807\u7fa4\u7ec4ID\n            message_ids: \u8981\u8fc1\u79fb\u7684\u6d88\u606fID\u5217\u8868\n            before_date: \u8fc1\u79fb\u6b64\u65e5\u671f\u4e4b\u524d\u7684\u6d88\u606f\n            \n        Returns:\n            int: \u8fc1\u79fb\u7684\u6d88\u606f\u6570\u91cf\n        \"\"\"\n        # TODO: \u5b9e\u73b0\u8fc1\u79fb\u6d88\u606f\u903b\u8f91\n        pass\n    \n    async def cleanup_old_messages(\n        self,\n        group_id: Union[int, str],\n        retention_days: int = 30,\n        cleanup_deleted: bool = True,\n        cleanup_archived: bool = True\n    ) -> Dict[str, int]:\n        \"\"\"\u6e05\u7406\u65e7\u6d88\u606f\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            retention_days: \u4fdd\u7559\u5929\u6570\n            cleanup_deleted: \u662f\u5426\u6e05\u7406\u5df2\u5220\u9664\u6d88\u606f\n            cleanup_archived: \u662f\u5426\u6e05\u7406\u5df2\u5f52\u6863\u6d88\u606f\n            \n        Returns:\n            Dict[str, int]: \u6e05\u7406\u7ed3\u679c\u7edf\u8ba1\n        \"\"\"\n        # TODO: \u5b9e\u73b0\u6e05\u7406\u65e7\u6d88\u606f\u903b\u8f91\n        pass\n    \n    async def get_statistics(\n        self,\n        group_id: Union[int, str],\n        start_time: Optional[datetime] = None,\n        end_time: Optional[datetime] = None\n    ) -> Dict[str, Any]:\n        \"\"\"\u83b7\u53d6\u6d88\u606f\u7edf\u8ba1\u4fe1\u606f\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            start_time: \u7edf\u8ba1\u5f00\u59cb\u65f6\u95f4\n            end_time: \u7edf\u8ba1\u7ed3\u675f\u65f6\u95f4\n            \n        Returns:\n            Dict[str, Any]: \u7edf\u8ba1\u4fe1\u606f\n        \"\"\"\n        # TODO: \u5b9e\u73b0\u83b7\u53d6\u6d88\u606f\u7edf\u8ba1\u4fe1\u606f\u903b\u8f91\n        pass\n    \n    async def restore_messages(\n        self,\n        group_id: Union[int, str],\n        message_ids: List[str]\n    ) -> Dict[str, int]:\n        \"\"\"\u6062\u590d\u5df2\u5220\u9664\u7684\u6d88\u606f\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            message_ids: \u8981\u6062\u590d\u7684\u6d88\u606fID\u5217\u8868\n            \n        Returns:\n            Dict[str, int]: \u6062\u590d\u7ed3\u679c\u7edf\u8ba1\n        \"\"\"\n        # TODO: \u5b9e\u73b0\u6062\u590d\u5df2\u5220\u9664\u6d88\u606f\u903b\u8f91\n        pass\n    \n    async def export_messages(\n        self,\n        group_id: Union[int, str],\n        format: str = \"json\",\n        start_time: Optional[datetime] = None,\n        end_time: Optional[datetime] = None,\n        include_deleted: bool = False\n    ) -> str:\n        \"\"\"\u5bfc\u51fa\u6d88\u606f\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            format: \u5bfc\u51fa\u683c\u5f0f (json \u6216 csv)\n            start_time: \u5f00\u59cb\u65f6\u95f4\n            end_time: \u7ed3\u675f\u65f6\u95f4\n            include_deleted: \u662f\u5426\u5305\u542b\u5df2\u5220\u9664\u6d88\u606f\n            \n        Returns:\n            str: \u5bfc\u51fa\u6587\u4ef6\u8def\u5f84\n        \"\"\"\n        # TODO: \u5b9e\u73b0\u5bfc\u51fa\u6d88\u606f\u903b\u8f91\n        pass\n    \n    async def backup_messages(\n        self,\n        group_id: Union[int, str],\n        include_deleted: bool = True,\n        include_archived: bool = True\n    ) -> str:\n        \"\"\"\u5907\u4efd\u6d88\u606f\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            include_deleted: \u662f\u5426\u5305\u542b\u5df2\u5220\u9664\u6d88\u606f\n            include_archived: \u662f\u5426\u5305\u542b\u5df2\u5f52\u6863\u6d88\u606f\n            \n        Returns:\n            str: \u5907\u4efd\u6587\u4ef6\u8def\u5f84\n        \"\"\"\n        # TODO: \u5b9e\u73b0\u5907\u4efd\u6d88\u606f\u903b\u8f91\n        pass\n    \n    async def restore_from_backup(\n        self,\n        group_id: Union[int, str],\n        backup_file: str,\n        restore_deleted: bool = True,\n        restore_archived: bool = True\n    ) -> Dict[str, int]:\n        \"\"\"\u4ece\u5907\u4efd\u6587\u4ef6\u6062\u590d\u6d88\u606f\n        \n        Args:\n            group_id: \u7fa4\u7ec4ID\n            backup_file: \u5907\u4efd\u6587\u4ef6\u8def\u5f84\n            restore_deleted: \u662f\u5426\u6062\u590d\u5df2\u5220\u9664\u6d88\u606f\n            restore_archived: \u662f\u5426\u6062\u590d\u5df2\u5f52\u6863\u6d88\u606f\n            \n        Returns:\n            Dict[str, int]: \u6062\u590d\u7ed3\u679c\u7edf\u8ba1\n        \"\"\"\n        # TODO: \u5b9e\u73b0\u4ece\u5907\u4efd\u6587\u4ef6\u6062\u590d\u6d88\u606f\u903b\u8f91\n        pass\n\n    async def save_message(self, message_data: Dict[str, Any]):\n        \"\"\"\u4fdd\u5b58\u7fa4\u7ec4\u6d88\u606f\"\"\"\n        try:\n            # \u83b7\u53d6\u6d88\u606f\u6a21\u578b\n            message_model = await self._get_message_model(message_data[\"group_id\"])\n            \n            # \u521b\u5efa\u6d88\u606f\u5bf9\u8c61\n            message = message_model(\n                content=message_data[\"content\"],\n                sender_id=message_data[\"sender_id\"],\n                group_id=message_data[\"group_id\"],\n                content_type=message_data.get(\"content_type\", MessageContentType.plain_text),\n                status=MessageStatus.sent,\n                extra_data=message_data.get(\"extra_data\", {})\n            )\n            \n            # \u4fdd\u5b58\u6d88\u606f\n            self.session.add(message)\n            await self.session.flush()\n            \n            # \u5904\u7406@\u63d0\u9192\n            if message_data.get(\"mentions\"):\n                for user_id in message_data[\"mentions\"]:\n                    mention = MessageMention(\n                        message_table=message_model.__tablename__,\n                        message_id=message.id,\n                        user_id=user_id\n                    )\n                    self.session.add(mention)\n            \n            await self.session.commit()\n            return message.public_id\n            \n        except Exception as e:\n            await self.session.rollback()\n            print(f\"\u521b\u5efa\u7fa4\u7ec4\u6d88\u606f\u5931\u8d25: {str(e)}\")\n            raise\n", 609], "D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\handlers.py": ["\"\"\"\u6d88\u606f\u5904\u7406\u5668\"\"\"\nimport sys\nsys.path.append(r'D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib')\nimport Lugwit_Module as LM\nlprint = LM.lprint\n\nfrom typing import Dict, Any, List, Optional\nfrom datetime import datetime\nimport json\nimport traceback\nfrom app.domain.message.schemas import MessageBase\nfrom app.domain.message.enums import MessageType, MessageContentType, MessageStatus\nfrom app.core.websocket.manager import ConnectionManager\nfrom app.domain.message.repositories import PrivateMessageRepository, GroupMessageRepository\nfrom app.domain.user.repository import UserRepository\nfrom app.domain.group.repository import GroupRepository, GroupMemberRepository\n\nclass MessageHandlers:\n    \"\"\"\u6d88\u606f\u5904\u7406\u5668\u7c7b\n    \n    \u5904\u7406\u5404\u79cd\u7c7b\u578b\u7684\u6d88\u606f\u4e8b\u4ef6\uff0c\u5305\u62ec\uff1a\n    - \u79c1\u804a\u6d88\u606f\n    - \u7fa4\u804a\u6d88\u606f\n    - \u7cfb\u7edf\u6d88\u606f\n    - \u72b6\u6001\u66f4\u65b0\n    \"\"\"\n    \n    def __init__(self, \n                 connection_manager: ConnectionManager,\n                 private_repo: PrivateMessageRepository,\n                 group_repo: GroupMessageRepository,\n                 group_repository: GroupRepository,\n                 user_repo: UserRepository,\n                 member_repo: GroupMemberRepository):\n        \"\"\"\u521d\u59cb\u5316\u6d88\u606f\u5904\u7406\u5668\n        \n        Args:\n            connection_manager: WebSocket\u8fde\u63a5\u7ba1\u7406\u5668\n            private_repo: \u79c1\u804a\u6d88\u606f\u4ed3\u50a8\n            group_repo: \u7fa4\u7ec4\u6d88\u606f\u4ed3\u50a8\n            group_repository: \u7fa4\u7ec4\u4ed3\u50a8\n            user_repo: \u7528\u6237\u4ed3\u50a8\n            member_repo: \u7fa4\u6210\u5458\u4ed3\u50a8\n        \"\"\"\n        self.connection_manager = connection_manager\n        self.private_repo = private_repo\n        self.group_repo = group_repo\n        self.group_repository = group_repository\n        self.user_repo = user_repo\n        self.member_repo = member_repo\n        self.sio = connection_manager.sio\n\n        # \u6ce8\u518c\u4e8b\u4ef6\u5904\u7406\u5668\n        self.register_handlers()\n\n    def register_handlers(self):\n        \"\"\"\u6ce8\u518c\u6d88\u606f\u4e8b\u4ef6\u5904\u7406\u5668\"\"\"\n        self.sio.on(\"private_message\", self.handle_private_message)\n        self.sio.on(\"group_message\", self.handle_group_message)\n        \n        # \u76d1\u542c\u7528\u6237\u72b6\u6001\u4e8b\u4ef6\n        self.sio.on(\"user_online\", self.handle_user_online)\n        self.sio.on(\"user_offline\", self.handle_user_offline)\n\n    async def handle_connect(self, sid: str, environ: Dict):\n        \"\"\"\u5904\u7406\u8fde\u63a5\u4e8b\u4ef6\"\"\"\n        try:\n            # \u4ece\u73af\u5883\u4e2d\u83b7\u53d6\u7528\u6237\u540d\n            username = environ.get(\"HTTP_USERNAME\")\n            if not username:\n                lprint(f\"\u8fde\u63a5\u5931\u8d25: \u672a\u63d0\u4f9b\u7528\u6237\u540d\")\n                return False\n\n            # \u83b7\u53d6\u7528\u6237\u4fe1\u606f\n            user = await self.user_repo.get_user_by_username(username)\n            if not user:\n                lprint(f\"\u8fde\u63a5\u5931\u8d25: \u7528\u6237 {username} \u4e0d\u5b58\u5728\")\n                return False\n\n            # \u6dfb\u52a0\u8fde\u63a5\n            await self.connection_manager.add_connection(sid, username)\n            lprint(f\"\u7528\u6237 {username} \u5df2\u8fde\u63a5\")\n\n            # \u5e7f\u64ad\u7528\u6237\u5728\u7ebf\u72b6\u6001\n            await self.sio.emit(\"user_online\", {\"username\": username})\n            return True\n\n        except Exception as e:\n            lprint(f\"\u5904\u7406\u8fde\u63a5\u4e8b\u4ef6\u5931\u8d25: {str(e)}\")\n            return False\n\n    async def handle_disconnect(self, sid: str):\n        return\n        \"\"\"\u5904\u7406\u65ad\u5f00\u8fde\u63a5\u4e8b\u4ef6\"\"\"\n        try:\n            # \u83b7\u53d6\u7528\u6237\u540d\n            username = await self.connection_manager.get_user_by_sid(sid)\n            if not username:\n                lprint(f\"\u65ad\u5f00\u8fde\u63a5: \u672a\u627e\u5230\u5173\u8054\u7684\u7528\u6237\u540d, sid={sid}\")\n                return\n            # \u79fb\u9664\u8fde\u63a5\n            await self.connection_manager.remove_connection(sid)\n            lprint(f\"\u7528\u6237 {username} \u5df2\u65ad\u5f00\u8fde\u63a5\")\n\n            # \u5e7f\u64ad\u7528\u6237\u79bb\u7ebf\u72b6\u6001\n            await self.sio.emit(\"user_offline\", {\"username\": username})\n\n        except Exception as e:\n            lprint(f\"\u5904\u7406\u65ad\u5f00\u8fde\u63a5\u4e8b\u4ef6\u5931\u8d25: {str(e)}\")\n\n    async def handle_private_message(self, sid: str, data: Dict):\n        \"\"\"\u5904\u7406\u79c1\u804a\u6d88\u606f\"\"\"\n        try:\n            # \u83b7\u53d6\u53d1\u9001\u8005\u7528\u6237\u540d\n            sender = await self.connection_manager.get_user_by_sid(sid)\n            if not sender:\n                lprint(f\"\u53d1\u9001\u79c1\u804a\u6d88\u606f\u5931\u8d25: \u672a\u627e\u5230\u53d1\u9001\u8005\")\n                return\n\n            # \u521b\u5efa\u6d88\u606f\u5bf9\u8c61\n            message = PrivateMessage(\n                content=data[\"content\"],\n                sender_id=sender,\n                recipient_id=data[\"recipient\"],\n                content_type=MessageContentType.text,\n                status=MessageStatus.sent,\n                extra_data=data.get(\"extra_data\", {})\n            )\n\n            # \u4fdd\u5b58\u6d88\u606f\n            message_id = await self.private_repo.save_message(message)\n            if not message_id:\n                lprint(f\"\u4fdd\u5b58\u79c1\u804a\u6d88\u606f\u5931\u8d25\")\n                return\n\n            # \u53d1\u9001\u6d88\u606f\u7ed9\u63a5\u6536\u8005\n            recipient_sid = await self.connection_manager.get_sid(data[\"recipient\"])\n            if recipient_sid:\n                await self.sio.emit(\n                    \"private_message\",\n                    {\n                        \"id\": message_id,\n                        \"content\": message.content,\n                        \"sender\": sender,\n                        \"recipient\": message.recipient_id,\n                        \"timestamp\": datetime.now().isoformat(),\n                        \"content_type\": message.content_type.value,\n                        \"extra_data\": message.extra_data\n                    },\n                    room=recipient_sid\n                )\n                lprint(f\"\u5df2\u53d1\u9001\u79c1\u804a\u6d88\u606f: {sender} -> {data['recipient']}\")\n\n                # \u66f4\u65b0\u6d88\u606f\u72b6\u6001\u4e3a\u5df2\u53d1\u9001\n                await self.private_repo.update_message_status(\n                    message_id, \n                    MessageStatus.delivered,\n                    MessageType.private_chat\n                )\n            else:\n                lprint(f\"\u63a5\u6536\u8005 {data['recipient']} \u4e0d\u5728\u7ebf\")\n\n        except Exception as e:\n            lprint(f\"\u5904\u7406\u79c1\u804a\u6d88\u606f\u5931\u8d25: {str(e)}\")\n\n    async def handle_group_message(self, sid: str, data: Dict):\n        \"\"\"\u5904\u7406\u7fa4\u804a\u6d88\u606f\"\"\"\n        try:\n            # \u83b7\u53d6\u53d1\u9001\u8005\u7528\u6237\u540d\n            sender = await self.connection_manager.get_user_by_sid(sid)\n            if not sender:\n                lprint(f\"\u53d1\u9001\u7fa4\u804a\u6d88\u606f\u5931\u8d25: \u672a\u627e\u5230\u53d1\u9001\u8005\")\n                return\n\n            # \u521b\u5efa\u6d88\u606f\u5bf9\u8c61\n            message = GroupMessage(\n                content=data[\"content\"],\n                sender_id=sender,\n                group_id=data[\"group_id\"],\n                content_type=MessageContentType.text,\n                status=MessageStatus.sent,\n                extra_data=data.get(\"extra_data\", {})\n            )\n\n            # \u4fdd\u5b58\u6d88\u606f\n            message_id = await self.group_repo.save_message(message)\n            if not message_id:\n                lprint(f\"\u4fdd\u5b58\u7fa4\u804a\u6d88\u606f\u5931\u8d25\")\n                return\n\n            # \u83b7\u53d6\u7fa4\u7ec4\u6210\u5458\n            group = await self.group_repository.get_group(data[\"group_id\"])\n            if not group:\n                lprint(f\"\u7fa4\u7ec4 {data['group_id']} \u4e0d\u5b58\u5728\")\n                return\n\n            # \u53d1\u9001\u6d88\u606f\u7ed9\u7fa4\u7ec4\u6210\u5458\n            delivered_count = 0\n            for member in group.members:\n                member_sid = await self.connection_manager.get_sid(member)\n                if member_sid and member_sid != sid:  # \u4e0d\u53d1\u9001\u7ed9\u53d1\u9001\u8005\u81ea\u5df1\n                    await self.sio.emit(\n                        \"group_message\",\n                        {\n                            \"id\": message_id,\n                            \"content\": message.content,\n                            \"sender\": sender,\n                            \"group_id\": message.group_id,\n                            \"timestamp\": datetime.now().isoformat(),\n                            \"content_type\": message.content_type.value,\n                            \"extra_data\": message.extra_data\n                        },\n                        room=member_sid\n                    )\n                    delivered_count += 1\n\n            # \u66f4\u65b0\u6d88\u606f\u72b6\u6001\n            new_status = MessageStatus.delivered if delivered_count > 0 else MessageStatus.sent\n            await self.group_repo.update_message_status(\n                message_id, \n                new_status,\n                MessageType.group_chat\n            )\n\n            lprint(f\"\u5df2\u53d1\u9001\u7fa4\u804a\u6d88\u606f: {sender} -> \u7fa4\u7ec4 {data['group_id']}, \u9001\u8fbe {delivered_count} \u4eba\")\n\n        except Exception as e:\n            lprint(f\"\u5904\u7406\u7fa4\u804a\u6d88\u606f\u5931\u8d25: {str(e)}\")\n\n    async def handle_user_online(self, data: Dict[str, Any]):\n        \"\"\"\u5904\u7406\u7528\u6237\u4e0a\u7ebf\u4e8b\u4ef6\"\"\"\n        try:\n            username = data.get(\"username\")\n            device_id = data.get(\"device_id\")\n            if not username or not device_id:\n                return\n                \n            # \u66f4\u65b0\u7528\u6237\u72b6\u6001\n            user = await self.user_repo.get_user_by_username(username)\n            if user:\n                # \u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u7528\u6237\u4e0a\u7ebf\u7684\u4e1a\u52a1\u903b\u8f91\n                lprint(f\"\u7528\u6237 {username} (\u8bbe\u5907 {device_id}) \u4e0a\u7ebf\")\n                \n        except Exception as e:\n            lprint(f\"\u5904\u7406\u7528\u6237\u4e0a\u7ebf\u4e8b\u4ef6\u5931\u8d25: {str(e)}\")\n            lprint(traceback.format_exc())\n\n    async def handle_user_offline(self, data: Dict[str, Any]):\n        \"\"\"\u5904\u7406\u7528\u6237\u79bb\u7ebf\u4e8b\u4ef6\"\"\"\n        try:\n            username = data.get(\"username\")\n            if not username:\n                return\n                \n            # \u66f4\u65b0\u7528\u6237\u72b6\u6001\n            user = await self.user_repo.get_user_by_username(username)\n            if user:\n                # \u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u7528\u6237\u79bb\u7ebf\u7684\u4e1a\u52a1\u903b\u8f91\n                lprint(f\"\u7528\u6237 {username} \u79bb\u7ebf\")\n                \n        except Exception as e:\n            lprint(f\"\u5904\u7406\u7528\u6237\u79bb\u7ebf\u4e8b\u4ef6\u5931\u8d25: {str(e)}\")\n            lprint(traceback.format_exc())\n\n    async def get_unread_messages(self, user_id: str, message_type: Optional[MessageType] = None) -> int:\n        \"\"\"\u83b7\u53d6\u7528\u6237\u672a\u8bfb\u6d88\u606f\u6570\u91cf\"\"\"\n        try:\n            return await self.private_repo.get_unread_count(user_id, message_type)\n        except Exception as e:\n            lprint(f\"\u83b7\u53d6\u672a\u8bfb\u6d88\u606f\u6570\u91cf\u5931\u8d25: {str(e)}\")\n            return 0\n\n    async def mark_messages_as_read(self, user_id: str, message_ids: List[str], message_type: MessageType) -> bool:\n        \"\"\"\u6807\u8bb0\u6d88\u606f\u4e3a\u5df2\u8bfb\"\"\"\n        try:\n            success = True\n            for message_id in message_ids:\n                if not await self.private_repo.mark_as_read(message_id, message_type):\n                    success = False\n            return success\n        except Exception as e:\n            lprint(f\"\u6807\u8bb0\u6d88\u606f\u5df2\u8bfb\u5931\u8d25: {str(e)}\")\n            return False\n", 283], "C:\\Users\\qqfeng\\AppData\\Roaming\\Python\\Python311\\site-packages\\typing_extensions.py": ["import abc\nimport collections\nimport collections.abc\nimport contextlib\nimport functools\nimport inspect\nimport operator\nimport sys\nimport types as _types\nimport typing\nimport warnings\n\n__all__ = [\n    # Super-special typing primitives.\n    'Any',\n    'ClassVar',\n    'Concatenate',\n    'Final',\n    'LiteralString',\n    'ParamSpec',\n    'ParamSpecArgs',\n    'ParamSpecKwargs',\n    'Self',\n    'Type',\n    'TypeVar',\n    'TypeVarTuple',\n    'Unpack',\n\n    # ABCs (from collections.abc).\n    'Awaitable',\n    'AsyncIterator',\n    'AsyncIterable',\n    'Coroutine',\n    'AsyncGenerator',\n    'AsyncContextManager',\n    'Buffer',\n    'ChainMap',\n\n    # Concrete collection types.\n    'ContextManager',\n    'Counter',\n    'Deque',\n    'DefaultDict',\n    'NamedTuple',\n    'OrderedDict',\n    'TypedDict',\n\n    # Structural checks, a.k.a. protocols.\n    'SupportsAbs',\n    'SupportsBytes',\n    'SupportsComplex',\n    'SupportsFloat',\n    'SupportsIndex',\n    'SupportsInt',\n    'SupportsRound',\n\n    # One-off things.\n    'Annotated',\n    'assert_never',\n    'assert_type',\n    'clear_overloads',\n    'dataclass_transform',\n    'deprecated',\n    'Doc',\n    'get_overloads',\n    'final',\n    'get_args',\n    'get_origin',\n    'get_original_bases',\n    'get_protocol_members',\n    'get_type_hints',\n    'IntVar',\n    'is_protocol',\n    'is_typeddict',\n    'Literal',\n    'NewType',\n    'overload',\n    'override',\n    'Protocol',\n    'reveal_type',\n    'runtime',\n    'runtime_checkable',\n    'Text',\n    'TypeAlias',\n    'TypeAliasType',\n    'TypeGuard',\n    'TypeIs',\n    'TYPE_CHECKING',\n    'Never',\n    'NoReturn',\n    'ReadOnly',\n    'Required',\n    'NotRequired',\n\n    # Pure aliases, have always been in typing\n    'AbstractSet',\n    'AnyStr',\n    'BinaryIO',\n    'Callable',\n    'Collection',\n    'Container',\n    'Dict',\n    'ForwardRef',\n    'FrozenSet',\n    'Generator',\n    'Generic',\n    'Hashable',\n    'IO',\n    'ItemsView',\n    'Iterable',\n    'Iterator',\n    'KeysView',\n    'List',\n    'Mapping',\n    'MappingView',\n    'Match',\n    'MutableMapping',\n    'MutableSequence',\n    'MutableSet',\n    'NoDefault',\n    'Optional',\n    'Pattern',\n    'Reversible',\n    'Sequence',\n    'Set',\n    'Sized',\n    'TextIO',\n    'Tuple',\n    'Union',\n    'ValuesView',\n    'cast',\n    'no_type_check',\n    'no_type_check_decorator',\n]\n\n# for backward compatibility\nPEP_560 = True\nGenericMeta = type\n_PEP_696_IMPLEMENTED = sys.version_info >= (3, 13, 0, \"beta\")\n\n# The functions below are modified copies of typing internal helpers.\n# They are needed by _ProtocolMeta and they provide support for PEP 646.\n\n\nclass _Sentinel:\n    def __repr__(self):\n        return \"<sentinel>\"\n\n\n_marker = _Sentinel()\n\n\nif sys.version_info >= (3, 10):\n    def _should_collect_from_parameters(t):\n        return isinstance(\n            t, (typing._GenericAlias, _types.GenericAlias, _types.UnionType)\n        )\nelif sys.version_info >= (3, 9):\n    def _should_collect_from_parameters(t):\n        return isinstance(t, (typing._GenericAlias, _types.GenericAlias))\nelse:\n    def _should_collect_from_parameters(t):\n        return isinstance(t, typing._GenericAlias) and not t._special\n\n\nNoReturn = typing.NoReturn\n\n# Some unconstrained type variables.  These are used by the container types.\n# (These are not for export.)\nT = typing.TypeVar('T')  # Any type.\nKT = typing.TypeVar('KT')  # Key type.\nVT = typing.TypeVar('VT')  # Value type.\nT_co = typing.TypeVar('T_co', covariant=True)  # Any type covariant containers.\nT_contra = typing.TypeVar('T_contra', contravariant=True)  # Ditto contravariant.\n\n\nif sys.version_info >= (3, 11):\n    from typing import Any\nelse:\n\n    class _AnyMeta(type):\n        def __instancecheck__(self, obj):\n            if self is Any:\n                raise TypeError(\"typing_extensions.Any cannot be used with isinstance()\")\n            return super().__instancecheck__(obj)\n\n        def __repr__(self):\n            if self is Any:\n                return \"typing_extensions.Any\"\n            return super().__repr__()\n\n    class Any(metaclass=_AnyMeta):\n        \"\"\"Special type indicating an unconstrained type.\n        - Any is compatible with every type.\n        - Any assumed to have all methods.\n        - All values assumed to be instances of Any.\n        Note that all the above statements are true from the point of view of\n        static type checkers. At runtime, Any should not be used with instance\n        checks.\n        \"\"\"\n        def __new__(cls, *args, **kwargs):\n            if cls is Any:\n                raise TypeError(\"Any cannot be instantiated\")\n            return super().__new__(cls, *args, **kwargs)\n\n\nClassVar = typing.ClassVar\n\n\nclass _ExtensionsSpecialForm(typing._SpecialForm, _root=True):\n    def __repr__(self):\n        return 'typing_extensions.' + self._name\n\n\nFinal = typing.Final\n\nif sys.version_info >= (3, 11):\n    final = typing.final\nelse:\n    # @final exists in 3.8+, but we backport it for all versions\n    # before 3.11 to keep support for the __final__ attribute.\n    # See https://bugs.python.org/issue46342\n    def final(f):\n        \"\"\"This decorator can be used to indicate to type checkers that\n        the decorated method cannot be overridden, and decorated class\n        cannot be subclassed. For example:\n\n            class Base:\n                @final\n                def done(self) -> None:\n                    ...\n            class Sub(Base):\n                def done(self) -> None:  # Error reported by type checker\n                    ...\n            @final\n            class Leaf:\n                ...\n            class Other(Leaf):  # Error reported by type checker\n                ...\n\n        There is no runtime checking of these properties. The decorator\n        sets the ``__final__`` attribute to ``True`` on the decorated object\n        to allow runtime introspection.\n        \"\"\"\n        try:\n            f.__final__ = True\n        except (AttributeError, TypeError):\n            # Skip the attribute silently if it is not writable.\n            # AttributeError happens if the object has __slots__ or a\n            # read-only property, TypeError if it's a builtin class.\n            pass\n        return f\n\n\ndef IntVar(name):\n    return typing.TypeVar(name)\n\n\n# A Literal bug was fixed in 3.11.0, 3.10.1 and 3.9.8\nif sys.version_info >= (3, 10, 1):\n    Literal = typing.Literal\nelse:\n    def _flatten_literal_params(parameters):\n        \"\"\"An internal helper for Literal creation: flatten Literals among parameters\"\"\"\n        params = []\n        for p in parameters:\n            if isinstance(p, _LiteralGenericAlias):\n                params.extend(p.__args__)\n            else:\n                params.append(p)\n        return tuple(params)\n\n    def _value_and_type_iter(params):\n        for p in params:\n            yield p, type(p)\n\n    class _LiteralGenericAlias(typing._GenericAlias, _root=True):\n        def __eq__(self, other):\n            if not isinstance(other, _LiteralGenericAlias):\n                return NotImplemented\n            these_args_deduped = set(_value_and_type_iter(self.__args__))\n            other_args_deduped = set(_value_and_type_iter(other.__args__))\n            return these_args_deduped == other_args_deduped\n\n        def __hash__(self):\n            return hash(frozenset(_value_and_type_iter(self.__args__)))\n\n    class _LiteralForm(_ExtensionsSpecialForm, _root=True):\n        def __init__(self, doc: str):\n            self._name = 'Literal'\n            self._doc = self.__doc__ = doc\n\n        def __getitem__(self, parameters):\n            if not isinstance(parameters, tuple):\n                parameters = (parameters,)\n\n            parameters = _flatten_literal_params(parameters)\n\n            val_type_pairs = list(_value_and_type_iter(parameters))\n            try:\n                deduped_pairs = set(val_type_pairs)\n            except TypeError:\n                # unhashable parameters\n                pass\n            else:\n                # similar logic to typing._deduplicate on Python 3.9+\n                if len(deduped_pairs) < len(val_type_pairs):\n                    new_parameters = []\n                    for pair in val_type_pairs:\n                        if pair in deduped_pairs:\n                            new_parameters.append(pair[0])\n                            deduped_pairs.remove(pair)\n                    assert not deduped_pairs, deduped_pairs\n                    parameters = tuple(new_parameters)\n\n            return _LiteralGenericAlias(self, parameters)\n\n    Literal = _LiteralForm(doc=\"\"\"\\\n                           A type that can be used to indicate to type checkers\n                           that the corresponding value has a value literally equivalent\n                           to the provided parameter. For example:\n\n                               var: Literal[4] = 4\n\n                           The type checker understands that 'var' is literally equal to\n                           the value 4 and no other value.\n\n                           Literal[...] cannot be subclassed. There is no runtime\n                           checking verifying that the parameter is actually a value\n                           instead of a type.\"\"\")\n\n\n_overload_dummy = typing._overload_dummy\n\n\nif hasattr(typing, \"get_overloads\"):  # 3.11+\n    overload = typing.overload\n    get_overloads = typing.get_overloads\n    clear_overloads = typing.clear_overloads\nelse:\n    # {module: {qualname: {firstlineno: func}}}\n    _overload_registry = collections.defaultdict(\n        functools.partial(collections.defaultdict, dict)\n    )\n\n    def overload(func):\n        \"\"\"Decorator for overloaded functions/methods.\n\n        In a stub file, place two or more stub definitions for the same\n        function in a row, each decorated with @overload.  For example:\n\n        @overload\n        def utf8(value: None) -> None: ...\n        @overload\n        def utf8(value: bytes) -> bytes: ...\n        @overload\n        def utf8(value: str) -> bytes: ...\n\n        In a non-stub file (i.e. a regular .py file), do the same but\n        follow it with an implementation.  The implementation should *not*\n        be decorated with @overload.  For example:\n\n        @overload\n        def utf8(value: None) -> None: ...\n        @overload\n        def utf8(value: bytes) -> bytes: ...\n        @overload\n        def utf8(value: str) -> bytes: ...\n        def utf8(value):\n            # implementation goes here\n\n        The overloads for a function can be retrieved at runtime using the\n        get_overloads() function.\n        \"\"\"\n        # classmethod and staticmethod\n        f = getattr(func, \"__func__\", func)\n        try:\n            _overload_registry[f.__module__][f.__qualname__][\n                f.__code__.co_firstlineno\n            ] = func\n        except AttributeError:\n            # Not a normal function; ignore.\n            pass\n        return _overload_dummy\n\n    def get_overloads(func):\n        \"\"\"Return all defined overloads for *func* as a sequence.\"\"\"\n        # classmethod and staticmethod\n        f = getattr(func, \"__func__\", func)\n        if f.__module__ not in _overload_registry:\n            return []\n        mod_dict = _overload_registry[f.__module__]\n        if f.__qualname__ not in mod_dict:\n            return []\n        return list(mod_dict[f.__qualname__].values())\n\n    def clear_overloads():\n        \"\"\"Clear all overloads in the registry.\"\"\"\n        _overload_registry.clear()\n\n\n# This is not a real generic class.  Don't use outside annotations.\nType = typing.Type\n\n# Various ABCs mimicking those in collections.abc.\n# A few are simply re-exported for completeness.\nAwaitable = typing.Awaitable\nCoroutine = typing.Coroutine\nAsyncIterable = typing.AsyncIterable\nAsyncIterator = typing.AsyncIterator\nDeque = typing.Deque\nDefaultDict = typing.DefaultDict\nOrderedDict = typing.OrderedDict\nCounter = typing.Counter\nChainMap = typing.ChainMap\nText = typing.Text\nTYPE_CHECKING = typing.TYPE_CHECKING\n\n\nif sys.version_info >= (3, 13, 0, \"beta\"):\n    from typing import AsyncContextManager, AsyncGenerator, ContextManager, Generator\nelse:\n    def _is_dunder(attr):\n        return attr.startswith('__') and attr.endswith('__')\n\n    # Python <3.9 doesn't have typing._SpecialGenericAlias\n    _special_generic_alias_base = getattr(\n        typing, \"_SpecialGenericAlias\", typing._GenericAlias\n    )\n\n    class _SpecialGenericAlias(_special_generic_alias_base, _root=True):\n        def __init__(self, origin, nparams, *, inst=True, name=None, defaults=()):\n            if _special_generic_alias_base is typing._GenericAlias:\n                # Python <3.9\n                self.__origin__ = origin\n                self._nparams = nparams\n                super().__init__(origin, nparams, special=True, inst=inst, name=name)\n            else:\n                # Python >= 3.9\n                super().__init__(origin, nparams, inst=inst, name=name)\n            self._defaults = defaults\n\n        def __setattr__(self, attr, val):\n            allowed_attrs = {'_name', '_inst', '_nparams', '_defaults'}\n            if _special_generic_alias_base is typing._GenericAlias:\n                # Python <3.9\n                allowed_attrs.add(\"__origin__\")\n            if _is_dunder(attr) or attr in allowed_attrs:\n                object.__setattr__(self, attr, val)\n            else:\n                setattr(self.__origin__, attr, val)\n\n        @typing._tp_cache\n        def __getitem__(self, params):\n            if not isinstance(params, tuple):\n                params = (params,)\n            msg = \"Parameters to generic types must be types.\"\n            params = tuple(typing._type_check(p, msg) for p in params)\n            if (\n                self._defaults\n                and len(params) < self._nparams\n                and len(params) + len(self._defaults) >= self._nparams\n            ):\n                params = (*params, *self._defaults[len(params) - self._nparams:])\n            actual_len = len(params)\n\n            if actual_len != self._nparams:\n                if self._defaults:\n                    expected = f\"at least {self._nparams - len(self._defaults)}\"\n                else:\n                    expected = str(self._nparams)\n                if not self._nparams:\n                    raise TypeError(f\"{self} is not a generic class\")\n                raise TypeError(\n                    f\"Too {'many' if actual_len > self._nparams else 'few'}\"\n                    f\" arguments for {self};\"\n                    f\" actual {actual_len}, expected {expected}\"\n                )\n            return self.copy_with(params)\n\n    _NoneType = type(None)\n    Generator = _SpecialGenericAlias(\n        collections.abc.Generator, 3, defaults=(_NoneType, _NoneType)\n    )\n    AsyncGenerator = _SpecialGenericAlias(\n        collections.abc.AsyncGenerator, 2, defaults=(_NoneType,)\n    )\n    ContextManager = _SpecialGenericAlias(\n        contextlib.AbstractContextManager,\n        2,\n        name=\"ContextManager\",\n        defaults=(typing.Optional[bool],)\n    )\n    AsyncContextManager = _SpecialGenericAlias(\n        contextlib.AbstractAsyncContextManager,\n        2,\n        name=\"AsyncContextManager\",\n        defaults=(typing.Optional[bool],)\n    )\n\n\n_PROTO_ALLOWLIST = {\n    'collections.abc': [\n        'Callable', 'Awaitable', 'Iterable', 'Iterator', 'AsyncIterable',\n        'Hashable', 'Sized', 'Container', 'Collection', 'Reversible', 'Buffer',\n    ],\n    'contextlib': ['AbstractContextManager', 'AbstractAsyncContextManager'],\n    'typing_extensions': ['Buffer'],\n}\n\n\n_EXCLUDED_ATTRS = frozenset(typing.EXCLUDED_ATTRIBUTES) | {\n    \"__match_args__\", \"__protocol_attrs__\", \"__non_callable_proto_members__\",\n    \"__final__\",\n}\n\n\ndef _get_protocol_attrs(cls):\n    attrs = set()\n    for base in cls.__mro__[:-1]:  # without object\n        if base.__name__ in {'Protocol', 'Generic'}:\n            continue\n        annotations = getattr(base, '__annotations__', {})\n        for attr in (*base.__dict__, *annotations):\n            if (not attr.startswith('_abc_') and attr not in _EXCLUDED_ATTRS):\n                attrs.add(attr)\n    return attrs\n\n\ndef _caller(depth=2):\n    try:\n        return sys._getframe(depth).f_globals.get('__name__', '__main__')\n    except (AttributeError, ValueError):  # For platforms without _getframe()\n        return None\n\n\n# `__match_args__` attribute was removed from protocol members in 3.13,\n# we want to backport this change to older Python versions.\nif sys.version_info >= (3, 13):\n    Protocol = typing.Protocol\nelse:\n    def _allow_reckless_class_checks(depth=3):\n        \"\"\"Allow instance and class checks for special stdlib modules.\n        The abc and functools modules indiscriminately call isinstance() and\n        issubclass() on the whole MRO of a user class, which may contain protocols.\n        \"\"\"\n        return _caller(depth) in {'abc', 'functools', None}\n\n    def _no_init(self, *args, **kwargs):\n        if type(self)._is_protocol:\n            raise TypeError('Protocols cannot be instantiated')\n\n    def _type_check_issubclass_arg_1(arg):\n        \"\"\"Raise TypeError if `arg` is not an instance of `type`\n        in `issubclass(arg, <protocol>)`.\n\n        In most cases, this is verified by type.__subclasscheck__.\n        Checking it again unnecessarily would slow down issubclass() checks,\n        so, we don't perform this check unless we absolutely have to.\n\n        For various error paths, however,\n        we want to ensure that *this* error message is shown to the user\n        where relevant, rather than a typing.py-specific error message.\n        \"\"\"\n        if not isinstance(arg, type):\n            # Same error message as for issubclass(1, int).\n            raise TypeError('issubclass() arg 1 must be a class')\n\n    # Inheriting from typing._ProtocolMeta isn't actually desirable,\n    # but is necessary to allow typing.Protocol and typing_extensions.Protocol\n    # to mix without getting TypeErrors about \"metaclass conflict\"\n    class _ProtocolMeta(type(typing.Protocol)):\n        # This metaclass is somewhat unfortunate,\n        # but is necessary for several reasons...\n        #\n        # NOTE: DO NOT call super() in any methods in this class\n        # That would call the methods on typing._ProtocolMeta on Python 3.8-3.11\n        # and those are slow\n        def __new__(mcls, name, bases, namespace, **kwargs):\n            if name == \"Protocol\" and len(bases) < 2:\n                pass\n            elif {Protocol, typing.Protocol} & set(bases):\n                for base in bases:\n                    if not (\n                        base in {object, typing.Generic, Protocol, typing.Protocol}\n                        or base.__name__ in _PROTO_ALLOWLIST.get(base.__module__, [])\n                        or is_protocol(base)\n                    ):\n                        raise TypeError(\n                            f\"Protocols can only inherit from other protocols, \"\n                            f\"got {base!r}\"\n                        )\n            return abc.ABCMeta.__new__(mcls, name, bases, namespace, **kwargs)\n\n        def __init__(cls, *args, **kwargs):\n            abc.ABCMeta.__init__(cls, *args, **kwargs)\n            if getattr(cls, \"_is_protocol\", False):\n                cls.__protocol_attrs__ = _get_protocol_attrs(cls)\n\n        def __subclasscheck__(cls, other):\n            if cls is Protocol:\n                return type.__subclasscheck__(cls, other)\n            if (\n                getattr(cls, '_is_protocol', False)\n                and not _allow_reckless_class_checks()\n            ):\n                if not getattr(cls, '_is_runtime_protocol', False):\n                    _type_check_issubclass_arg_1(other)\n                    raise TypeError(\n                        \"Instance and class checks can only be used with \"\n                        \"@runtime_checkable protocols\"\n                    )\n                if (\n                    # this attribute is set by @runtime_checkable:\n                    cls.__non_callable_proto_members__\n                    and cls.__dict__.get(\"__subclasshook__\") is _proto_hook\n                ):\n                    _type_check_issubclass_arg_1(other)\n                    non_method_attrs = sorted(cls.__non_callable_proto_members__)\n                    raise TypeError(\n                        \"Protocols with non-method members don't support issubclass().\"\n                        f\" Non-method members: {str(non_method_attrs)[1:-1]}.\"\n                    )\n            return abc.ABCMeta.__subclasscheck__(cls, other)\n\n        def __instancecheck__(cls, instance):\n            # We need this method for situations where attributes are\n            # assigned in __init__.\n            if cls is Protocol:\n                return type.__instancecheck__(cls, instance)\n            if not getattr(cls, \"_is_protocol\", False):\n                # i.e., it's a concrete subclass of a protocol\n                return abc.ABCMeta.__instancecheck__(cls, instance)\n\n            if (\n                not getattr(cls, '_is_runtime_protocol', False) and\n                not _allow_reckless_class_checks()\n            ):\n                raise TypeError(\"Instance and class checks can only be used with\"\n                                \" @runtime_checkable protocols\")\n\n            if abc.ABCMeta.__instancecheck__(cls, instance):\n                return True\n\n            for attr in cls.__protocol_attrs__:\n                try:\n                    val = inspect.getattr_static(instance, attr)\n                except AttributeError:\n                    break\n                # this attribute is set by @runtime_checkable:\n                if val is None and attr not in cls.__non_callable_proto_members__:\n                    break\n            else:\n                return True\n\n            return False\n\n        def __eq__(cls, other):\n            # Hack so that typing.Generic.__class_getitem__\n            # treats typing_extensions.Protocol\n            # as equivalent to typing.Protocol\n            if abc.ABCMeta.__eq__(cls, other) is True:\n                return True\n            return cls is Protocol and other is typing.Protocol\n\n        # This has to be defined, or the abc-module cache\n        # complains about classes with this metaclass being unhashable,\n        # if we define only __eq__!\n        def __hash__(cls) -> int:\n            return type.__hash__(cls)\n\n    @classmethod\n    def _proto_hook(cls, other):\n        if not cls.__dict__.get('_is_protocol', False):\n            return NotImplemented\n\n        for attr in cls.__protocol_attrs__:\n            for base in other.__mro__:\n                # Check if the members appears in the class dictionary...\n                if attr in base.__dict__:\n                    if base.__dict__[attr] is None:\n                        return NotImplemented\n                    break\n\n                # ...or in annotations, if it is a sub-protocol.\n                annotations = getattr(base, '__annotations__', {})\n                if (\n                    isinstance(annotations, collections.abc.Mapping)\n                    and attr in annotations\n                    and is_protocol(other)\n                ):\n                    break\n            else:\n                return NotImplemented\n        return True\n\n    class Protocol(typing.Generic, metaclass=_ProtocolMeta):\n        __doc__ = typing.Protocol.__doc__\n        __slots__ = ()\n        _is_protocol = True\n        _is_runtime_protocol = False\n\n        def __init_subclass__(cls, *args, **kwargs):\n            super().__init_subclass__(*args, **kwargs)\n\n            # Determine if this is a protocol or a concrete subclass.\n            if not cls.__dict__.get('_is_protocol', False):\n                cls._is_protocol = any(b is Protocol for b in cls.__bases__)\n\n            # Set (or override) the protocol subclass hook.\n            if '__subclasshook__' not in cls.__dict__:\n                cls.__subclasshook__ = _proto_hook\n\n            # Prohibit instantiation for protocol classes\n            if cls._is_protocol and cls.__init__ is Protocol.__init__:\n                cls.__init__ = _no_init\n\n\nif sys.version_info >= (3, 13):\n    runtime_checkable = typing.runtime_checkable\nelse:\n    def runtime_checkable(cls):\n        \"\"\"Mark a protocol class as a runtime protocol.\n\n        Such protocol can be used with isinstance() and issubclass().\n        Raise TypeError if applied to a non-protocol class.\n        This allows a simple-minded structural check very similar to\n        one trick ponies in collections.abc such as Iterable.\n\n        For example::\n\n            @runtime_checkable\n            class Closable(Protocol):\n                def close(self): ...\n\n            assert isinstance(open('/some/file'), Closable)\n\n        Warning: this will check only the presence of the required methods,\n        not their type signatures!\n        \"\"\"\n        if not issubclass(cls, typing.Generic) or not getattr(cls, '_is_protocol', False):\n            raise TypeError(f'@runtime_checkable can be only applied to protocol classes,'\n                            f' got {cls!r}')\n        cls._is_runtime_protocol = True\n\n        # typing.Protocol classes on <=3.11 break if we execute this block,\n        # because typing.Protocol classes on <=3.11 don't have a\n        # `__protocol_attrs__` attribute, and this block relies on the\n        # `__protocol_attrs__` attribute. Meanwhile, typing.Protocol classes on 3.12.2+\n        # break if we *don't* execute this block, because *they* assume that all\n        # protocol classes have a `__non_callable_proto_members__` attribute\n        # (which this block sets)\n        if isinstance(cls, _ProtocolMeta) or sys.version_info >= (3, 12, 2):\n            # PEP 544 prohibits using issubclass()\n            # with protocols that have non-method members.\n            # See gh-113320 for why we compute this attribute here,\n            # rather than in `_ProtocolMeta.__init__`\n            cls.__non_callable_proto_members__ = set()\n            for attr in cls.__protocol_attrs__:\n                try:\n                    is_callable = callable(getattr(cls, attr, None))\n                except Exception as e:\n                    raise TypeError(\n                        f\"Failed to determine whether protocol member {attr!r} \"\n                        \"is a method member\"\n                    ) from e\n                else:\n                    if not is_callable:\n                        cls.__non_callable_proto_members__.add(attr)\n\n        return cls\n\n\n# The \"runtime\" alias exists for backwards compatibility.\nruntime = runtime_checkable\n\n\n# Our version of runtime-checkable protocols is faster on Python 3.8-3.11\nif sys.version_info >= (3, 12):\n    SupportsInt = typing.SupportsInt\n    SupportsFloat = typing.SupportsFloat\n    SupportsComplex = typing.SupportsComplex\n    SupportsBytes = typing.SupportsBytes\n    SupportsIndex = typing.SupportsIndex\n    SupportsAbs = typing.SupportsAbs\n    SupportsRound = typing.SupportsRound\nelse:\n    @runtime_checkable\n    class SupportsInt(Protocol):\n        \"\"\"An ABC with one abstract method __int__.\"\"\"\n        __slots__ = ()\n\n        @abc.abstractmethod\n        def __int__(self) -> int:\n            pass\n\n    @runtime_checkable\n    class SupportsFloat(Protocol):\n        \"\"\"An ABC with one abstract method __float__.\"\"\"\n        __slots__ = ()\n\n        @abc.abstractmethod\n        def __float__(self) -> float:\n            pass\n\n    @runtime_checkable\n    class SupportsComplex(Protocol):\n        \"\"\"An ABC with one abstract method __complex__.\"\"\"\n        __slots__ = ()\n\n        @abc.abstractmethod\n        def __complex__(self) -> complex:\n            pass\n\n    @runtime_checkable\n    class SupportsBytes(Protocol):\n        \"\"\"An ABC with one abstract method __bytes__.\"\"\"\n        __slots__ = ()\n\n        @abc.abstractmethod\n        def __bytes__(self) -> bytes:\n            pass\n\n    @runtime_checkable\n    class SupportsIndex(Protocol):\n        __slots__ = ()\n\n        @abc.abstractmethod\n        def __index__(self) -> int:\n            pass\n\n    @runtime_checkable\n    class SupportsAbs(Protocol[T_co]):\n        \"\"\"\n        An ABC with one abstract method __abs__ that is covariant in its return type.\n        \"\"\"\n        __slots__ = ()\n\n        @abc.abstractmethod\n        def __abs__(self) -> T_co:\n            pass\n\n    @runtime_checkable\n    class SupportsRound(Protocol[T_co]):\n        \"\"\"\n        An ABC with one abstract method __round__ that is covariant in its return type.\n        \"\"\"\n        __slots__ = ()\n\n        @abc.abstractmethod\n        def __round__(self, ndigits: int = 0) -> T_co:\n            pass\n\n\ndef _ensure_subclassable(mro_entries):\n    def inner(func):\n        if sys.implementation.name == \"pypy\" and sys.version_info < (3, 9):\n            cls_dict = {\n                \"__call__\": staticmethod(func),\n                \"__mro_entries__\": staticmethod(mro_entries)\n            }\n            t = type(func.__name__, (), cls_dict)\n            return functools.update_wrapper(t(), func)\n        else:\n            func.__mro_entries__ = mro_entries\n            return func\n    return inner\n\n\n# Update this to something like >=3.13.0b1 if and when\n# PEP 728 is implemented in CPython\n_PEP_728_IMPLEMENTED = False\n\nif _PEP_728_IMPLEMENTED:\n    # The standard library TypedDict in Python 3.8 does not store runtime information\n    # about which (if any) keys are optional.  See https://bugs.python.org/issue38834\n    # The standard library TypedDict in Python 3.9.0/1 does not honour the \"total\"\n    # keyword with old-style TypedDict().  See https://bugs.python.org/issue42059\n    # The standard library TypedDict below Python 3.11 does not store runtime\n    # information about optional and required keys when using Required or NotRequired.\n    # Generic TypedDicts are also impossible using typing.TypedDict on Python <3.11.\n    # Aaaand on 3.12 we add __orig_bases__ to TypedDict\n    # to enable better runtime introspection.\n    # On 3.13 we deprecate some odd ways of creating TypedDicts.\n    # Also on 3.13, PEP 705 adds the ReadOnly[] qualifier.\n    # PEP 728 (still pending) makes more changes.\n    TypedDict = typing.TypedDict\n    _TypedDictMeta = typing._TypedDictMeta\n    is_typeddict = typing.is_typeddict\nelse:\n    # 3.10.0 and later\n    _TAKES_MODULE = \"module\" in inspect.signature(typing._type_check).parameters\n\n    def _get_typeddict_qualifiers(annotation_type):\n        while True:\n            annotation_origin = get_origin(annotation_type)\n            if annotation_origin is Annotated:\n                annotation_args = get_args(annotation_type)\n                if annotation_args:\n                    annotation_type = annotation_args[0]\n                else:\n                    break\n            elif annotation_origin is Required:\n                yield Required\n                annotation_type, = get_args(annotation_type)\n            elif annotation_origin is NotRequired:\n                yield NotRequired\n                annotation_type, = get_args(annotation_type)\n            elif annotation_origin is ReadOnly:\n                yield ReadOnly\n                annotation_type, = get_args(annotation_type)\n            else:\n                break\n\n    class _TypedDictMeta(type):\n        def __new__(cls, name, bases, ns, *, total=True, closed=False):\n            \"\"\"Create new typed dict class object.\n\n            This method is called when TypedDict is subclassed,\n            or when TypedDict is instantiated. This way\n            TypedDict supports all three syntax forms described in its docstring.\n            Subclasses and instances of TypedDict return actual dictionaries.\n            \"\"\"\n            for base in bases:\n                if type(base) is not _TypedDictMeta and base is not typing.Generic:\n                    raise TypeError('cannot inherit from both a TypedDict type '\n                                    'and a non-TypedDict base class')\n\n            if any(issubclass(b, typing.Generic) for b in bases):\n                generic_base = (typing.Generic,)\n            else:\n                generic_base = ()\n\n            # typing.py generally doesn't let you inherit from plain Generic, unless\n            # the name of the class happens to be \"Protocol\"\n            tp_dict = type.__new__(_TypedDictMeta, \"Protocol\", (*generic_base, dict), ns)\n            tp_dict.__name__ = name\n            if tp_dict.__qualname__ == \"Protocol\":\n                tp_dict.__qualname__ = name\n\n            if not hasattr(tp_dict, '__orig_bases__'):\n                tp_dict.__orig_bases__ = bases\n\n            annotations = {}\n            if \"__annotations__\" in ns:\n                own_annotations = ns[\"__annotations__\"]\n            elif \"__annotate__\" in ns:\n                # TODO: Use inspect.VALUE here, and make the annotations lazily evaluated\n                own_annotations = ns[\"__annotate__\"](1)\n            else:\n                own_annotations = {}\n            msg = \"TypedDict('Name', {f0: t0, f1: t1, ...}); each t must be a type\"\n            if _TAKES_MODULE:\n                own_annotations = {\n                    n: typing._type_check(tp, msg, module=tp_dict.__module__)\n                    for n, tp in own_annotations.items()\n                }\n            else:\n                own_annotations = {\n                    n: typing._type_check(tp, msg)\n                    for n, tp in own_annotations.items()\n                }\n            required_keys = set()\n            optional_keys = set()\n            readonly_keys = set()\n            mutable_keys = set()\n            extra_items_type = None\n\n            for base in bases:\n                base_dict = base.__dict__\n\n                annotations.update(base_dict.get('__annotations__', {}))\n                required_keys.update(base_dict.get('__required_keys__', ()))\n                optional_keys.update(base_dict.get('__optional_keys__', ()))\n                readonly_keys.update(base_dict.get('__readonly_keys__', ()))\n                mutable_keys.update(base_dict.get('__mutable_keys__', ()))\n                base_extra_items_type = base_dict.get('__extra_items__', None)\n                if base_extra_items_type is not None:\n                    extra_items_type = base_extra_items_type\n\n            if closed and extra_items_type is None:\n                extra_items_type = Never\n            if closed and \"__extra_items__\" in own_annotations:\n                annotation_type = own_annotations.pop(\"__extra_items__\")\n                qualifiers = set(_get_typeddict_qualifiers(annotation_type))\n                if Required in qualifiers:\n                    raise TypeError(\n                        \"Special key __extra_items__ does not support \"\n                        \"Required\"\n                    )\n                if NotRequired in qualifiers:\n                    raise TypeError(\n                        \"Special key __extra_items__ does not support \"\n                        \"NotRequired\"\n                    )\n                extra_items_type = annotation_type\n\n            annotations.update(own_annotations)\n            for annotation_key, annotation_type in own_annotations.items():\n                qualifiers = set(_get_typeddict_qualifiers(annotation_type))\n\n                if Required in qualifiers:\n                    required_keys.add(annotation_key)\n                elif NotRequired in qualifiers:\n                    optional_keys.add(annotation_key)\n                elif total:\n                    required_keys.add(annotation_key)\n                else:\n                    optional_keys.add(annotation_key)\n                if ReadOnly in qualifiers:\n                    mutable_keys.discard(annotation_key)\n                    readonly_keys.add(annotation_key)\n                else:\n                    mutable_keys.add(annotation_key)\n                    readonly_keys.discard(annotation_key)\n\n            tp_dict.__annotations__ = annotations\n            tp_dict.__required_keys__ = frozenset(required_keys)\n            tp_dict.__optional_keys__ = frozenset(optional_keys)\n            tp_dict.__readonly_keys__ = frozenset(readonly_keys)\n            tp_dict.__mutable_keys__ = frozenset(mutable_keys)\n            if not hasattr(tp_dict, '__total__'):\n                tp_dict.__total__ = total\n            tp_dict.__closed__ = closed\n            tp_dict.__extra_items__ = extra_items_type\n            return tp_dict\n\n        __call__ = dict  # static method\n\n        def __subclasscheck__(cls, other):\n            # Typed dicts are only for static structural subtyping.\n            raise TypeError('TypedDict does not support instance and class checks')\n\n        __instancecheck__ = __subclasscheck__\n\n    _TypedDict = type.__new__(_TypedDictMeta, 'TypedDict', (), {})\n\n    @_ensure_subclassable(lambda bases: (_TypedDict,))\n    def TypedDict(typename, fields=_marker, /, *, total=True, closed=False, **kwargs):\n        \"\"\"A simple typed namespace. At runtime it is equivalent to a plain dict.\n\n        TypedDict creates a dictionary type such that a type checker will expect all\n        instances to have a certain set of keys, where each key is\n        associated with a value of a consistent type. This expectation\n        is not checked at runtime.\n\n        Usage::\n\n            class Point2D(TypedDict):\n                x: int\n                y: int\n                label: str\n\n            a: Point2D = {'x': 1, 'y': 2, 'label': 'good'}  # OK\n            b: Point2D = {'z': 3, 'label': 'bad'}           # Fails type check\n\n            assert Point2D(x=1, y=2, label='first') == dict(x=1, y=2, label='first')\n\n        The type info can be accessed via the Point2D.__annotations__ dict, and\n        the Point2D.__required_keys__ and Point2D.__optional_keys__ frozensets.\n        TypedDict supports an additional equivalent form::\n\n            Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': str})\n\n        By default, all keys must be present in a TypedDict. It is possible\n        to override this by specifying totality::\n\n            class Point2D(TypedDict, total=False):\n                x: int\n                y: int\n\n        This means that a Point2D TypedDict can have any of the keys omitted. A type\n        checker is only expected to support a literal False or True as the value of\n        the total argument. True is the default, and makes all items defined in the\n        class body be required.\n\n        The Required and NotRequired special forms can also be used to mark\n        individual keys as being required or not required::\n\n            class Point2D(TypedDict):\n                x: int  # the \"x\" key must always be present (Required is the default)\n                y: NotRequired[int]  # the \"y\" key can be omitted\n\n        See PEP 655 for more details on Required and NotRequired.\n        \"\"\"\n        if fields is _marker or fields is None:\n            if fields is _marker:\n                deprecated_thing = \"Failing to pass a value for the 'fields' parameter\"\n            else:\n                deprecated_thing = \"Passing `None` as the 'fields' parameter\"\n\n            example = f\"`{typename} = TypedDict({typename!r}, {{}})`\"\n            deprecation_msg = (\n                f\"{deprecated_thing} is deprecated and will be disallowed in \"\n                \"Python 3.15. To create a TypedDict class with 0 fields \"\n                \"using the functional syntax, pass an empty dictionary, e.g. \"\n            ) + example + \".\"\n            warnings.warn(deprecation_msg, DeprecationWarning, stacklevel=2)\n            if closed is not False and closed is not True:\n                kwargs[\"closed\"] = closed\n                closed = False\n            fields = kwargs\n        elif kwargs:\n            raise TypeError(\"TypedDict takes either a dict or keyword arguments,\"\n                            \" but not both\")\n        if kwargs:\n            if sys.version_info >= (3, 13):\n                raise TypeError(\"TypedDict takes no keyword arguments\")\n            warnings.warn(\n                \"The kwargs-based syntax for TypedDict definitions is deprecated \"\n                \"in Python 3.11, will be removed in Python 3.13, and may not be \"\n                \"understood by third-party type checkers.\",\n                DeprecationWarning,\n                stacklevel=2,\n            )\n\n        ns = {'__annotations__': dict(fields)}\n        module = _caller()\n        if module is not None:\n            # Setting correct module is necessary to make typed dict classes pickleable.\n            ns['__module__'] = module\n\n        td = _TypedDictMeta(typename, (), ns, total=total, closed=closed)\n        td.__orig_bases__ = (TypedDict,)\n        return td\n\n    if hasattr(typing, \"_TypedDictMeta\"):\n        _TYPEDDICT_TYPES = (typing._TypedDictMeta, _TypedDictMeta)\n    else:\n        _TYPEDDICT_TYPES = (_TypedDictMeta,)\n\n    def is_typeddict(tp):\n        \"\"\"Check if an annotation is a TypedDict class\n\n        For example::\n            class Film(TypedDict):\n                title: str\n                year: int\n\n            is_typeddict(Film)  # => True\n            is_typeddict(Union[list, str])  # => False\n        \"\"\"\n        # On 3.8, this would otherwise return True\n        if hasattr(typing, \"TypedDict\") and tp is typing.TypedDict:\n            return False\n        return isinstance(tp, _TYPEDDICT_TYPES)\n\n\nif hasattr(typing, \"assert_type\"):\n    assert_type = typing.assert_type\n\nelse:\n    def assert_type(val, typ, /):\n        \"\"\"Assert (to the type checker) that the value is of the given type.\n\n        When the type checker encounters a call to assert_type(), it\n        emits an error if the value is not of the specified type::\n\n            def greet(name: str) -> None:\n                assert_type(name, str)  # ok\n                assert_type(name, int)  # type checker error\n\n        At runtime this returns the first argument unchanged and otherwise\n        does nothing.\n        \"\"\"\n        return val\n\n\nif hasattr(typing, \"ReadOnly\"):  # 3.13+\n    get_type_hints = typing.get_type_hints\nelse:  # <=3.13\n    # replaces _strip_annotations()\n    def _strip_extras(t):\n        \"\"\"Strips Annotated, Required and NotRequired from a given type.\"\"\"\n        if isinstance(t, _AnnotatedAlias):\n            return _strip_extras(t.__origin__)\n        if hasattr(t, \"__origin__\") and t.__origin__ in (Required, NotRequired, ReadOnly):\n            return _strip_extras(t.__args__[0])\n        if isinstance(t, typing._GenericAlias):\n            stripped_args = tuple(_strip_extras(a) for a in t.__args__)\n            if stripped_args == t.__args__:\n                return t\n            return t.copy_with(stripped_args)\n        if hasattr(_types, \"GenericAlias\") and isinstance(t, _types.GenericAlias):\n            stripped_args = tuple(_strip_extras(a) for a in t.__args__)\n            if stripped_args == t.__args__:\n                return t\n            return _types.GenericAlias(t.__origin__, stripped_args)\n        if hasattr(_types, \"UnionType\") and isinstance(t, _types.UnionType):\n            stripped_args = tuple(_strip_extras(a) for a in t.__args__)\n            if stripped_args == t.__args__:\n                return t\n            return functools.reduce(operator.or_, stripped_args)\n\n        return t\n\n    def get_type_hints(obj, globalns=None, localns=None, include_extras=False):\n        \"\"\"Return type hints for an object.\n\n        This is often the same as obj.__annotations__, but it handles\n        forward references encoded as string literals, adds Optional[t] if a\n        default value equal to None is set and recursively replaces all\n        'Annotated[T, ...]', 'Required[T]' or 'NotRequired[T]' with 'T'\n        (unless 'include_extras=True').\n\n        The argument may be a module, class, method, or function. The annotations\n        are returned as a dictionary. For classes, annotations include also\n        inherited members.\n\n        TypeError is raised if the argument is not of a type that can contain\n        annotations, and an empty dictionary is returned if no annotations are\n        present.\n\n        BEWARE -- the behavior of globalns and localns is counterintuitive\n        (unless you are familiar with how eval() and exec() work).  The\n        search order is locals first, then globals.\n\n        - If no dict arguments are passed, an attempt is made to use the\n          globals from obj (or the respective module's globals for classes),\n          and these are also used as the locals.  If the object does not appear\n          to have globals, an empty dictionary is used.\n\n        - If one dict argument is passed, it is used for both globals and\n          locals.\n\n        - If two dict arguments are passed, they specify globals and\n          locals, respectively.\n        \"\"\"\n        if hasattr(typing, \"Annotated\"):  # 3.9+\n            hint = typing.get_type_hints(\n                obj, globalns=globalns, localns=localns, include_extras=True\n            )\n        else:  # 3.8\n            hint = typing.get_type_hints(obj, globalns=globalns, localns=localns)\n        if include_extras:\n            return hint\n        return {k: _strip_extras(t) for k, t in hint.items()}\n\n\n# Python 3.9+ has PEP 593 (Annotated)\nif hasattr(typing, 'Annotated'):\n    Annotated = typing.Annotated\n    # Not exported and not a public API, but needed for get_origin() and get_args()\n    # to work.\n    _AnnotatedAlias = typing._AnnotatedAlias\n# 3.8\nelse:\n    class _AnnotatedAlias(typing._GenericAlias, _root=True):\n        \"\"\"Runtime representation of an annotated type.\n\n        At its core 'Annotated[t, dec1, dec2, ...]' is an alias for the type 't'\n        with extra annotations. The alias behaves like a normal typing alias,\n        instantiating is the same as instantiating the underlying type, binding\n        it to types is also the same.\n        \"\"\"\n        def __init__(self, origin, metadata):\n            if isinstance(origin, _AnnotatedAlias):\n                metadata = origin.__metadata__ + metadata\n                origin = origin.__origin__\n            super().__init__(origin, origin)\n            self.__metadata__ = metadata\n\n        def copy_with(self, params):\n            assert len(params) == 1\n            new_type = params[0]\n            return _AnnotatedAlias(new_type, self.__metadata__)\n\n        def __repr__(self):\n            return (f\"typing_extensions.Annotated[{typing._type_repr(self.__origin__)}, \"\n                    f\"{', '.join(repr(a) for a in self.__metadata__)}]\")\n\n        def __reduce__(self):\n            return operator.getitem, (\n                Annotated, (self.__origin__, *self.__metadata__)\n            )\n\n        def __eq__(self, other):\n            if not isinstance(other, _AnnotatedAlias):\n                return NotImplemented\n            if self.__origin__ != other.__origin__:\n                return False\n            return self.__metadata__ == other.__metadata__\n\n        def __hash__(self):\n            return hash((self.__origin__, self.__metadata__))\n\n    class Annotated:\n        \"\"\"Add context specific metadata to a type.\n\n        Example: Annotated[int, runtime_check.Unsigned] indicates to the\n        hypothetical runtime_check module that this type is an unsigned int.\n        Every other consumer of this type can ignore this metadata and treat\n        this type as int.\n\n        The first argument to Annotated must be a valid type (and will be in\n        the __origin__ field), the remaining arguments are kept as a tuple in\n        the __extra__ field.\n\n        Details:\n\n        - It's an error to call `Annotated` with less than two arguments.\n        - Nested Annotated are flattened::\n\n            Annotated[Annotated[T, Ann1, Ann2], Ann3] == Annotated[T, Ann1, Ann2, Ann3]\n\n        - Instantiating an annotated type is equivalent to instantiating the\n        underlying type::\n\n            Annotated[C, Ann1](5) == C(5)\n\n        - Annotated can be used as a generic type alias::\n\n            Optimized = Annotated[T, runtime.Optimize()]\n            Optimized[int] == Annotated[int, runtime.Optimize()]\n\n            OptimizedList = Annotated[List[T], runtime.Optimize()]\n            OptimizedList[int] == Annotated[List[int], runtime.Optimize()]\n        \"\"\"\n\n        __slots__ = ()\n\n        def __new__(cls, *args, **kwargs):\n            raise TypeError(\"Type Annotated cannot be instantiated.\")\n\n        @typing._tp_cache\n        def __class_getitem__(cls, params):\n            if not isinstance(params, tuple) or len(params) < 2:\n                raise TypeError(\"Annotated[...] should be used \"\n                                \"with at least two arguments (a type and an \"\n                                \"annotation).\")\n            allowed_special_forms = (ClassVar, Final)\n            if get_origin(params[0]) in allowed_special_forms:\n                origin = params[0]\n            else:\n                msg = \"Annotated[t, ...]: t must be a type.\"\n                origin = typing._type_check(params[0], msg)\n            metadata = tuple(params[1:])\n            return _AnnotatedAlias(origin, metadata)\n\n        def __init_subclass__(cls, *args, **kwargs):\n            raise TypeError(\n                f\"Cannot subclass {cls.__module__}.Annotated\"\n            )\n\n# Python 3.8 has get_origin() and get_args() but those implementations aren't\n# Annotated-aware, so we can't use those. Python 3.9's versions don't support\n# ParamSpecArgs and ParamSpecKwargs, so only Python 3.10's versions will do.\nif sys.version_info[:2] >= (3, 10):\n    get_origin = typing.get_origin\n    get_args = typing.get_args\n# 3.8-3.9\nelse:\n    try:\n        # 3.9+\n        from typing import _BaseGenericAlias\n    except ImportError:\n        _BaseGenericAlias = typing._GenericAlias\n    try:\n        # 3.9+\n        from typing import GenericAlias as _typing_GenericAlias\n    except ImportError:\n        _typing_GenericAlias = typing._GenericAlias\n\n    def get_origin(tp):\n        \"\"\"Get the unsubscripted version of a type.\n\n        This supports generic types, Callable, Tuple, Union, Literal, Final, ClassVar\n        and Annotated. Return None for unsupported types. Examples::\n\n            get_origin(Literal[42]) is Literal\n            get_origin(int) is None\n            get_origin(ClassVar[int]) is ClassVar\n            get_origin(Generic) is Generic\n            get_origin(Generic[T]) is Generic\n            get_origin(Union[T, int]) is Union\n            get_origin(List[Tuple[T, T]][int]) == list\n            get_origin(P.args) is P\n        \"\"\"\n        if isinstance(tp, _AnnotatedAlias):\n            return Annotated\n        if isinstance(tp, (typing._GenericAlias, _typing_GenericAlias, _BaseGenericAlias,\n                           ParamSpecArgs, ParamSpecKwargs)):\n            return tp.__origin__\n        if tp is typing.Generic:\n            return typing.Generic\n        return None\n\n    def get_args(tp):\n        \"\"\"Get type arguments with all substitutions performed.\n\n        For unions, basic simplifications used by Union constructor are performed.\n        Examples::\n            get_args(Dict[str, int]) == (str, int)\n            get_args(int) == ()\n            get_args(Union[int, Union[T, int], str][int]) == (int, str)\n            get_args(Union[int, Tuple[T, int]][str]) == (int, Tuple[str, int])\n            get_args(Callable[[], T][int]) == ([], int)\n        \"\"\"\n        if isinstance(tp, _AnnotatedAlias):\n            return (tp.__origin__, *tp.__metadata__)\n        if isinstance(tp, (typing._GenericAlias, _typing_GenericAlias)):\n            if getattr(tp, \"_special\", False):\n                return ()\n            res = tp.__args__\n            if get_origin(tp) is collections.abc.Callable and res[0] is not Ellipsis:\n                res = (list(res[:-1]), res[-1])\n            return res\n        return ()\n\n\n# 3.10+\nif hasattr(typing, 'TypeAlias'):\n    TypeAlias = typing.TypeAlias\n# 3.9\nelif sys.version_info[:2] >= (3, 9):\n    @_ExtensionsSpecialForm\n    def TypeAlias(self, parameters):\n        \"\"\"Special marker indicating that an assignment should\n        be recognized as a proper type alias definition by type\n        checkers.\n\n        For example::\n\n            Predicate: TypeAlias = Callable[..., bool]\n\n        It's invalid when used anywhere except as in the example above.\n        \"\"\"\n        raise TypeError(f\"{self} is not subscriptable\")\n# 3.8\nelse:\n    TypeAlias = _ExtensionsSpecialForm(\n        'TypeAlias',\n        doc=\"\"\"Special marker indicating that an assignment should\n        be recognized as a proper type alias definition by type\n        checkers.\n\n        For example::\n\n            Predicate: TypeAlias = Callable[..., bool]\n\n        It's invalid when used anywhere except as in the example\n        above.\"\"\"\n    )\n\n\nif hasattr(typing, \"NoDefault\"):\n    NoDefault = typing.NoDefault\nelse:\n    class NoDefaultTypeMeta(type):\n        def __setattr__(cls, attr, value):\n            # TypeError is consistent with the behavior of NoneType\n            raise TypeError(\n                f\"cannot set {attr!r} attribute of immutable type {cls.__name__!r}\"\n            )\n\n    class NoDefaultType(metaclass=NoDefaultTypeMeta):\n        \"\"\"The type of the NoDefault singleton.\"\"\"\n\n        __slots__ = ()\n\n        def __new__(cls):\n            return globals().get(\"NoDefault\") or object.__new__(cls)\n\n        def __repr__(self):\n            return \"typing_extensions.NoDefault\"\n\n        def __reduce__(self):\n            return \"NoDefault\"\n\n    NoDefault = NoDefaultType()\n    del NoDefaultType, NoDefaultTypeMeta\n\n\ndef _set_default(type_param, default):\n    type_param.has_default = lambda: default is not NoDefault\n    type_param.__default__ = default\n\n\ndef _set_module(typevarlike):\n    # for pickling:\n    def_mod = _caller(depth=3)\n    if def_mod != 'typing_extensions':\n        typevarlike.__module__ = def_mod\n\n\nclass _DefaultMixin:\n    \"\"\"Mixin for TypeVarLike defaults.\"\"\"\n\n    __slots__ = ()\n    __init__ = _set_default\n\n\n# Classes using this metaclass must provide a _backported_typevarlike ClassVar\nclass _TypeVarLikeMeta(type):\n    def __instancecheck__(cls, __instance: Any) -> bool:\n        return isinstance(__instance, cls._backported_typevarlike)\n\n\nif _PEP_696_IMPLEMENTED:\n    from typing import TypeVar\nelse:\n    # Add default and infer_variance parameters from PEP 696 and 695\n    class TypeVar(metaclass=_TypeVarLikeMeta):\n        \"\"\"Type variable.\"\"\"\n\n        _backported_typevarlike = typing.TypeVar\n\n        def __new__(cls, name, *constraints, bound=None,\n                    covariant=False, contravariant=False,\n                    default=NoDefault, infer_variance=False):\n            if hasattr(typing, \"TypeAliasType\"):\n                # PEP 695 implemented (3.12+), can pass infer_variance to typing.TypeVar\n                typevar = typing.TypeVar(name, *constraints, bound=bound,\n                                         covariant=covariant, contravariant=contravariant,\n                                         infer_variance=infer_variance)\n            else:\n                typevar = typing.TypeVar(name, *constraints, bound=bound,\n                                         covariant=covariant, contravariant=contravariant)\n                if infer_variance and (covariant or contravariant):\n                    raise ValueError(\"Variance cannot be specified with infer_variance.\")\n                typevar.__infer_variance__ = infer_variance\n\n            _set_default(typevar, default)\n            _set_module(typevar)\n\n            def _tvar_prepare_subst(alias, args):\n                if (\n                    typevar.has_default()\n                    and alias.__parameters__.index(typevar) == len(args)\n                ):\n                    args += (typevar.__default__,)\n                return args\n\n            typevar.__typing_prepare_subst__ = _tvar_prepare_subst\n            return typevar\n\n        def __init_subclass__(cls) -> None:\n            raise TypeError(f\"type '{__name__}.TypeVar' is not an acceptable base type\")\n\n\n# Python 3.10+ has PEP 612\nif hasattr(typing, 'ParamSpecArgs'):\n    ParamSpecArgs = typing.ParamSpecArgs\n    ParamSpecKwargs = typing.ParamSpecKwargs\n# 3.8-3.9\nelse:\n    class _Immutable:\n        \"\"\"Mixin to indicate that object should not be copied.\"\"\"\n        __slots__ = ()\n\n        def __copy__(self):\n            return self\n\n        def __deepcopy__(self, memo):\n            return self\n\n    class ParamSpecArgs(_Immutable):\n        \"\"\"The args for a ParamSpec object.\n\n        Given a ParamSpec object P, P.args is an instance of ParamSpecArgs.\n\n        ParamSpecArgs objects have a reference back to their ParamSpec:\n\n        P.args.__origin__ is P\n\n        This type is meant for runtime introspection and has no special meaning to\n        static type checkers.\n        \"\"\"\n        def __init__(self, origin):\n            self.__origin__ = origin\n\n        def __repr__(self):\n            return f\"{self.__origin__.__name__}.args\"\n\n        def __eq__(self, other):\n            if not isinstance(other, ParamSpecArgs):\n                return NotImplemented\n            return self.__origin__ == other.__origin__\n\n    class ParamSpecKwargs(_Immutable):\n        \"\"\"The kwargs for a ParamSpec object.\n\n        Given a ParamSpec object P, P.kwargs is an instance of ParamSpecKwargs.\n\n        ParamSpecKwargs objects have a reference back to their ParamSpec:\n\n        P.kwargs.__origin__ is P\n\n        This type is meant for runtime introspection and has no special meaning to\n        static type checkers.\n        \"\"\"\n        def __init__(self, origin):\n            self.__origin__ = origin\n\n        def __repr__(self):\n            return f\"{self.__origin__.__name__}.kwargs\"\n\n        def __eq__(self, other):\n            if not isinstance(other, ParamSpecKwargs):\n                return NotImplemented\n            return self.__origin__ == other.__origin__\n\n\nif _PEP_696_IMPLEMENTED:\n    from typing import ParamSpec\n\n# 3.10+\nelif hasattr(typing, 'ParamSpec'):\n\n    # Add default parameter - PEP 696\n    class ParamSpec(metaclass=_TypeVarLikeMeta):\n        \"\"\"Parameter specification.\"\"\"\n\n        _backported_typevarlike = typing.ParamSpec\n\n        def __new__(cls, name, *, bound=None,\n                    covariant=False, contravariant=False,\n                    infer_variance=False, default=NoDefault):\n            if hasattr(typing, \"TypeAliasType\"):\n                # PEP 695 implemented, can pass infer_variance to typing.TypeVar\n                paramspec = typing.ParamSpec(name, bound=bound,\n                                             covariant=covariant,\n                                             contravariant=contravariant,\n                                             infer_variance=infer_variance)\n            else:\n                paramspec = typing.ParamSpec(name, bound=bound,\n                                             covariant=covariant,\n                                             contravariant=contravariant)\n                paramspec.__infer_variance__ = infer_variance\n\n            _set_default(paramspec, default)\n            _set_module(paramspec)\n\n            def _paramspec_prepare_subst(alias, args):\n                params = alias.__parameters__\n                i = params.index(paramspec)\n                if i == len(args) and paramspec.has_default():\n                    args = [*args, paramspec.__default__]\n                if i >= len(args):\n                    raise TypeError(f\"Too few arguments for {alias}\")\n                # Special case where Z[[int, str, bool]] == Z[int, str, bool] in PEP 612.\n                if len(params) == 1 and not typing._is_param_expr(args[0]):\n                    assert i == 0\n                    args = (args,)\n                # Convert lists to tuples to help other libraries cache the results.\n                elif isinstance(args[i], list):\n                    args = (*args[:i], tuple(args[i]), *args[i + 1:])\n                return args\n\n            paramspec.__typing_prepare_subst__ = _paramspec_prepare_subst\n            return paramspec\n\n        def __init_subclass__(cls) -> None:\n            raise TypeError(f\"type '{__name__}.ParamSpec' is not an acceptable base type\")\n\n# 3.8-3.9\nelse:\n\n    # Inherits from list as a workaround for Callable checks in Python < 3.9.2.\n    class ParamSpec(list, _DefaultMixin):\n        \"\"\"Parameter specification variable.\n\n        Usage::\n\n           P = ParamSpec('P')\n\n        Parameter specification variables exist primarily for the benefit of static\n        type checkers.  They are used to forward the parameter types of one\n        callable to another callable, a pattern commonly found in higher order\n        functions and decorators.  They are only valid when used in ``Concatenate``,\n        or s the first argument to ``Callable``. In Python 3.10 and higher,\n        they are also supported in user-defined Generics at runtime.\n        See class Generic for more information on generic types.  An\n        example for annotating a decorator::\n\n           T = TypeVar('T')\n           P = ParamSpec('P')\n\n           def add_logging(f: Callable[P, T]) -> Callable[P, T]:\n               '''A type-safe decorator to add logging to a function.'''\n               def inner(*args: P.args, **kwargs: P.kwargs) -> T:\n                   logging.info(f'{f.__name__} was called')\n                   return f(*args, **kwargs)\n               return inner\n\n           @add_logging\n           def add_two(x: float, y: float) -> float:\n               '''Add two numbers together.'''\n               return x + y\n\n        Parameter specification variables defined with covariant=True or\n        contravariant=True can be used to declare covariant or contravariant\n        generic types.  These keyword arguments are valid, but their actual semantics\n        are yet to be decided.  See PEP 612 for details.\n\n        Parameter specification variables can be introspected. e.g.:\n\n           P.__name__ == 'T'\n           P.__bound__ == None\n           P.__covariant__ == False\n           P.__contravariant__ == False\n\n        Note that only parameter specification variables defined in global scope can\n        be pickled.\n        \"\"\"\n\n        # Trick Generic __parameters__.\n        __class__ = typing.TypeVar\n\n        @property\n        def args(self):\n            return ParamSpecArgs(self)\n\n        @property\n        def kwargs(self):\n            return ParamSpecKwargs(self)\n\n        def __init__(self, name, *, bound=None, covariant=False, contravariant=False,\n                     infer_variance=False, default=NoDefault):\n            list.__init__(self, [self])\n            self.__name__ = name\n            self.__covariant__ = bool(covariant)\n            self.__contravariant__ = bool(contravariant)\n            self.__infer_variance__ = bool(infer_variance)\n            if bound:\n                self.__bound__ = typing._type_check(bound, 'Bound must be a type.')\n            else:\n                self.__bound__ = None\n            _DefaultMixin.__init__(self, default)\n\n            # for pickling:\n            def_mod = _caller()\n            if def_mod != 'typing_extensions':\n                self.__module__ = def_mod\n\n        def __repr__(self):\n            if self.__infer_variance__:\n                prefix = ''\n            elif self.__covariant__:\n                prefix = '+'\n            elif self.__contravariant__:\n                prefix = '-'\n            else:\n                prefix = '~'\n            return prefix + self.__name__\n\n        def __hash__(self):\n            return object.__hash__(self)\n\n        def __eq__(self, other):\n            return self is other\n\n        def __reduce__(self):\n            return self.__name__\n\n        # Hack to get typing._type_check to pass.\n        def __call__(self, *args, **kwargs):\n            pass\n\n\n# 3.8-3.9\nif not hasattr(typing, 'Concatenate'):\n    # Inherits from list as a workaround for Callable checks in Python < 3.9.2.\n    class _ConcatenateGenericAlias(list):\n\n        # Trick Generic into looking into this for __parameters__.\n        __class__ = typing._GenericAlias\n\n        # Flag in 3.8.\n        _special = False\n\n        def __init__(self, origin, args):\n            super().__init__(args)\n            self.__origin__ = origin\n            self.__args__ = args\n\n        def __repr__(self):\n            _type_repr = typing._type_repr\n            return (f'{_type_repr(self.__origin__)}'\n                    f'[{\", \".join(_type_repr(arg) for arg in self.__args__)}]')\n\n        def __hash__(self):\n            return hash((self.__origin__, self.__args__))\n\n        # Hack to get typing._type_check to pass in Generic.\n        def __call__(self, *args, **kwargs):\n            pass\n\n        @property\n        def __parameters__(self):\n            return tuple(\n                tp for tp in self.__args__ if isinstance(tp, (typing.TypeVar, ParamSpec))\n            )\n\n\n# 3.8-3.9\n@typing._tp_cache\ndef _concatenate_getitem(self, parameters):\n    if parameters == ():\n        raise TypeError(\"Cannot take a Concatenate of no types.\")\n    if not isinstance(parameters, tuple):\n        parameters = (parameters,)\n    if not isinstance(parameters[-1], ParamSpec):\n        raise TypeError(\"The last parameter to Concatenate should be a \"\n                        \"ParamSpec variable.\")\n    msg = \"Concatenate[arg, ...]: each arg must be a type.\"\n    parameters = tuple(typing._type_check(p, msg) for p in parameters)\n    return _ConcatenateGenericAlias(self, parameters)\n\n\n# 3.10+\nif hasattr(typing, 'Concatenate'):\n    Concatenate = typing.Concatenate\n    _ConcatenateGenericAlias = typing._ConcatenateGenericAlias\n# 3.9\nelif sys.version_info[:2] >= (3, 9):\n    @_ExtensionsSpecialForm\n    def Concatenate(self, parameters):\n        \"\"\"Used in conjunction with ``ParamSpec`` and ``Callable`` to represent a\n        higher order function which adds, removes or transforms parameters of a\n        callable.\n\n        For example::\n\n           Callable[Concatenate[int, P], int]\n\n        See PEP 612 for detailed information.\n        \"\"\"\n        return _concatenate_getitem(self, parameters)\n# 3.8\nelse:\n    class _ConcatenateForm(_ExtensionsSpecialForm, _root=True):\n        def __getitem__(self, parameters):\n            return _concatenate_getitem(self, parameters)\n\n    Concatenate = _ConcatenateForm(\n        'Concatenate',\n        doc=\"\"\"Used in conjunction with ``ParamSpec`` and ``Callable`` to represent a\n        higher order function which adds, removes or transforms parameters of a\n        callable.\n\n        For example::\n\n           Callable[Concatenate[int, P], int]\n\n        See PEP 612 for detailed information.\n        \"\"\")\n\n# 3.10+\nif hasattr(typing, 'TypeGuard'):\n    TypeGuard = typing.TypeGuard\n# 3.9\nelif sys.version_info[:2] >= (3, 9):\n    @_ExtensionsSpecialForm\n    def TypeGuard(self, parameters):\n        \"\"\"Special typing form used to annotate the return type of a user-defined\n        type guard function.  ``TypeGuard`` only accepts a single type argument.\n        At runtime, functions marked this way should return a boolean.\n\n        ``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static\n        type checkers to determine a more precise type of an expression within a\n        program's code flow.  Usually type narrowing is done by analyzing\n        conditional code flow and applying the narrowing to a block of code.  The\n        conditional expression here is sometimes referred to as a \"type guard\".\n\n        Sometimes it would be convenient to use a user-defined boolean function\n        as a type guard.  Such a function should use ``TypeGuard[...]`` as its\n        return type to alert static type checkers to this intention.\n\n        Using  ``-> TypeGuard`` tells the static type checker that for a given\n        function:\n\n        1. The return value is a boolean.\n        2. If the return value is ``True``, the type of its argument\n        is the type inside ``TypeGuard``.\n\n        For example::\n\n            def is_str(val: Union[str, float]):\n                # \"isinstance\" type guard\n                if isinstance(val, str):\n                    # Type of ``val`` is narrowed to ``str``\n                    ...\n                else:\n                    # Else, type of ``val`` is narrowed to ``float``.\n                    ...\n\n        Strict type narrowing is not enforced -- ``TypeB`` need not be a narrower\n        form of ``TypeA`` (it can even be a wider form) and this may lead to\n        type-unsafe results.  The main reason is to allow for things like\n        narrowing ``List[object]`` to ``List[str]`` even though the latter is not\n        a subtype of the former, since ``List`` is invariant.  The responsibility of\n        writing type-safe type guards is left to the user.\n\n        ``TypeGuard`` also works with type variables.  For more information, see\n        PEP 647 (User-Defined Type Guards).\n        \"\"\"\n        item = typing._type_check(parameters, f'{self} accepts only a single type.')\n        return typing._GenericAlias(self, (item,))\n# 3.8\nelse:\n    class _TypeGuardForm(_ExtensionsSpecialForm, _root=True):\n        def __getitem__(self, parameters):\n            item = typing._type_check(parameters,\n                                      f'{self._name} accepts only a single type')\n            return typing._GenericAlias(self, (item,))\n\n    TypeGuard = _TypeGuardForm(\n        'TypeGuard',\n        doc=\"\"\"Special typing form used to annotate the return type of a user-defined\n        type guard function.  ``TypeGuard`` only accepts a single type argument.\n        At runtime, functions marked this way should return a boolean.\n\n        ``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static\n        type checkers to determine a more precise type of an expression within a\n        program's code flow.  Usually type narrowing is done by analyzing\n        conditional code flow and applying the narrowing to a block of code.  The\n        conditional expression here is sometimes referred to as a \"type guard\".\n\n        Sometimes it would be convenient to use a user-defined boolean function\n        as a type guard.  Such a function should use ``TypeGuard[...]`` as its\n        return type to alert static type checkers to this intention.\n\n        Using  ``-> TypeGuard`` tells the static type checker that for a given\n        function:\n\n        1. The return value is a boolean.\n        2. If the return value is ``True``, the type of its argument\n        is the type inside ``TypeGuard``.\n\n        For example::\n\n            def is_str(val: Union[str, float]):\n                # \"isinstance\" type guard\n                if isinstance(val, str):\n                    # Type of ``val`` is narrowed to ``str``\n                    ...\n                else:\n                    # Else, type of ``val`` is narrowed to ``float``.\n                    ...\n\n        Strict type narrowing is not enforced -- ``TypeB`` need not be a narrower\n        form of ``TypeA`` (it can even be a wider form) and this may lead to\n        type-unsafe results.  The main reason is to allow for things like\n        narrowing ``List[object]`` to ``List[str]`` even though the latter is not\n        a subtype of the former, since ``List`` is invariant.  The responsibility of\n        writing type-safe type guards is left to the user.\n\n        ``TypeGuard`` also works with type variables.  For more information, see\n        PEP 647 (User-Defined Type Guards).\n        \"\"\")\n\n# 3.13+\nif hasattr(typing, 'TypeIs'):\n    TypeIs = typing.TypeIs\n# 3.9\nelif sys.version_info[:2] >= (3, 9):\n    @_ExtensionsSpecialForm\n    def TypeIs(self, parameters):\n        \"\"\"Special typing form used to annotate the return type of a user-defined\n        type narrower function.  ``TypeIs`` only accepts a single type argument.\n        At runtime, functions marked this way should return a boolean.\n\n        ``TypeIs`` aims to benefit *type narrowing* -- a technique used by static\n        type checkers to determine a more precise type of an expression within a\n        program's code flow.  Usually type narrowing is done by analyzing\n        conditional code flow and applying the narrowing to a block of code.  The\n        conditional expression here is sometimes referred to as a \"type guard\".\n\n        Sometimes it would be convenient to use a user-defined boolean function\n        as a type guard.  Such a function should use ``TypeIs[...]`` as its\n        return type to alert static type checkers to this intention.\n\n        Using  ``-> TypeIs`` tells the static type checker that for a given\n        function:\n\n        1. The return value is a boolean.\n        2. If the return value is ``True``, the type of its argument\n        is the intersection of the type inside ``TypeGuard`` and the argument's\n        previously known type.\n\n        For example::\n\n            def is_awaitable(val: object) -> TypeIs[Awaitable[Any]]:\n                return hasattr(val, '__await__')\n\n            def f(val: Union[int, Awaitable[int]]) -> int:\n                if is_awaitable(val):\n                    assert_type(val, Awaitable[int])\n                else:\n                    assert_type(val, int)\n\n        ``TypeIs`` also works with type variables.  For more information, see\n        PEP 742 (Narrowing types with TypeIs).\n        \"\"\"\n        item = typing._type_check(parameters, f'{self} accepts only a single type.')\n        return typing._GenericAlias(self, (item,))\n# 3.8\nelse:\n    class _TypeIsForm(_ExtensionsSpecialForm, _root=True):\n        def __getitem__(self, parameters):\n            item = typing._type_check(parameters,\n                                      f'{self._name} accepts only a single type')\n            return typing._GenericAlias(self, (item,))\n\n    TypeIs = _TypeIsForm(\n        'TypeIs',\n        doc=\"\"\"Special typing form used to annotate the return type of a user-defined\n        type narrower function.  ``TypeIs`` only accepts a single type argument.\n        At runtime, functions marked this way should return a boolean.\n\n        ``TypeIs`` aims to benefit *type narrowing* -- a technique used by static\n        type checkers to determine a more precise type of an expression within a\n        program's code flow.  Usually type narrowing is done by analyzing\n        conditional code flow and applying the narrowing to a block of code.  The\n        conditional expression here is sometimes referred to as a \"type guard\".\n\n        Sometimes it would be convenient to use a user-defined boolean function\n        as a type guard.  Such a function should use ``TypeIs[...]`` as its\n        return type to alert static type checkers to this intention.\n\n        Using  ``-> TypeIs`` tells the static type checker that for a given\n        function:\n\n        1. The return value is a boolean.\n        2. If the return value is ``True``, the type of its argument\n        is the intersection of the type inside ``TypeGuard`` and the argument's\n        previously known type.\n\n        For example::\n\n            def is_awaitable(val: object) -> TypeIs[Awaitable[Any]]:\n                return hasattr(val, '__await__')\n\n            def f(val: Union[int, Awaitable[int]]) -> int:\n                if is_awaitable(val):\n                    assert_type(val, Awaitable[int])\n                else:\n                    assert_type(val, int)\n\n        ``TypeIs`` also works with type variables.  For more information, see\n        PEP 742 (Narrowing types with TypeIs).\n        \"\"\")\n\n\n# Vendored from cpython typing._SpecialFrom\nclass _SpecialForm(typing._Final, _root=True):\n    __slots__ = ('_name', '__doc__', '_getitem')\n\n    def __init__(self, getitem):\n        self._getitem = getitem\n        self._name = getitem.__name__\n        self.__doc__ = getitem.__doc__\n\n    def __getattr__(self, item):\n        if item in {'__name__', '__qualname__'}:\n            return self._name\n\n        raise AttributeError(item)\n\n    def __mro_entries__(self, bases):\n        raise TypeError(f\"Cannot subclass {self!r}\")\n\n    def __repr__(self):\n        return f'typing_extensions.{self._name}'\n\n    def __reduce__(self):\n        return self._name\n\n    def __call__(self, *args, **kwds):\n        raise TypeError(f\"Cannot instantiate {self!r}\")\n\n    def __or__(self, other):\n        return typing.Union[self, other]\n\n    def __ror__(self, other):\n        return typing.Union[other, self]\n\n    def __instancecheck__(self, obj):\n        raise TypeError(f\"{self} cannot be used with isinstance()\")\n\n    def __subclasscheck__(self, cls):\n        raise TypeError(f\"{self} cannot be used with issubclass()\")\n\n    @typing._tp_cache\n    def __getitem__(self, parameters):\n        return self._getitem(self, parameters)\n\n\nif hasattr(typing, \"LiteralString\"):  # 3.11+\n    LiteralString = typing.LiteralString\nelse:\n    @_SpecialForm\n    def LiteralString(self, params):\n        \"\"\"Represents an arbitrary literal string.\n\n        Example::\n\n          from typing_extensions import LiteralString\n\n          def query(sql: LiteralString) -> ...:\n              ...\n\n          query(\"SELECT * FROM table\")  # ok\n          query(f\"SELECT * FROM {input()}\")  # not ok\n\n        See PEP 675 for details.\n\n        \"\"\"\n        raise TypeError(f\"{self} is not subscriptable\")\n\n\nif hasattr(typing, \"Self\"):  # 3.11+\n    Self = typing.Self\nelse:\n    @_SpecialForm\n    def Self(self, params):\n        \"\"\"Used to spell the type of \"self\" in classes.\n\n        Example::\n\n          from typing import Self\n\n          class ReturnsSelf:\n              def parse(self, data: bytes) -> Self:\n                  ...\n                  return self\n\n        \"\"\"\n\n        raise TypeError(f\"{self} is not subscriptable\")\n\n\nif hasattr(typing, \"Never\"):  # 3.11+\n    Never = typing.Never\nelse:\n    @_SpecialForm\n    def Never(self, params):\n        \"\"\"The bottom type, a type that has no members.\n\n        This can be used to define a function that should never be\n        called, or a function that never returns::\n\n            from typing_extensions import Never\n\n            def never_call_me(arg: Never) -> None:\n                pass\n\n            def int_or_str(arg: int | str) -> None:\n                never_call_me(arg)  # type checker error\n                match arg:\n                    case int():\n                        print(\"It's an int\")\n                    case str():\n                        print(\"It's a str\")\n                    case _:\n                        never_call_me(arg)  # ok, arg is of type Never\n\n        \"\"\"\n\n        raise TypeError(f\"{self} is not subscriptable\")\n\n\nif hasattr(typing, 'Required'):  # 3.11+\n    Required = typing.Required\n    NotRequired = typing.NotRequired\nelif sys.version_info[:2] >= (3, 9):  # 3.9-3.10\n    @_ExtensionsSpecialForm\n    def Required(self, parameters):\n        \"\"\"A special typing construct to mark a key of a total=False TypedDict\n        as required. For example:\n\n            class Movie(TypedDict, total=False):\n                title: Required[str]\n                year: int\n\n            m = Movie(\n                title='The Matrix',  # typechecker error if key is omitted\n                year=1999,\n            )\n\n        There is no runtime checking that a required key is actually provided\n        when instantiating a related TypedDict.\n        \"\"\"\n        item = typing._type_check(parameters, f'{self._name} accepts only a single type.')\n        return typing._GenericAlias(self, (item,))\n\n    @_ExtensionsSpecialForm\n    def NotRequired(self, parameters):\n        \"\"\"A special typing construct to mark a key of a TypedDict as\n        potentially missing. For example:\n\n            class Movie(TypedDict):\n                title: str\n                year: NotRequired[int]\n\n            m = Movie(\n                title='The Matrix',  # typechecker error if key is omitted\n                year=1999,\n            )\n        \"\"\"\n        item = typing._type_check(parameters, f'{self._name} accepts only a single type.')\n        return typing._GenericAlias(self, (item,))\n\nelse:  # 3.8\n    class _RequiredForm(_ExtensionsSpecialForm, _root=True):\n        def __getitem__(self, parameters):\n            item = typing._type_check(parameters,\n                                      f'{self._name} accepts only a single type.')\n            return typing._GenericAlias(self, (item,))\n\n    Required = _RequiredForm(\n        'Required',\n        doc=\"\"\"A special typing construct to mark a key of a total=False TypedDict\n        as required. For example:\n\n            class Movie(TypedDict, total=False):\n                title: Required[str]\n                year: int\n\n            m = Movie(\n                title='The Matrix',  # typechecker error if key is omitted\n                year=1999,\n            )\n\n        There is no runtime checking that a required key is actually provided\n        when instantiating a related TypedDict.\n        \"\"\")\n    NotRequired = _RequiredForm(\n        'NotRequired',\n        doc=\"\"\"A special typing construct to mark a key of a TypedDict as\n        potentially missing. For example:\n\n            class Movie(TypedDict):\n                title: str\n                year: NotRequired[int]\n\n            m = Movie(\n                title='The Matrix',  # typechecker error if key is omitted\n                year=1999,\n            )\n        \"\"\")\n\n\nif hasattr(typing, 'ReadOnly'):\n    ReadOnly = typing.ReadOnly\nelif sys.version_info[:2] >= (3, 9):  # 3.9-3.12\n    @_ExtensionsSpecialForm\n    def ReadOnly(self, parameters):\n        \"\"\"A special typing construct to mark an item of a TypedDict as read-only.\n\n        For example:\n\n            class Movie(TypedDict):\n                title: ReadOnly[str]\n                year: int\n\n            def mutate_movie(m: Movie) -> None:\n                m[\"year\"] = 1992  # allowed\n                m[\"title\"] = \"The Matrix\"  # typechecker error\n\n        There is no runtime checking for this property.\n        \"\"\"\n        item = typing._type_check(parameters, f'{self._name} accepts only a single type.')\n        return typing._GenericAlias(self, (item,))\n\nelse:  # 3.8\n    class _ReadOnlyForm(_ExtensionsSpecialForm, _root=True):\n        def __getitem__(self, parameters):\n            item = typing._type_check(parameters,\n                                      f'{self._name} accepts only a single type.')\n            return typing._GenericAlias(self, (item,))\n\n    ReadOnly = _ReadOnlyForm(\n        'ReadOnly',\n        doc=\"\"\"A special typing construct to mark a key of a TypedDict as read-only.\n\n        For example:\n\n            class Movie(TypedDict):\n                title: ReadOnly[str]\n                year: int\n\n            def mutate_movie(m: Movie) -> None:\n                m[\"year\"] = 1992  # allowed\n                m[\"title\"] = \"The Matrix\"  # typechecker error\n\n        There is no runtime checking for this propery.\n        \"\"\")\n\n\n_UNPACK_DOC = \"\"\"\\\nType unpack operator.\n\nThe type unpack operator takes the child types from some container type,\nsuch as `tuple[int, str]` or a `TypeVarTuple`, and 'pulls them out'. For\nexample:\n\n  # For some generic class `Foo`:\n  Foo[Unpack[tuple[int, str]]]  # Equivalent to Foo[int, str]\n\n  Ts = TypeVarTuple('Ts')\n  # Specifies that `Bar` is generic in an arbitrary number of types.\n  # (Think of `Ts` as a tuple of an arbitrary number of individual\n  #  `TypeVar`s, which the `Unpack` is 'pulling out' directly into the\n  #  `Generic[]`.)\n  class Bar(Generic[Unpack[Ts]]): ...\n  Bar[int]  # Valid\n  Bar[int, str]  # Also valid\n\nFrom Python 3.11, this can also be done using the `*` operator:\n\n    Foo[*tuple[int, str]]\n    class Bar(Generic[*Ts]): ...\n\nThe operator can also be used along with a `TypedDict` to annotate\n`**kwargs` in a function signature. For instance:\n\n  class Movie(TypedDict):\n    name: str\n    year: int\n\n  # This function expects two keyword arguments - *name* of type `str` and\n  # *year* of type `int`.\n  def foo(**kwargs: Unpack[Movie]): ...\n\nNote that there is only some runtime checking of this operator. Not\neverything the runtime allows may be accepted by static type checkers.\n\nFor more information, see PEP 646 and PEP 692.\n\"\"\"\n\n\nif sys.version_info >= (3, 12):  # PEP 692 changed the repr of Unpack[]\n    Unpack = typing.Unpack\n\n    def _is_unpack(obj):\n        return get_origin(obj) is Unpack\n\nelif sys.version_info[:2] >= (3, 9):  # 3.9+\n    class _UnpackSpecialForm(_ExtensionsSpecialForm, _root=True):\n        def __init__(self, getitem):\n            super().__init__(getitem)\n            self.__doc__ = _UNPACK_DOC\n\n    class _UnpackAlias(typing._GenericAlias, _root=True):\n        __class__ = typing.TypeVar\n\n        @property\n        def __typing_unpacked_tuple_args__(self):\n            assert self.__origin__ is Unpack\n            assert len(self.__args__) == 1\n            arg, = self.__args__\n            if isinstance(arg, (typing._GenericAlias, _types.GenericAlias)):\n                if arg.__origin__ is not tuple:\n                    raise TypeError(\"Unpack[...] must be used with a tuple type\")\n                return arg.__args__\n            return None\n\n    @_UnpackSpecialForm\n    def Unpack(self, parameters):\n        item = typing._type_check(parameters, f'{self._name} accepts only a single type.')\n        return _UnpackAlias(self, (item,))\n\n    def _is_unpack(obj):\n        return isinstance(obj, _UnpackAlias)\n\nelse:  # 3.8\n    class _UnpackAlias(typing._GenericAlias, _root=True):\n        __class__ = typing.TypeVar\n\n    class _UnpackForm(_ExtensionsSpecialForm, _root=True):\n        def __getitem__(self, parameters):\n            item = typing._type_check(parameters,\n                                      f'{self._name} accepts only a single type.')\n            return _UnpackAlias(self, (item,))\n\n    Unpack = _UnpackForm('Unpack', doc=_UNPACK_DOC)\n\n    def _is_unpack(obj):\n        return isinstance(obj, _UnpackAlias)\n\n\nif _PEP_696_IMPLEMENTED:\n    from typing import TypeVarTuple\n\nelif hasattr(typing, \"TypeVarTuple\"):  # 3.11+\n\n    def _unpack_args(*args):\n        newargs = []\n        for arg in args:\n            subargs = getattr(arg, '__typing_unpacked_tuple_args__', None)\n            if subargs is not None and not (subargs and subargs[-1] is ...):\n                newargs.extend(subargs)\n            else:\n                newargs.append(arg)\n        return newargs\n\n    # Add default parameter - PEP 696\n    class TypeVarTuple(metaclass=_TypeVarLikeMeta):\n        \"\"\"Type variable tuple.\"\"\"\n\n        _backported_typevarlike = typing.TypeVarTuple\n\n        def __new__(cls, name, *, default=NoDefault):\n            tvt = typing.TypeVarTuple(name)\n            _set_default(tvt, default)\n            _set_module(tvt)\n\n            def _typevartuple_prepare_subst(alias, args):\n                params = alias.__parameters__\n                typevartuple_index = params.index(tvt)\n                for param in params[typevartuple_index + 1:]:\n                    if isinstance(param, TypeVarTuple):\n                        raise TypeError(\n                            f\"More than one TypeVarTuple parameter in {alias}\"\n                        )\n\n                alen = len(args)\n                plen = len(params)\n                left = typevartuple_index\n                right = plen - typevartuple_index - 1\n                var_tuple_index = None\n                fillarg = None\n                for k, arg in enumerate(args):\n                    if not isinstance(arg, type):\n                        subargs = getattr(arg, '__typing_unpacked_tuple_args__', None)\n                        if subargs and len(subargs) == 2 and subargs[-1] is ...:\n                            if var_tuple_index is not None:\n                                raise TypeError(\n                                    \"More than one unpacked \"\n                                    \"arbitrary-length tuple argument\"\n                                )\n                            var_tuple_index = k\n                            fillarg = subargs[0]\n                if var_tuple_index is not None:\n                    left = min(left, var_tuple_index)\n                    right = min(right, alen - var_tuple_index - 1)\n                elif left + right > alen:\n                    raise TypeError(f\"Too few arguments for {alias};\"\n                                    f\" actual {alen}, expected at least {plen - 1}\")\n                if left == alen - right and tvt.has_default():\n                    replacement = _unpack_args(tvt.__default__)\n                else:\n                    replacement = args[left: alen - right]\n\n                return (\n                    *args[:left],\n                    *([fillarg] * (typevartuple_index - left)),\n                    replacement,\n                    *([fillarg] * (plen - right - left - typevartuple_index - 1)),\n                    *args[alen - right:],\n                )\n\n            tvt.__typing_prepare_subst__ = _typevartuple_prepare_subst\n            return tvt\n\n        def __init_subclass__(self, *args, **kwds):\n            raise TypeError(\"Cannot subclass special typing classes\")\n\nelse:  # <=3.10\n    class TypeVarTuple(_DefaultMixin):\n        \"\"\"Type variable tuple.\n\n        Usage::\n\n            Ts = TypeVarTuple('Ts')\n\n        In the same way that a normal type variable is a stand-in for a single\n        type such as ``int``, a type variable *tuple* is a stand-in for a *tuple*\n        type such as ``Tuple[int, str]``.\n\n        Type variable tuples can be used in ``Generic`` declarations.\n        Consider the following example::\n\n            class Array(Generic[*Ts]): ...\n\n        The ``Ts`` type variable tuple here behaves like ``tuple[T1, T2]``,\n        where ``T1`` and ``T2`` are type variables. To use these type variables\n        as type parameters of ``Array``, we must *unpack* the type variable tuple using\n        the star operator: ``*Ts``. The signature of ``Array`` then behaves\n        as if we had simply written ``class Array(Generic[T1, T2]): ...``.\n        In contrast to ``Generic[T1, T2]``, however, ``Generic[*Shape]`` allows\n        us to parameterise the class with an *arbitrary* number of type parameters.\n\n        Type variable tuples can be used anywhere a normal ``TypeVar`` can.\n        This includes class definitions, as shown above, as well as function\n        signatures and variable annotations::\n\n            class Array(Generic[*Ts]):\n\n                def __init__(self, shape: Tuple[*Ts]):\n                    self._shape: Tuple[*Ts] = shape\n\n                def get_shape(self) -> Tuple[*Ts]:\n                    return self._shape\n\n            shape = (Height(480), Width(640))\n            x: Array[Height, Width] = Array(shape)\n            y = abs(x)  # Inferred type is Array[Height, Width]\n            z = x + x   #        ...    is Array[Height, Width]\n            x.get_shape()  #     ...    is tuple[Height, Width]\n\n        \"\"\"\n\n        # Trick Generic __parameters__.\n        __class__ = typing.TypeVar\n\n        def __iter__(self):\n            yield self.__unpacked__\n\n        def __init__(self, name, *, default=NoDefault):\n            self.__name__ = name\n            _DefaultMixin.__init__(self, default)\n\n            # for pickling:\n            def_mod = _caller()\n            if def_mod != 'typing_extensions':\n                self.__module__ = def_mod\n\n            self.__unpacked__ = Unpack[self]\n\n        def __repr__(self):\n            return self.__name__\n\n        def __hash__(self):\n            return object.__hash__(self)\n\n        def __eq__(self, other):\n            return self is other\n\n        def __reduce__(self):\n            return self.__name__\n\n        def __init_subclass__(self, *args, **kwds):\n            if '_root' not in kwds:\n                raise TypeError(\"Cannot subclass special typing classes\")\n\n\nif hasattr(typing, \"reveal_type\"):  # 3.11+\n    reveal_type = typing.reveal_type\nelse:  # <=3.10\n    def reveal_type(obj: T, /) -> T:\n        \"\"\"Reveal the inferred type of a variable.\n\n        When a static type checker encounters a call to ``reveal_type()``,\n        it will emit the inferred type of the argument::\n\n            x: int = 1\n            reveal_type(x)\n\n        Running a static type checker (e.g., ``mypy``) on this example\n        will produce output similar to 'Revealed type is \"builtins.int\"'.\n\n        At runtime, the function prints the runtime type of the\n        argument and returns it unchanged.\n\n        \"\"\"\n        print(f\"Runtime type is {type(obj).__name__!r}\", file=sys.stderr)\n        return obj\n\n\nif hasattr(typing, \"_ASSERT_NEVER_REPR_MAX_LENGTH\"):  # 3.11+\n    _ASSERT_NEVER_REPR_MAX_LENGTH = typing._ASSERT_NEVER_REPR_MAX_LENGTH\nelse:  # <=3.10\n    _ASSERT_NEVER_REPR_MAX_LENGTH = 100\n\n\nif hasattr(typing, \"assert_never\"):  # 3.11+\n    assert_never = typing.assert_never\nelse:  # <=3.10\n    def assert_never(arg: Never, /) -> Never:\n        \"\"\"Assert to the type checker that a line of code is unreachable.\n\n        Example::\n\n            def int_or_str(arg: int | str) -> None:\n                match arg:\n                    case int():\n                        print(\"It's an int\")\n                    case str():\n                        print(\"It's a str\")\n                    case _:\n                        assert_never(arg)\n\n        If a type checker finds that a call to assert_never() is\n        reachable, it will emit an error.\n\n        At runtime, this throws an exception when called.\n\n        \"\"\"\n        value = repr(arg)\n        if len(value) > _ASSERT_NEVER_REPR_MAX_LENGTH:\n            value = value[:_ASSERT_NEVER_REPR_MAX_LENGTH] + '...'\n        raise AssertionError(f\"Expected code to be unreachable, but got: {value}\")\n\n\nif sys.version_info >= (3, 12):  # 3.12+\n    # dataclass_transform exists in 3.11 but lacks the frozen_default parameter\n    dataclass_transform = typing.dataclass_transform\nelse:  # <=3.11\n    def dataclass_transform(\n        *,\n        eq_default: bool = True,\n        order_default: bool = False,\n        kw_only_default: bool = False,\n        frozen_default: bool = False,\n        field_specifiers: typing.Tuple[\n            typing.Union[typing.Type[typing.Any], typing.Callable[..., typing.Any]],\n            ...\n        ] = (),\n        **kwargs: typing.Any,\n    ) -> typing.Callable[[T], T]:\n        \"\"\"Decorator that marks a function, class, or metaclass as providing\n        dataclass-like behavior.\n\n        Example:\n\n            from typing_extensions import dataclass_transform\n\n            _T = TypeVar(\"_T\")\n\n            # Used on a decorator function\n            @dataclass_transform()\n            def create_model(cls: type[_T]) -> type[_T]:\n                ...\n                return cls\n\n            @create_model\n            class CustomerModel:\n                id: int\n                name: str\n\n            # Used on a base class\n            @dataclass_transform()\n            class ModelBase: ...\n\n            class CustomerModel(ModelBase):\n                id: int\n                name: str\n\n            # Used on a metaclass\n            @dataclass_transform()\n            class ModelMeta(type): ...\n\n            class ModelBase(metaclass=ModelMeta): ...\n\n            class CustomerModel(ModelBase):\n                id: int\n                name: str\n\n        Each of the ``CustomerModel`` classes defined in this example will now\n        behave similarly to a dataclass created with the ``@dataclasses.dataclass``\n        decorator. For example, the type checker will synthesize an ``__init__``\n        method.\n\n        The arguments to this decorator can be used to customize this behavior:\n        - ``eq_default`` indicates whether the ``eq`` parameter is assumed to be\n          True or False if it is omitted by the caller.\n        - ``order_default`` indicates whether the ``order`` parameter is\n          assumed to be True or False if it is omitted by the caller.\n        - ``kw_only_default`` indicates whether the ``kw_only`` parameter is\n          assumed to be True or False if it is omitted by the caller.\n        - ``frozen_default`` indicates whether the ``frozen`` parameter is\n          assumed to be True or False if it is omitted by the caller.\n        - ``field_specifiers`` specifies a static list of supported classes\n          or functions that describe fields, similar to ``dataclasses.field()``.\n\n        At runtime, this decorator records its arguments in the\n        ``__dataclass_transform__`` attribute on the decorated object.\n\n        See PEP 681 for details.\n\n        \"\"\"\n        def decorator(cls_or_fn):\n            cls_or_fn.__dataclass_transform__ = {\n                \"eq_default\": eq_default,\n                \"order_default\": order_default,\n                \"kw_only_default\": kw_only_default,\n                \"frozen_default\": frozen_default,\n                \"field_specifiers\": field_specifiers,\n                \"kwargs\": kwargs,\n            }\n            return cls_or_fn\n        return decorator\n\n\nif hasattr(typing, \"override\"):  # 3.12+\n    override = typing.override\nelse:  # <=3.11\n    _F = typing.TypeVar(\"_F\", bound=typing.Callable[..., typing.Any])\n\n    def override(arg: _F, /) -> _F:\n        \"\"\"Indicate that a method is intended to override a method in a base class.\n\n        Usage:\n\n            class Base:\n                def method(self) -> None:\n                    pass\n\n            class Child(Base):\n                @override\n                def method(self) -> None:\n                    super().method()\n\n        When this decorator is applied to a method, the type checker will\n        validate that it overrides a method with the same name on a base class.\n        This helps prevent bugs that may occur when a base class is changed\n        without an equivalent change to a child class.\n\n        There is no runtime checking of these properties. The decorator\n        sets the ``__override__`` attribute to ``True`` on the decorated object\n        to allow runtime introspection.\n\n        See PEP 698 for details.\n\n        \"\"\"\n        try:\n            arg.__override__ = True\n        except (AttributeError, TypeError):\n            # Skip the attribute silently if it is not writable.\n            # AttributeError happens if the object has __slots__ or a\n            # read-only property, TypeError if it's a builtin class.\n            pass\n        return arg\n\n\nif hasattr(warnings, \"deprecated\"):\n    deprecated = warnings.deprecated\nelse:\n    _T = typing.TypeVar(\"_T\")\n\n    class deprecated:\n        \"\"\"Indicate that a class, function or overload is deprecated.\n\n        When this decorator is applied to an object, the type checker\n        will generate a diagnostic on usage of the deprecated object.\n\n        Usage:\n\n            @deprecated(\"Use B instead\")\n            class A:\n                pass\n\n            @deprecated(\"Use g instead\")\n            def f():\n                pass\n\n            @overload\n            @deprecated(\"int support is deprecated\")\n            def g(x: int) -> int: ...\n            @overload\n            def g(x: str) -> int: ...\n\n        The warning specified by *category* will be emitted at runtime\n        on use of deprecated objects. For functions, that happens on calls;\n        for classes, on instantiation and on creation of subclasses.\n        If the *category* is ``None``, no warning is emitted at runtime.\n        The *stacklevel* determines where the\n        warning is emitted. If it is ``1`` (the default), the warning\n        is emitted at the direct caller of the deprecated object; if it\n        is higher, it is emitted further up the stack.\n        Static type checker behavior is not affected by the *category*\n        and *stacklevel* arguments.\n\n        The deprecation message passed to the decorator is saved in the\n        ``__deprecated__`` attribute on the decorated object.\n        If applied to an overload, the decorator\n        must be after the ``@overload`` decorator for the attribute to\n        exist on the overload as returned by ``get_overloads()``.\n\n        See PEP 702 for details.\n\n        \"\"\"\n        def __init__(\n            self,\n            message: str,\n            /,\n            *,\n            category: typing.Optional[typing.Type[Warning]] = DeprecationWarning,\n            stacklevel: int = 1,\n        ) -> None:\n            if not isinstance(message, str):\n                raise TypeError(\n                    \"Expected an object of type str for 'message', not \"\n                    f\"{type(message).__name__!r}\"\n                )\n            self.message = message\n            self.category = category\n            self.stacklevel = stacklevel\n\n        def __call__(self, arg: _T, /) -> _T:\n            # Make sure the inner functions created below don't\n            # retain a reference to self.\n            msg = self.message\n            category = self.category\n            stacklevel = self.stacklevel\n            if category is None:\n                arg.__deprecated__ = msg\n                return arg\n            elif isinstance(arg, type):\n                import functools\n                from types import MethodType\n\n                original_new = arg.__new__\n\n                @functools.wraps(original_new)\n                def __new__(cls, *args, **kwargs):\n                    if cls is arg:\n                        warnings.warn(msg, category=category, stacklevel=stacklevel + 1)\n                    if original_new is not object.__new__:\n                        return original_new(cls, *args, **kwargs)\n                    # Mirrors a similar check in object.__new__.\n                    elif cls.__init__ is object.__init__ and (args or kwargs):\n                        raise TypeError(f\"{cls.__name__}() takes no arguments\")\n                    else:\n                        return original_new(cls)\n\n                arg.__new__ = staticmethod(__new__)\n\n                original_init_subclass = arg.__init_subclass__\n                # We need slightly different behavior if __init_subclass__\n                # is a bound method (likely if it was implemented in Python)\n                if isinstance(original_init_subclass, MethodType):\n                    original_init_subclass = original_init_subclass.__func__\n\n                    @functools.wraps(original_init_subclass)\n                    def __init_subclass__(*args, **kwargs):\n                        warnings.warn(msg, category=category, stacklevel=stacklevel + 1)\n                        return original_init_subclass(*args, **kwargs)\n\n                    arg.__init_subclass__ = classmethod(__init_subclass__)\n                # Or otherwise, which likely means it's a builtin such as\n                # object's implementation of __init_subclass__.\n                else:\n                    @functools.wraps(original_init_subclass)\n                    def __init_subclass__(*args, **kwargs):\n                        warnings.warn(msg, category=category, stacklevel=stacklevel + 1)\n                        return original_init_subclass(*args, **kwargs)\n\n                    arg.__init_subclass__ = __init_subclass__\n\n                arg.__deprecated__ = __new__.__deprecated__ = msg\n                __init_subclass__.__deprecated__ = msg\n                return arg\n            elif callable(arg):\n                import functools\n\n                @functools.wraps(arg)\n                def wrapper(*args, **kwargs):\n                    warnings.warn(msg, category=category, stacklevel=stacklevel + 1)\n                    return arg(*args, **kwargs)\n\n                arg.__deprecated__ = wrapper.__deprecated__ = msg\n                return wrapper\n            else:\n                raise TypeError(\n                    \"@deprecated decorator with non-None category must be applied to \"\n                    f\"a class or callable, not {arg!r}\"\n                )\n\n\n# We have to do some monkey patching to deal with the dual nature of\n# Unpack/TypeVarTuple:\n# - We want Unpack to be a kind of TypeVar so it gets accepted in\n#   Generic[Unpack[Ts]]\n# - We want it to *not* be treated as a TypeVar for the purposes of\n#   counting generic parameters, so that when we subscript a generic,\n#   the runtime doesn't try to substitute the Unpack with the subscripted type.\nif not hasattr(typing, \"TypeVarTuple\"):\n    def _check_generic(cls, parameters, elen=_marker):\n        \"\"\"Check correct count for parameters of a generic cls (internal helper).\n\n        This gives a nice error message in case of count mismatch.\n        \"\"\"\n        if not elen:\n            raise TypeError(f\"{cls} is not a generic class\")\n        if elen is _marker:\n            if not hasattr(cls, \"__parameters__\") or not cls.__parameters__:\n                raise TypeError(f\"{cls} is not a generic class\")\n            elen = len(cls.__parameters__)\n        alen = len(parameters)\n        if alen != elen:\n            expect_val = elen\n            if hasattr(cls, \"__parameters__\"):\n                parameters = [p for p in cls.__parameters__ if not _is_unpack(p)]\n                num_tv_tuples = sum(isinstance(p, TypeVarTuple) for p in parameters)\n                if (num_tv_tuples > 0) and (alen >= elen - num_tv_tuples):\n                    return\n\n                # deal with TypeVarLike defaults\n                # required TypeVarLikes cannot appear after a defaulted one.\n                if alen < elen:\n                    # since we validate TypeVarLike default in _collect_type_vars\n                    # or _collect_parameters we can safely check parameters[alen]\n                    if (\n                        getattr(parameters[alen], '__default__', NoDefault)\n                        is not NoDefault\n                    ):\n                        return\n\n                    num_default_tv = sum(getattr(p, '__default__', NoDefault)\n                                         is not NoDefault for p in parameters)\n\n                    elen -= num_default_tv\n\n                    expect_val = f\"at least {elen}\"\n\n            things = \"arguments\" if sys.version_info >= (3, 10) else \"parameters\"\n            raise TypeError(f\"Too {'many' if alen > elen else 'few'} {things}\"\n                            f\" for {cls}; actual {alen}, expected {expect_val}\")\nelse:\n    # Python 3.11+\n\n    def _check_generic(cls, parameters, elen):\n        \"\"\"Check correct count for parameters of a generic cls (internal helper).\n\n        This gives a nice error message in case of count mismatch.\n        \"\"\"\n        if not elen:\n            raise TypeError(f\"{cls} is not a generic class\")\n        alen = len(parameters)\n        if alen != elen:\n            expect_val = elen\n            if hasattr(cls, \"__parameters__\"):\n                parameters = [p for p in cls.__parameters__ if not _is_unpack(p)]\n\n                # deal with TypeVarLike defaults\n                # required TypeVarLikes cannot appear after a defaulted one.\n                if alen < elen:\n                    # since we validate TypeVarLike default in _collect_type_vars\n                    # or _collect_parameters we can safely check parameters[alen]\n                    if (\n                        getattr(parameters[alen], '__default__', NoDefault)\n                        is not NoDefault\n                    ):\n                        return\n\n                    num_default_tv = sum(getattr(p, '__default__', NoDefault)\n                                         is not NoDefault for p in parameters)\n\n                    elen -= num_default_tv\n\n                    expect_val = f\"at least {elen}\"\n\n            raise TypeError(f\"Too {'many' if alen > elen else 'few'} arguments\"\n                            f\" for {cls}; actual {alen}, expected {expect_val}\")\n\nif not _PEP_696_IMPLEMENTED:\n    typing._check_generic = _check_generic\n\n\ndef _has_generic_or_protocol_as_origin() -> bool:\n    try:\n        frame = sys._getframe(2)\n    # - Catch AttributeError: not all Python implementations have sys._getframe()\n    # - Catch ValueError: maybe we're called from an unexpected module\n    #   and the call stack isn't deep enough\n    except (AttributeError, ValueError):\n        return False  # err on the side of leniency\n    else:\n        # If we somehow get invoked from outside typing.py,\n        # also err on the side of leniency\n        if frame.f_globals.get(\"__name__\") != \"typing\":\n            return False\n        origin = frame.f_locals.get(\"origin\")\n        # Cannot use \"in\" because origin may be an object with a buggy __eq__ that\n        # throws an error.\n        return origin is typing.Generic or origin is Protocol or origin is typing.Protocol\n\n\n_TYPEVARTUPLE_TYPES = {TypeVarTuple, getattr(typing, \"TypeVarTuple\", None)}\n\n\ndef _is_unpacked_typevartuple(x) -> bool:\n    if get_origin(x) is not Unpack:\n        return False\n    args = get_args(x)\n    return (\n        bool(args)\n        and len(args) == 1\n        and type(args[0]) in _TYPEVARTUPLE_TYPES\n    )\n\n\n# Python 3.11+ _collect_type_vars was renamed to _collect_parameters\nif hasattr(typing, '_collect_type_vars'):\n    def _collect_type_vars(types, typevar_types=None):\n        \"\"\"Collect all type variable contained in types in order of\n        first appearance (lexicographic order). For example::\n\n            _collect_type_vars((T, List[S, T])) == (T, S)\n        \"\"\"\n        if typevar_types is None:\n            typevar_types = typing.TypeVar\n        tvars = []\n\n        # A required TypeVarLike cannot appear after a TypeVarLike with a default\n        # if it was a direct call to `Generic[]` or `Protocol[]`\n        enforce_default_ordering = _has_generic_or_protocol_as_origin()\n        default_encountered = False\n\n        # Also, a TypeVarLike with a default cannot appear after a TypeVarTuple\n        type_var_tuple_encountered = False\n\n        for t in types:\n            if _is_unpacked_typevartuple(t):\n                type_var_tuple_encountered = True\n            elif isinstance(t, typevar_types) and t not in tvars:\n                if enforce_default_ordering:\n                    has_default = getattr(t, '__default__', NoDefault) is not NoDefault\n                    if has_default:\n                        if type_var_tuple_encountered:\n                            raise TypeError('Type parameter with a default'\n                                            ' follows TypeVarTuple')\n                        default_encountered = True\n                    elif default_encountered:\n                        raise TypeError(f'Type parameter {t!r} without a default'\n                                        ' follows type parameter with a default')\n\n                tvars.append(t)\n            if _should_collect_from_parameters(t):\n                tvars.extend([t for t in t.__parameters__ if t not in tvars])\n        return tuple(tvars)\n\n    typing._collect_type_vars = _collect_type_vars\nelse:\n    def _collect_parameters(args):\n        \"\"\"Collect all type variables and parameter specifications in args\n        in order of first appearance (lexicographic order).\n\n        For example::\n\n            assert _collect_parameters((T, Callable[P, T])) == (T, P)\n        \"\"\"\n        parameters = []\n\n        # A required TypeVarLike cannot appear after a TypeVarLike with default\n        # if it was a direct call to `Generic[]` or `Protocol[]`\n        enforce_default_ordering = _has_generic_or_protocol_as_origin()\n        default_encountered = False\n\n        # Also, a TypeVarLike with a default cannot appear after a TypeVarTuple\n        type_var_tuple_encountered = False\n\n        for t in args:\n            if isinstance(t, type):\n                # We don't want __parameters__ descriptor of a bare Python class.\n                pass\n            elif isinstance(t, tuple):\n                # `t` might be a tuple, when `ParamSpec` is substituted with\n                # `[T, int]`, or `[int, *Ts]`, etc.\n                for x in t:\n                    for collected in _collect_parameters([x]):\n                        if collected not in parameters:\n                            parameters.append(collected)\n            elif hasattr(t, '__typing_subst__'):\n                if t not in parameters:\n                    if enforce_default_ordering:\n                        has_default = (\n                            getattr(t, '__default__', NoDefault) is not NoDefault\n                        )\n\n                        if type_var_tuple_encountered and has_default:\n                            raise TypeError('Type parameter with a default'\n                                            ' follows TypeVarTuple')\n\n                        if has_default:\n                            default_encountered = True\n                        elif default_encountered:\n                            raise TypeError(f'Type parameter {t!r} without a default'\n                                            ' follows type parameter with a default')\n\n                    parameters.append(t)\n            else:\n                if _is_unpacked_typevartuple(t):\n                    type_var_tuple_encountered = True\n                for x in getattr(t, '__parameters__', ()):\n                    if x not in parameters:\n                        parameters.append(x)\n\n        return tuple(parameters)\n\n    if not _PEP_696_IMPLEMENTED:\n        typing._collect_parameters = _collect_parameters\n\n# Backport typing.NamedTuple as it exists in Python 3.13.\n# In 3.11, the ability to define generic `NamedTuple`s was supported.\n# This was explicitly disallowed in 3.9-3.10, and only half-worked in <=3.8.\n# On 3.12, we added __orig_bases__ to call-based NamedTuples\n# On 3.13, we deprecated kwargs-based NamedTuples\nif sys.version_info >= (3, 13):\n    NamedTuple = typing.NamedTuple\nelse:\n    def _make_nmtuple(name, types, module, defaults=()):\n        fields = [n for n, t in types]\n        annotations = {n: typing._type_check(t, f\"field {n} annotation must be a type\")\n                       for n, t in types}\n        nm_tpl = collections.namedtuple(name, fields,\n                                        defaults=defaults, module=module)\n        nm_tpl.__annotations__ = nm_tpl.__new__.__annotations__ = annotations\n        # The `_field_types` attribute was removed in 3.9;\n        # in earlier versions, it is the same as the `__annotations__` attribute\n        if sys.version_info < (3, 9):\n            nm_tpl._field_types = annotations\n        return nm_tpl\n\n    _prohibited_namedtuple_fields = typing._prohibited\n    _special_namedtuple_fields = frozenset({'__module__', '__name__', '__annotations__'})\n\n    class _NamedTupleMeta(type):\n        def __new__(cls, typename, bases, ns):\n            assert _NamedTuple in bases\n            for base in bases:\n                if base is not _NamedTuple and base is not typing.Generic:\n                    raise TypeError(\n                        'can only inherit from a NamedTuple type and Generic')\n            bases = tuple(tuple if base is _NamedTuple else base for base in bases)\n            if \"__annotations__\" in ns:\n                types = ns[\"__annotations__\"]\n            elif \"__annotate__\" in ns:\n                # TODO: Use inspect.VALUE here, and make the annotations lazily evaluated\n                types = ns[\"__annotate__\"](1)\n            else:\n                types = {}\n            default_names = []\n            for field_name in types:\n                if field_name in ns:\n                    default_names.append(field_name)\n                elif default_names:\n                    raise TypeError(f\"Non-default namedtuple field {field_name} \"\n                                    f\"cannot follow default field\"\n                                    f\"{'s' if len(default_names) > 1 else ''} \"\n                                    f\"{', '.join(default_names)}\")\n            nm_tpl = _make_nmtuple(\n                typename, types.items(),\n                defaults=[ns[n] for n in default_names],\n                module=ns['__module__']\n            )\n            nm_tpl.__bases__ = bases\n            if typing.Generic in bases:\n                if hasattr(typing, '_generic_class_getitem'):  # 3.12+\n                    nm_tpl.__class_getitem__ = classmethod(typing._generic_class_getitem)\n                else:\n                    class_getitem = typing.Generic.__class_getitem__.__func__\n                    nm_tpl.__class_getitem__ = classmethod(class_getitem)\n            # update from user namespace without overriding special namedtuple attributes\n            for key, val in ns.items():\n                if key in _prohibited_namedtuple_fields:\n                    raise AttributeError(\"Cannot overwrite NamedTuple attribute \" + key)\n                elif key not in _special_namedtuple_fields:\n                    if key not in nm_tpl._fields:\n                        setattr(nm_tpl, key, ns[key])\n                    try:\n                        set_name = type(val).__set_name__\n                    except AttributeError:\n                        pass\n                    else:\n                        try:\n                            set_name(val, nm_tpl, key)\n                        except BaseException as e:\n                            msg = (\n                                f\"Error calling __set_name__ on {type(val).__name__!r} \"\n                                f\"instance {key!r} in {typename!r}\"\n                            )\n                            # BaseException.add_note() existed on py311,\n                            # but the __set_name__ machinery didn't start\n                            # using add_note() until py312.\n                            # Making sure exceptions are raised in the same way\n                            # as in \"normal\" classes seems most important here.\n                            if sys.version_info >= (3, 12):\n                                e.add_note(msg)\n                                raise\n                            else:\n                                raise RuntimeError(msg) from e\n\n            if typing.Generic in bases:\n                nm_tpl.__init_subclass__()\n            return nm_tpl\n\n    _NamedTuple = type.__new__(_NamedTupleMeta, 'NamedTuple', (), {})\n\n    def _namedtuple_mro_entries(bases):\n        assert NamedTuple in bases\n        return (_NamedTuple,)\n\n    @_ensure_subclassable(_namedtuple_mro_entries)\n    def NamedTuple(typename, fields=_marker, /, **kwargs):\n        \"\"\"Typed version of namedtuple.\n\n        Usage::\n\n            class Employee(NamedTuple):\n                name: str\n                id: int\n\n        This is equivalent to::\n\n            Employee = collections.namedtuple('Employee', ['name', 'id'])\n\n        The resulting class has an extra __annotations__ attribute, giving a\n        dict that maps field names to types.  (The field names are also in\n        the _fields attribute, which is part of the namedtuple API.)\n        An alternative equivalent functional syntax is also accepted::\n\n            Employee = NamedTuple('Employee', [('name', str), ('id', int)])\n        \"\"\"\n        if fields is _marker:\n            if kwargs:\n                deprecated_thing = \"Creating NamedTuple classes using keyword arguments\"\n                deprecation_msg = (\n                    \"{name} is deprecated and will be disallowed in Python {remove}. \"\n                    \"Use the class-based or functional syntax instead.\"\n                )\n            else:\n                deprecated_thing = \"Failing to pass a value for the 'fields' parameter\"\n                example = f\"`{typename} = NamedTuple({typename!r}, [])`\"\n                deprecation_msg = (\n                    \"{name} is deprecated and will be disallowed in Python {remove}. \"\n                    \"To create a NamedTuple class with 0 fields \"\n                    \"using the functional syntax, \"\n                    \"pass an empty list, e.g. \"\n                ) + example + \".\"\n        elif fields is None:\n            if kwargs:\n                raise TypeError(\n                    \"Cannot pass `None` as the 'fields' parameter \"\n                    \"and also specify fields using keyword arguments\"\n                )\n            else:\n                deprecated_thing = \"Passing `None` as the 'fields' parameter\"\n                example = f\"`{typename} = NamedTuple({typename!r}, [])`\"\n                deprecation_msg = (\n                    \"{name} is deprecated and will be disallowed in Python {remove}. \"\n                    \"To create a NamedTuple class with 0 fields \"\n                    \"using the functional syntax, \"\n                    \"pass an empty list, e.g. \"\n                ) + example + \".\"\n        elif kwargs:\n            raise TypeError(\"Either list of fields or keywords\"\n                            \" can be provided to NamedTuple, not both\")\n        if fields is _marker or fields is None:\n            warnings.warn(\n                deprecation_msg.format(name=deprecated_thing, remove=\"3.15\"),\n                DeprecationWarning,\n                stacklevel=2,\n            )\n            fields = kwargs.items()\n        nt = _make_nmtuple(typename, fields, module=_caller())\n        nt.__orig_bases__ = (NamedTuple,)\n        return nt\n\n\nif hasattr(collections.abc, \"Buffer\"):\n    Buffer = collections.abc.Buffer\nelse:\n    class Buffer(abc.ABC):  # noqa: B024\n        \"\"\"Base class for classes that implement the buffer protocol.\n\n        The buffer protocol allows Python objects to expose a low-level\n        memory buffer interface. Before Python 3.12, it is not possible\n        to implement the buffer protocol in pure Python code, or even\n        to check whether a class implements the buffer protocol. In\n        Python 3.12 and higher, the ``__buffer__`` method allows access\n        to the buffer protocol from Python code, and the\n        ``collections.abc.Buffer`` ABC allows checking whether a class\n        implements the buffer protocol.\n\n        To indicate support for the buffer protocol in earlier versions,\n        inherit from this ABC, either in a stub file or at runtime,\n        or use ABC registration. This ABC provides no methods, because\n        there is no Python-accessible methods shared by pre-3.12 buffer\n        classes. It is useful primarily for static checks.\n\n        \"\"\"\n\n    # As a courtesy, register the most common stdlib buffer classes.\n    Buffer.register(memoryview)\n    Buffer.register(bytearray)\n    Buffer.register(bytes)\n\n\n# Backport of types.get_original_bases, available on 3.12+ in CPython\nif hasattr(_types, \"get_original_bases\"):\n    get_original_bases = _types.get_original_bases\nelse:\n    def get_original_bases(cls, /):\n        \"\"\"Return the class's \"original\" bases prior to modification by `__mro_entries__`.\n\n        Examples::\n\n            from typing import TypeVar, Generic\n            from typing_extensions import NamedTuple, TypedDict\n\n            T = TypeVar(\"T\")\n            class Foo(Generic[T]): ...\n            class Bar(Foo[int], float): ...\n            class Baz(list[str]): ...\n            Eggs = NamedTuple(\"Eggs\", [(\"a\", int), (\"b\", str)])\n            Spam = TypedDict(\"Spam\", {\"a\": int, \"b\": str})\n\n            assert get_original_bases(Bar) == (Foo[int], float)\n            assert get_original_bases(Baz) == (list[str],)\n            assert get_original_bases(Eggs) == (NamedTuple,)\n            assert get_original_bases(Spam) == (TypedDict,)\n            assert get_original_bases(int) == (object,)\n        \"\"\"\n        try:\n            return cls.__dict__.get(\"__orig_bases__\", cls.__bases__)\n        except AttributeError:\n            raise TypeError(\n                f'Expected an instance of type, not {type(cls).__name__!r}'\n            ) from None\n\n\n# NewType is a class on Python 3.10+, making it pickleable\n# The error message for subclassing instances of NewType was improved on 3.11+\nif sys.version_info >= (3, 11):\n    NewType = typing.NewType\nelse:\n    class NewType:\n        \"\"\"NewType creates simple unique types with almost zero\n        runtime overhead. NewType(name, tp) is considered a subtype of tp\n        by static type checkers. At runtime, NewType(name, tp) returns\n        a dummy callable that simply returns its argument. Usage::\n            UserId = NewType('UserId', int)\n            def name_by_id(user_id: UserId) -> str:\n                ...\n            UserId('user')          # Fails type check\n            name_by_id(42)          # Fails type check\n            name_by_id(UserId(42))  # OK\n            num = UserId(5) + 1     # type: int\n        \"\"\"\n\n        def __call__(self, obj, /):\n            return obj\n\n        def __init__(self, name, tp):\n            self.__qualname__ = name\n            if '.' in name:\n                name = name.rpartition('.')[-1]\n            self.__name__ = name\n            self.__supertype__ = tp\n            def_mod = _caller()\n            if def_mod != 'typing_extensions':\n                self.__module__ = def_mod\n\n        def __mro_entries__(self, bases):\n            # We defined __mro_entries__ to get a better error message\n            # if a user attempts to subclass a NewType instance. bpo-46170\n            supercls_name = self.__name__\n\n            class Dummy:\n                def __init_subclass__(cls):\n                    subcls_name = cls.__name__\n                    raise TypeError(\n                        f\"Cannot subclass an instance of NewType. \"\n                        f\"Perhaps you were looking for: \"\n                        f\"`{subcls_name} = NewType({subcls_name!r}, {supercls_name})`\"\n                    )\n\n            return (Dummy,)\n\n        def __repr__(self):\n            return f'{self.__module__}.{self.__qualname__}'\n\n        def __reduce__(self):\n            return self.__qualname__\n\n        if sys.version_info >= (3, 10):\n            # PEP 604 methods\n            # It doesn't make sense to have these methods on Python <3.10\n\n            def __or__(self, other):\n                return typing.Union[self, other]\n\n            def __ror__(self, other):\n                return typing.Union[other, self]\n\n\nif hasattr(typing, \"TypeAliasType\"):\n    TypeAliasType = typing.TypeAliasType\nelse:\n    def _is_unionable(obj):\n        \"\"\"Corresponds to is_unionable() in unionobject.c in CPython.\"\"\"\n        return obj is None or isinstance(obj, (\n            type,\n            _types.GenericAlias,\n            _types.UnionType,\n            TypeAliasType,\n        ))\n\n    class TypeAliasType:\n        \"\"\"Create named, parameterized type aliases.\n\n        This provides a backport of the new `type` statement in Python 3.12:\n\n            type ListOrSet[T] = list[T] | set[T]\n\n        is equivalent to:\n\n            T = TypeVar(\"T\")\n            ListOrSet = TypeAliasType(\"ListOrSet\", list[T] | set[T], type_params=(T,))\n\n        The name ListOrSet can then be used as an alias for the type it refers to.\n\n        The type_params argument should contain all the type parameters used\n        in the value of the type alias. If the alias is not generic, this\n        argument is omitted.\n\n        Static type checkers should only support type aliases declared using\n        TypeAliasType that follow these rules:\n\n        - The first argument (the name) must be a string literal.\n        - The TypeAliasType instance must be immediately assigned to a variable\n          of the same name. (For example, 'X = TypeAliasType(\"Y\", int)' is invalid,\n          as is 'X, Y = TypeAliasType(\"X\", int), TypeAliasType(\"Y\", int)').\n\n        \"\"\"\n\n        def __init__(self, name: str, value, *, type_params=()):\n            if not isinstance(name, str):\n                raise TypeError(\"TypeAliasType name must be a string\")\n            self.__value__ = value\n            self.__type_params__ = type_params\n\n            parameters = []\n            for type_param in type_params:\n                if isinstance(type_param, TypeVarTuple):\n                    parameters.extend(type_param)\n                else:\n                    parameters.append(type_param)\n            self.__parameters__ = tuple(parameters)\n            def_mod = _caller()\n            if def_mod != 'typing_extensions':\n                self.__module__ = def_mod\n            # Setting this attribute closes the TypeAliasType from further modification\n            self.__name__ = name\n\n        def __setattr__(self, name: str, value: object, /) -> None:\n            if hasattr(self, \"__name__\"):\n                self._raise_attribute_error(name)\n            super().__setattr__(name, value)\n\n        def __delattr__(self, name: str, /) -> Never:\n            self._raise_attribute_error(name)\n\n        def _raise_attribute_error(self, name: str) -> Never:\n            # Match the Python 3.12 error messages exactly\n            if name == \"__name__\":\n                raise AttributeError(\"readonly attribute\")\n            elif name in {\"__value__\", \"__type_params__\", \"__parameters__\", \"__module__\"}:\n                raise AttributeError(\n                    f\"attribute '{name}' of 'typing.TypeAliasType' objects \"\n                    \"is not writable\"\n                )\n            else:\n                raise AttributeError(\n                    f\"'typing.TypeAliasType' object has no attribute '{name}'\"\n                )\n\n        def __repr__(self) -> str:\n            return self.__name__\n\n        def __getitem__(self, parameters):\n            if not isinstance(parameters, tuple):\n                parameters = (parameters,)\n            parameters = [\n                typing._type_check(\n                    item, f'Subscripting {self.__name__} requires a type.'\n                )\n                for item in parameters\n            ]\n            return typing._GenericAlias(self, tuple(parameters))\n\n        def __reduce__(self):\n            return self.__name__\n\n        def __init_subclass__(cls, *args, **kwargs):\n            raise TypeError(\n                \"type 'typing_extensions.TypeAliasType' is not an acceptable base type\"\n            )\n\n        # The presence of this method convinces typing._type_check\n        # that TypeAliasTypes are types.\n        def __call__(self):\n            raise TypeError(\"Type alias is not callable\")\n\n        if sys.version_info >= (3, 10):\n            def __or__(self, right):\n                # For forward compatibility with 3.12, reject Unions\n                # that are not accepted by the built-in Union.\n                if not _is_unionable(right):\n                    return NotImplemented\n                return typing.Union[self, right]\n\n            def __ror__(self, left):\n                if not _is_unionable(left):\n                    return NotImplemented\n                return typing.Union[left, self]\n\n\nif hasattr(typing, \"is_protocol\"):\n    is_protocol = typing.is_protocol\n    get_protocol_members = typing.get_protocol_members\nelse:\n    def is_protocol(tp: type, /) -> bool:\n        \"\"\"Return True if the given type is a Protocol.\n\n        Example::\n\n            >>> from typing_extensions import Protocol, is_protocol\n            >>> class P(Protocol):\n            ...     def a(self) -> str: ...\n            ...     b: int\n            >>> is_protocol(P)\n            True\n            >>> is_protocol(int)\n            False\n        \"\"\"\n        return (\n            isinstance(tp, type)\n            and getattr(tp, '_is_protocol', False)\n            and tp is not Protocol\n            and tp is not typing.Protocol\n        )\n\n    def get_protocol_members(tp: type, /) -> typing.FrozenSet[str]:\n        \"\"\"Return the set of members defined in a Protocol.\n\n        Example::\n\n            >>> from typing_extensions import Protocol, get_protocol_members\n            >>> class P(Protocol):\n            ...     def a(self) -> str: ...\n            ...     b: int\n            >>> get_protocol_members(P)\n            frozenset({'a', 'b'})\n\n        Raise a TypeError for arguments that are not Protocols.\n        \"\"\"\n        if not is_protocol(tp):\n            raise TypeError(f'{tp!r} is not a Protocol')\n        if hasattr(tp, '__protocol_attrs__'):\n            return frozenset(tp.__protocol_attrs__)\n        return frozenset(_get_protocol_attrs(tp))\n\n\nif hasattr(typing, \"Doc\"):\n    Doc = typing.Doc\nelse:\n    class Doc:\n        \"\"\"Define the documentation of a type annotation using ``Annotated``, to be\n         used in class attributes, function and method parameters, return values,\n         and variables.\n\n        The value should be a positional-only string literal to allow static tools\n        like editors and documentation generators to use it.\n\n        This complements docstrings.\n\n        The string value passed is available in the attribute ``documentation``.\n\n        Example::\n\n            >>> from typing_extensions import Annotated, Doc\n            >>> def hi(to: Annotated[str, Doc(\"Who to say hi to\")]) -> None: ...\n        \"\"\"\n        def __init__(self, documentation: str, /) -> None:\n            self.documentation = documentation\n\n        def __repr__(self) -> str:\n            return f\"Doc({self.documentation!r})\"\n\n        def __hash__(self) -> int:\n            return hash(self.documentation)\n\n        def __eq__(self, other: object) -> bool:\n            if not isinstance(other, Doc):\n                return NotImplemented\n            return self.documentation == other.documentation\n\n\n_CapsuleType = getattr(_types, \"CapsuleType\", None)\n\nif _CapsuleType is None:\n    try:\n        import _socket\n    except ImportError:\n        pass\n    else:\n        _CAPI = getattr(_socket, \"CAPI\", None)\n        if _CAPI is not None:\n            _CapsuleType = type(_CAPI)\n\nif _CapsuleType is not None:\n    CapsuleType = _CapsuleType\n    __all__.append(\"CapsuleType\")\n\n\n# Aliases for items that have always been in typing.\n# Explicitly assign these (rather than using `from typing import *` at the top),\n# so that we get a CI error if one of these is deleted from typing.py\n# in a future version of Python\nAbstractSet = typing.AbstractSet\nAnyStr = typing.AnyStr\nBinaryIO = typing.BinaryIO\nCallable = typing.Callable\nCollection = typing.Collection\nContainer = typing.Container\nDict = typing.Dict\nForwardRef = typing.ForwardRef\nFrozenSet = typing.FrozenSet\nGeneric = typing.Generic\nHashable = typing.Hashable\nIO = typing.IO\nItemsView = typing.ItemsView\nIterable = typing.Iterable\nIterator = typing.Iterator\nKeysView = typing.KeysView\nList = typing.List\nMapping = typing.Mapping\nMappingView = typing.MappingView\nMatch = typing.Match\nMutableMapping = typing.MutableMapping\nMutableSequence = typing.MutableSequence\nMutableSet = typing.MutableSet\nOptional = typing.Optional\nPattern = typing.Pattern\nReversible = typing.Reversible\nSequence = typing.Sequence\nSet = typing.Set\nSized = typing.Sized\nTextIO = typing.TextIO\nTuple = typing.Tuple\nUnion = typing.Union\nValuesView = typing.ValuesView\ncast = typing.cast\nno_type_check = typing.no_type_check\nno_type_check_decorator = typing.no_type_check_decorator\n", 3641]}, "functions": {"init (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\db\\database.py:67)": ["D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\db\\database.py", 67], "get_session (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\db\\database.py:94)": ["D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\db\\database.py", 94], "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\repositories\\private.py:15)": ["D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\repositories\\private.py", 15], "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\repository.py:21)": ["D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\repository.py", 21], "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\db\\base_repository.py:33)": ["D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\db\\base_repository.py", 33], "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\group\\repository.py:28)": ["D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\group\\repository.py", 28], "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\user\\repository.py:34)": ["D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\user\\repository.py", 34], "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\group\\repository.py:244)": ["D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\group\\repository.py", 244], "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\user\\service.py:19)": ["D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\user\\service.py", 19], "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\core\\websocket\\manager.py:37)": ["D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\core\\websocket\\manager.py", 37], "setup_handlers (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\core\\websocket\\handlers.py:26)": ["D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\core\\websocket\\handlers.py", 26], "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\core\\websocket\\handlers.py:13)": ["D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\core\\websocket\\handlers.py", 13], "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\repositories\\group.py:17)": ["D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\repositories\\group.py", 17], "_get_group_repository (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\repository.py:28)": ["D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\repository.py", 28], "register_handlers (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\handlers.py:56)": ["D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\handlers.py", 56], "__init__ (D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\handlers.py:28)": ["D:\\TD_Depot\\Software\\Lugwit_syncPlug\\lugwit_insapp\\trayapp\\Lib\\ChatRoom\\backend\\app\\domain\\message\\handlers.py", 28], "wrapper (C:\\Users\\qqfeng\\AppData\\Roaming\\Python\\Python311\\site-packages\\typing_extensions.py:2850)": ["C:\\Users\\qqfeng\\AppData\\Roaming\\Python\\Python311\\site-packages\\typing_extensions.py", 2850]}}}