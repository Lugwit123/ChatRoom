# 项目配置

## 环境配置
- python解释器路径: D:\TD_Depot\Software\Lugwit_syncPlug\lugwit_insapp\python_env\lugwit_chatroom.exe
- 控制台编码: 65001
- 时间戳格式: 带时区
- Python包管理: requirements.txt
- 运行后端使用"cmd /c run_backend_server.bat".运行前结束"lugwit_chatroom.exe"
- 禁止主动启动后端服务器,除非是我的指令
- 请每次都把后端的修改记录到backend\docs\CHANGELOG.md
- 禁止修改测试文件和日志配置文件
- 编译.py文件时,文件并不写上一些该代码文件的功能和拥有的函数的功能
- 使用门面模式,不要轻易创建文件,文件都是存在的,只是改成了门面模式,导入存在缺失的使用搜索的方式寻找一下
-  禁止修改backend\.env
- 所有自仓库继承自基础仓库,不应该添加对话参数,而是使用继承自基础仓库对话的方式


# 开发规范

## 代码组织
1. 领域模块基本结构：
   - models.py: 数据模型定义
   - repository.py: 数据访问层
   - service.py: 业务逻辑层
   - router.py: 路由定义
   - handlers.py: 事件处理器
   - schemas.py: 数据验证
   - enums.py: 枚举定义

2. 特殊模块结构：
   a. 消息模块：
      - facade/: 外观模式实现
      - internal/: 内部实现
      - repository/: 数据仓储
   
   b. 文件模块：
      - abc_check/: ABC文件检查

## 代码规范
1. 导入规范：
   - 使用绝对导入
   - 标准库 > 第三方库 > 本地模块
   - 避免循环导入

2. 数据库规范：
   - 禁止使用SqlModel
   - 使用异步SQLAlchemy
   - 每个群组独立消息表
   - 每个群组独立归档表
   - 消息表分区策略：
     * 按时间分区
     * 按状态分区（活跃/归档）
   - 索引策略：
     * 消息ID索引
     * 发送时间索引
     * 发送者索引
     * 全文搜索索引
   - 使用BaseRepository基类
   - 统一事务处理

3. 异常处理：
   - 使用自定义异常类
   - 统一使用lprint记录日志
   - 包含完整堆栈信息
   - 异常信息要详细明确

4. 类型注解：
   - 所有函数必须有类型注解
   - 使用typing模块的类型
   - 复杂类型使用类型别名

## 日志规范
1. 日志配置：
   - 使用lprint而不是logger
   - 导入方式：import Lugwit_Module as LM, lprint=LM.lprint
   - 在backend_main.py中使用from logging_config import setup_logging

2. 日志检查：
   - 不要仅通过view_file工具判断文件是否为空
   - 必须先用list_dir检查文件大小
   - 如果只有当读取不到日志时才使用python查看后端日志,注意是utf8编码

## 测试规范
1. 测试结构：
   - unit/: 单元测试
   - integration/: 集成测试
   - e2e/: 端到端测试

2. 测试规则：
   - 命名规范：
     * test_*.py: 测试文件
     * test_*: 测试函数
     * Test*: 测试类
   - 覆盖率要求：
     * 核心功能必须有单元测试
     * 关键流程必须有集成测试
   - 工具使用：
     * pytest
     * pytest-asyncio
     * pytest-cov
     * pytest-mock

## 错误处理
1. 常见错误预防：
   - 'AsyncEngine' object has no attribute 'execute'
   - 'coroutine' object is not iterable
   - 'coroutine' object has no attribute 'first'

2. 错误记录：
   - 使用lprint记录
   - 包含时间和堆栈信息
   - 错误信息要明确具体

3. 错误预防：
   - 代码修改前检查ERROR_GUIDE.md
   - 使用类型检查器
   - 编写单元测试

# 运行说明
1. 环境准备：
   - 安装依赖: pip install -r requirements.txt
   - 配置.env文件
   - 初始化数据库

2. 启动服务：
   - 运行run_server.bat
   - 检查日志输出
   - 验证服务状态

3. 测试运行：
   - 运行run_tests.bat
   - 检查测试报告
   - 分析覆盖率报告

# 安全规范
1. 认证授权：
   - 使用JWT令牌
   - 实现角色权限
   - 加密敏感数据
   - 防止越权访问

2. 数据安全：
   - 加密存储密码
   - 防止SQL注入
   - 输入数据验证
   - 防止XSS攻击

3. 日志安全：
   - 脱敏敏感信息
   - 记录关键操作
   - 定期清理日志
   - 保护日志文件

# 文档维护
1. 文档位置：
   - README.md: 项目总览
   - docs/: 详细文档
   - ERROR_GUIDE.md: 错误指南
   - API.md: 接口文档

2. 文档更新：
   - 代码变更同步更新文档
   - 定期检查文档准确性
   - 保持文档格式统一
   - 记录重要决策